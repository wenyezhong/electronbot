ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"user.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  23              	_Z41__static_initialization_and_destruction_0ii:
  24              		.fnstart
  25              	.LVL0:
  26              	.LFB1062:
  27              		.file 1 "Src/user.cpp"
   1:Src/user.cpp  **** #include <cstring>
   2:Src/user.cpp  **** #include "common_inc.h"
   3:Src/user.cpp  **** #include "configurations.h"
   4:Src/user.cpp  **** #include <stdio.h>
   5:Src/user.cpp  **** Motor motor;
   6:Src/user.cpp  **** BoardConfig_t boardConfig;
   7:Src/user.cpp  **** 
   8:Src/user.cpp  **** 
   9:Src/user.cpp  **** /* Default Entry -------------------------------------------------------*/
  10:Src/user.cpp  **** void Main(void)
  11:Src/user.cpp  **** {
  12:Src/user.cpp  ****     // Read data from Flash
  13:Src/user.cpp  ****     EEPROM eeprom;
  14:Src/user.cpp  ****     eeprom.get(0, boardConfig);
  15:Src/user.cpp  ****     
  16:Src/user.cpp  ****     if (boardConfig.configStatus != CONFIG_OK) // use default settings
  17:Src/user.cpp  ****     {
  18:Src/user.cpp  ****         printf("config not\r\n");
  19:Src/user.cpp  ****         boardConfig = BoardConfig_t{
  20:Src/user.cpp  ****             .configStatus = CONFIG_OK,
  21:Src/user.cpp  ****             .nodeId = 12, // 7bit address, has to be even number
  22:Src/user.cpp  ****             .initPos = 90,
  23:Src/user.cpp  ****             .toqueLimit =  0.5,
  24:Src/user.cpp  ****             .velocityLimit=0,
  25:Src/user.cpp  ****             .adcValAtAngleMin=250,
  26:Src/user.cpp  ****             .adcValAtAngleMax=3000,
  27:Src/user.cpp  ****             .mechanicalAngleMin=0,
  28:Src/user.cpp  ****             .mechanicalAngleMax=180,
  29:Src/user.cpp  ****             .dceKp = 10,
  30:Src/user.cpp  ****             .dceKv = 0,
  31:Src/user.cpp  ****             .dceKi = 0,
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 2


  32:Src/user.cpp  ****             .dceKd = 50,
  33:Src/user.cpp  ****             .enableMotorOnBoot=false
  34:Src/user.cpp  ****         };
  35:Src/user.cpp  ****         eeprom.put(0, boardConfig);
  36:Src/user.cpp  ****     }
  37:Src/user.cpp  ****     else
  38:Src/user.cpp  ****     {
  39:Src/user.cpp  ****         printf("configed\r\n");
  40:Src/user.cpp  ****     }
  41:Src/user.cpp  ****     motor.SetTorqueLimit(boardConfig.toqueLimit);
  42:Src/user.cpp  ****     motor.mechanicalAngleMin = boardConfig.mechanicalAngleMin;
  43:Src/user.cpp  ****     motor.mechanicalAngleMax = boardConfig.mechanicalAngleMax;
  44:Src/user.cpp  ****     motor.adcValAtAngleMin = boardConfig.adcValAtAngleMin;
  45:Src/user.cpp  ****     motor.adcValAtAngleMax = boardConfig.adcValAtAngleMax;
  46:Src/user.cpp  ****     motor.dce.kp = boardConfig.dceKp;
  47:Src/user.cpp  ****     motor.dce.ki = boardConfig.dceKi;
  48:Src/user.cpp  ****     motor.dce.kv = boardConfig.dceKv;
  49:Src/user.cpp  ****     motor.dce.kd = boardConfig.dceKd;
  50:Src/user.cpp  ****     motor.dce.setPointPos = boardConfig.initPos;
  51:Src/user.cpp  ****     motor.SetEnable(boardConfig.enableMotorOnBoot);
  52:Src/user.cpp  ****     // Init PWM
  53:Src/user.cpp  ****     LL_TIM_EnableCounter(TIM3);
  54:Src/user.cpp  ****     LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH1);
  55:Src/user.cpp  ****     LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH2);
  56:Src/user.cpp  ****     LL_TIM_OC_SetCompareCH1(TIM3,0);
  57:Src/user.cpp  ****     LL_TIM_OC_SetCompareCH2(TIM3,0);
  58:Src/user.cpp  **** 
  59:Src/user.cpp  ****     // Start receive data
  60:Src/user.cpp  ****     MY_I2C1_Init(boardConfig.nodeId);
  61:Src/user.cpp  ****     LL_mDelay(10);
  62:Src/user.cpp  ****     // Start control loop at 200Hz
  63:Src/user.cpp  ****     LL_TIM_EnableIT_UPDATE(TIM14);
  64:Src/user.cpp  ****     LL_TIM_EnableCounter(TIM14);
  65:Src/user.cpp  **** 
  66:Src/user.cpp  **** 
  67:Src/user.cpp  ****     while (1)
  68:Src/user.cpp  ****     {
  69:Src/user.cpp  ****         if (boardConfig.configStatus == CONFIG_COMMIT)
  70:Src/user.cpp  ****         {
  71:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_OK;
  72:Src/user.cpp  ****             eeprom.put(0, boardConfig);
  73:Src/user.cpp  ****         } else if (boardConfig.configStatus == CONFIG_RESTORE)
  74:Src/user.cpp  ****         {
  75:Src/user.cpp  ****             eeprom.put(0, boardConfig);
  76:Src/user.cpp  ****             NVIC_SystemReset();
  77:Src/user.cpp  ****         }
  78:Src/user.cpp  ****     /* for debug */
  79:Src/user.cpp  ****        //LL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
  80:Src/user.cpp  ****     }
  81:Src/user.cpp  **** }
  82:Src/user.cpp  **** 
  83:Src/user.cpp  **** 
  84:Src/user.cpp  **** /* Callbacks -------------------------------------------------------*/
  85:Src/user.cpp  **** // void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
  86:Src/user.cpp  **** // {
  87:Src/user.cpp  **** 
  88:Src/user.cpp  **** // }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 3


  89:Src/user.cpp  **** 
  90:Src/user.cpp  **** 
  91:Src/user.cpp  **** // // Command handler
  92:Src/user.cpp  **** void I2C_SlaveDMARxCpltCallback()
  93:Src/user.cpp  **** {
  94:Src/user.cpp  ****     ErrorStatus state;
  95:Src/user.cpp  **** 
  96:Src/user.cpp  ****     float valF = *((float*) (i2cDataRx + 1));
  97:Src/user.cpp  **** 
  98:Src/user.cpp  ****     i2cDataTx[0] = i2cDataRx[0];
  99:Src/user.cpp  ****     switch (i2cDataRx[0])
 100:Src/user.cpp  ****     {
 101:Src/user.cpp  ****         case 0x01:  // Set angle
 102:Src/user.cpp  ****         {
 103:Src/user.cpp  ****             motor.dce.setPointPos = valF;
 104:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 107:Src/user.cpp  ****             break;
 108:Src/user.cpp  ****         }
 109:Src/user.cpp  ****         case 0x02: // Set velocity
 110:Src/user.cpp  ****         {
 111:Src/user.cpp  ****             motor.dce.setPointVel = valF;
 112:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.velocity);
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 115:Src/user.cpp  ****             break;
 116:Src/user.cpp  ****         }
 117:Src/user.cpp  ****         case 0x03: // Set torque
 118:Src/user.cpp  ****         {
 119:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 120:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 123:Src/user.cpp  ****             break;
 124:Src/user.cpp  ****         }
 125:Src/user.cpp  ****         case 0x11: // Get angle
 126:Src/user.cpp  ****         {
 127:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 128:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 130:Src/user.cpp  ****             break;
 131:Src/user.cpp  ****         }
 132:Src/user.cpp  ****         case 0x12: // Get velocity
 133:Src/user.cpp  ****         {
 134:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.velocity);
 135:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 137:Src/user.cpp  ****             break;
 138:Src/user.cpp  ****         }
 139:Src/user.cpp  ****         case 0x21: // Set id
 140:Src/user.cpp  ****         {
 141:Src/user.cpp  ****             boardConfig.nodeId = i2cDataRx[1];
 142:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 143:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 4


 146:Src/user.cpp  ****             break;
 147:Src/user.cpp  ****         }
 148:Src/user.cpp  ****         case 0x22: // Set kp
 149:Src/user.cpp  ****         {
 150:Src/user.cpp  ****             motor.dce.kp = valF;
 151:Src/user.cpp  ****             boardConfig.dceKp = valF;
 152:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 153:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 156:Src/user.cpp  ****             break;
 157:Src/user.cpp  ****         }
 158:Src/user.cpp  ****         case 0x23: // Set ki
 159:Src/user.cpp  ****         {
 160:Src/user.cpp  ****             motor.dce.ki = valF;
 161:Src/user.cpp  ****             boardConfig.dceKi = valF;
 162:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 163:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 166:Src/user.cpp  ****             break;
 167:Src/user.cpp  ****         }
 168:Src/user.cpp  ****         case 0x24: // Set kv
 169:Src/user.cpp  ****         {
 170:Src/user.cpp  ****             motor.dce.kv = valF;
 171:Src/user.cpp  ****             boardConfig.dceKv = valF;
 172:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 173:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 176:Src/user.cpp  ****             break;
 177:Src/user.cpp  ****         }
 178:Src/user.cpp  ****         case 0x25: // Set kd
 179:Src/user.cpp  ****         {
 180:Src/user.cpp  ****             motor.dce.kd = valF;
 181:Src/user.cpp  ****             boardConfig.dceKd = valF;
 182:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 183:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 186:Src/user.cpp  ****             break;
 187:Src/user.cpp  ****         }
 188:Src/user.cpp  ****         case 0x26: // Set torque limit
 189:Src/user.cpp  ****         {
 190:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 191:Src/user.cpp  ****             boardConfig.toqueLimit = valF;
 192:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 193:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 196:Src/user.cpp  ****             break;
 197:Src/user.cpp  ****         }
 198:Src/user.cpp  ****         case 0x27: // Set init pos
 199:Src/user.cpp  ****         {
 200:Src/user.cpp  ****             boardConfig.initPos = valF;
 201:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 202:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 5


 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 205:Src/user.cpp  ****             break;
 206:Src/user.cpp  ****         }
 207:Src/user.cpp  ****         case 0xff:
 208:Src/user.cpp  ****             motor.SetEnable(i2cDataRx[1] != 0);
 209:Src/user.cpp  ****             break;
 210:Src/user.cpp  ****         default:
 211:Src/user.cpp  ****             break;
 212:Src/user.cpp  ****     }
 213:Src/user.cpp  ****     do
 214:Src/user.cpp  ****     {
 215:Src/user.cpp  ****        state = Slave_Transmit(i2cDataTx,5,5000);
 216:Src/user.cpp  ****     } while (state != SUCCESS);
 217:Src/user.cpp  ****     if(i2cDataRx[0] == 0x21)
 218:Src/user.cpp  ****     {
 219:Src/user.cpp  ****         Set_ID(boardConfig.nodeId);
 220:Src/user.cpp  ****     }
 221:Src/user.cpp  **** 
 222:Src/user.cpp  **** }
 223:Src/user.cpp  **** 
 224:Src/user.cpp  **** 
 225:Src/user.cpp  **** // Control loop
 226:Src/user.cpp  **** void TIM14_PeriodElapsedCallback(void)
 227:Src/user.cpp  **** {
 228:Src/user.cpp  ****         // Read sensor data
 229:Src/user.cpp  ****     // LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 230:Src/user.cpp  ****     LL_ADC_REG_StartConversion(ADC1);
 231:Src/user.cpp  ****     
 232:Src/user.cpp  ****     motor.angle = motor.mechanicalAngleMin +
 233:Src/user.cpp  ****                     (motor.mechanicalAngleMax - motor.mechanicalAngleMin) *
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 235:Src/user.cpp  ****                     ((float) motor.adcValAtAngleMax - (float) motor.adcValAtAngleMin);
 236:Src/user.cpp  ****     // Calculate PID
 237:Src/user.cpp  ****     motor.CalcDceOutput(motor.angle, 0);
 238:Src/user.cpp  ****     motor.SetPwm((int16_t) motor.dce.output);
 239:Src/user.cpp  **** }...
  28              		.loc 1 239 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 239 1 is_stmt 0 view .LVU1
  34 0000 0128     		cmp	r0, #1
  35 0002 00D0     		beq	.L3
  36              	.L1:
  37              		@ sp needed
  38 0004 7047     		bx	lr
  39              	.L3:
  40              		.loc 1 239 1 discriminator 1 view .LVU2
  41 0006 034B     		ldr	r3, .L4
  42 0008 9942     		cmp	r1, r3
  43 000a FBD1     		bne	.L1
  44              	.LVL1:
  45              	.LBB34:
  46              	.LBI34:
  47              		.file 2 "Inc/motor.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 6


   1:Inc/motor.h   **** #ifndef SERVODRIVE_FW_MOTOR_H
   2:Inc/motor.h   **** #define SERVODRIVE_FW_MOTOR_H
   3:Inc/motor.h   **** 
   4:Inc/motor.h   **** #include <cstdint>
   5:Inc/motor.h   **** 
   6:Inc/motor.h   **** class Motor
   7:Inc/motor.h   **** {
   8:Inc/motor.h   **** public:
   9:Inc/motor.h   ****     Motor()
  48              		.loc 2 9 5 is_stmt 1 view .LVU3
  49              	.LBB35:
  50              	.LBB36:
  10:Inc/motor.h   ****     {}
  51              		.loc 2 10 5 is_stmt 0 view .LVU4
  52 000c 024B     		ldr	r3, .L4+4
  53 000e 034A     		ldr	r2, .L4+8
  54 0010 1A60     		str	r2, [r3]
  55              	.LVL2:
  56              		.loc 2 10 5 view .LVU5
  57              	.LBE36:
  58              	.LBE35:
  59              	.LBE34:
  60              		.loc 1 239 1 view .LVU6
  61 0012 F7E7     		b	.L1
  62              	.L5:
  63              		.align	2
  64              	.L4:
  65 0014 FFFF0000 		.word	65535
  66 0018 00000000 		.word	.LANCHOR0
  67 001c 0000FA43 		.word	1140457472
  68              		.cfi_endproc
  69              	.LFE1062:
  70              		.cantunwind
  71              		.fnend
  73              		.section	.text.I2C_SlaveDMARxCpltCallback,"ax",%progbits
  74              		.align	1
  75              		.global	I2C_SlaveDMARxCpltCallback
  76              		.syntax unified
  77              		.code	16
  78              		.thumb_func
  80              	I2C_SlaveDMARxCpltCallback:
  81              		.fnstart
  82              	.LFB1058:
  93:Src/user.cpp  **** {
  83              		.loc 1 93 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87 0000 10B5     		push	{r4, lr}
  88              		.save {r4, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
  94:Src/user.cpp  ****     ErrorStatus state;
  93              		.loc 1 94 5 view .LVU8
  96:Src/user.cpp  ****     float valF = *((float*) (i2cDataRx + 1));
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 7


  94              		.loc 1 96 5 view .LVU9
  96:Src/user.cpp  ****     float valF = *((float*) (i2cDataRx + 1));
  95              		.loc 1 96 11 is_stmt 0 view .LVU10
  96 0002 774B     		ldr	r3, .L38
  97 0004 5878     		ldrb	r0, [r3, #1]
  98 0006 9978     		ldrb	r1, [r3, #2]
  99 0008 0902     		lsls	r1, r1, #8
 100 000a 0843     		orrs	r0, r1
 101 000c DA78     		ldrb	r2, [r3, #3]
 102 000e 1204     		lsls	r2, r2, #16
 103 0010 0243     		orrs	r2, r0
 104 0012 1C79     		ldrb	r4, [r3, #4]
 105 0014 2406     		lsls	r4, r4, #24
 106 0016 1443     		orrs	r4, r2
 107              	.LVL3:
  98:Src/user.cpp  ****     i2cDataTx[0] = i2cDataRx[0];
 108              		.loc 1 98 5 is_stmt 1 view .LVU11
  98:Src/user.cpp  ****     i2cDataTx[0] = i2cDataRx[0];
 109              		.loc 1 98 31 is_stmt 0 view .LVU12
 110 0018 1B78     		ldrb	r3, [r3]
  98:Src/user.cpp  ****     i2cDataTx[0] = i2cDataRx[0];
 111              		.loc 1 98 18 view .LVU13
 112 001a 724A     		ldr	r2, .L38+4
 113 001c 1370     		strb	r3, [r2]
  99:Src/user.cpp  ****     switch (i2cDataRx[0])
 114              		.loc 1 99 5 is_stmt 1 view .LVU14
 115              	.LBB37:
 116 001e 272B     		cmp	r3, #39
 117 0020 07D8     		bhi	.L7
 118 0022 002B     		cmp	r3, #0
 119 0024 0FD0     		beq	.L33
 120 0026 272B     		cmp	r3, #39
 121 0028 0DD8     		bhi	.L33
 122 002a 9B00     		lsls	r3, r3, #2
 123 002c 6E4A     		ldr	r2, .L38+8
 124 002e D358     		ldr	r3, [r2, r3]
 125 0030 9F46     		mov	pc, r3
 126              		.section	.rodata.I2C_SlaveDMARxCpltCallback,"a",%progbits
 127              		.align	2
 128              	.L10:
 129 0000 46000000 		.word	.L33
 130 0004 60000000 		.word	.L21
 131 0008 7A000000 		.word	.L20
 132 000c 94000000 		.word	.L19
 133 0010 46000000 		.word	.L33
 134 0014 46000000 		.word	.L33
 135 0018 46000000 		.word	.L33
 136 001c 46000000 		.word	.L33
 137 0020 46000000 		.word	.L33
 138 0024 46000000 		.word	.L33
 139 0028 46000000 		.word	.L33
 140 002c 46000000 		.word	.L33
 141 0030 46000000 		.word	.L33
 142 0034 46000000 		.word	.L33
 143 0038 46000000 		.word	.L33
 144 003c 46000000 		.word	.L33
 145 0040 46000000 		.word	.L33
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 8


 146 0044 B2000000 		.word	.L35
 147 0048 C8000000 		.word	.L36
 148 004c 46000000 		.word	.L33
 149 0050 46000000 		.word	.L33
 150 0054 46000000 		.word	.L33
 151 0058 46000000 		.word	.L33
 152 005c 46000000 		.word	.L33
 153 0060 46000000 		.word	.L33
 154 0064 46000000 		.word	.L33
 155 0068 46000000 		.word	.L33
 156 006c 46000000 		.word	.L33
 157 0070 46000000 		.word	.L33
 158 0074 46000000 		.word	.L33
 159 0078 46000000 		.word	.L33
 160 007c 46000000 		.word	.L33
 161 0080 46000000 		.word	.L33
 162 0084 DE000000 		.word	.L16
 163 0088 00010000 		.word	.L15
 164 008c 22010000 		.word	.L14
 165 0090 46010000 		.word	.L13
 166 0094 6A010000 		.word	.L12
 167 0098 8E010000 		.word	.L11
 168 009c B6010000 		.word	.L9
 169              		.section	.text.I2C_SlaveDMARxCpltCallback
 170              	.L7:
 171 0032 FF2B     		cmp	r3, #255
 172 0034 07D1     		bne	.L33
 173              	.LBB38:
 207:Src/user.cpp  ****         case 0xff:
 174              		.loc 1 207 9 view .LVU15
 208:Src/user.cpp  ****             motor.SetEnable(i2cDataRx[1] != 0);
 175              		.loc 1 208 13 view .LVU16
 208:Src/user.cpp  ****             motor.SetEnable(i2cDataRx[1] != 0);
 176              		.loc 1 208 40 is_stmt 0 view .LVU17
 177 0036 6A4B     		ldr	r3, .L38
 178 0038 5978     		ldrb	r1, [r3, #1]
 208:Src/user.cpp  ****             motor.SetEnable(i2cDataRx[1] != 0);
 179              		.loc 1 208 28 view .LVU18
 180 003a 4B1E     		subs	r3, r1, #1
 181 003c 9941     		sbcs	r1, r1, r3
 182 003e C9B2     		uxtb	r1, r1
 183 0040 6A48     		ldr	r0, .L38+12
 184 0042 FFF7FEFF 		bl	_ZN5Motor9SetEnableEb
 185              	.LVL4:
 209:Src/user.cpp  ****             break;
 186              		.loc 1 209 13 is_stmt 1 view .LVU19
 187              	.L33:
 188              	.LBE38:
 189              	.LBE37:
 213:Src/user.cpp  ****     do
 190              		.loc 1 213 5 view .LVU20
 215:Src/user.cpp  ****        state = Slave_Transmit(i2cDataTx,5,5000);
 191              		.loc 1 215 8 view .LVU21
 215:Src/user.cpp  ****        state = Slave_Transmit(i2cDataTx,5,5000);
 192              		.loc 1 215 30 is_stmt 0 view .LVU22
 193 0046 6A4A     		ldr	r2, .L38+16
 194 0048 0521     		movs	r1, #5
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 9


 195 004a 6648     		ldr	r0, .L38+4
 196 004c FFF7FEFF 		bl	Slave_Transmit
 197              	.LVL5:
 216:Src/user.cpp  ****     } while (state != SUCCESS);
 198              		.loc 1 216 20 is_stmt 1 view .LVU23
 199 0050 0028     		cmp	r0, #0
 200 0052 F8D1     		bne	.L33
 217:Src/user.cpp  ****     if(i2cDataRx[0] == 0x21)
 201              		.loc 1 217 5 view .LVU24
 217:Src/user.cpp  ****     if(i2cDataRx[0] == 0x21)
 202              		.loc 1 217 19 is_stmt 0 view .LVU25
 203 0054 624B     		ldr	r3, .L38
 204 0056 1B78     		ldrb	r3, [r3]
 217:Src/user.cpp  ****     if(i2cDataRx[0] == 0x21)
 205              		.loc 1 217 5 view .LVU26
 206 0058 212B     		cmp	r3, #33
 207 005a 00D1     		bne	.LCB123
 208 005c BBE0     		b	.L37	@long jump
 209              	.LCB123:
 210              	.LVL6:
 211              	.L6:
 222:Src/user.cpp  **** }
 212              		.loc 1 222 1 view .LVU27
 213              		@ sp needed
 214              	.LVL7:
 222:Src/user.cpp  **** }
 215              		.loc 1 222 1 view .LVU28
 216 005e 10BD     		pop	{r4, pc}
 217              	.LVL8:
 218              	.L21:
 219              	.LBB66:
 220              	.LBB63:
 101:Src/user.cpp  ****         case 0x01:  // Set angle
 221              		.loc 1 101 9 is_stmt 1 view .LVU29
 102:Src/user.cpp  ****         {
 222              		.loc 1 102 9 view .LVU30
 223              	.LBB39:
 103:Src/user.cpp  ****             motor.dce.setPointPos = valF;
 224              		.loc 1 103 13 view .LVU31
 103:Src/user.cpp  ****             motor.dce.setPointPos = valF;
 225              		.loc 1 103 35 is_stmt 0 view .LVU32
 226 0060 624B     		ldr	r3, .L38+12
 227 0062 5C61     		str	r4, [r3, #20]
 104:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 228              		.loc 1 104 13 is_stmt 1 view .LVU33
 229              	.LVL9:
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 230              		.loc 1 105 13 view .LVU34
 231              	.LBB40:
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 232              		.loc 1 105 22 is_stmt 0 view .LVU35
 233 0064 0022     		movs	r2, #0
 234              	.LVL10:
 235              	.L23:
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 236              		.loc 1 105 31 is_stmt 1 discriminator 3 view .LVU36
 237 0066 032A     		cmp	r2, #3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 10


 238 0068 EDDC     		bgt	.L33
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 239              		.loc 1 106 17 discriminator 2 view .LVU37
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 240              		.loc 1 106 40 is_stmt 0 discriminator 2 view .LVU38
 241 006a 604B     		ldr	r3, .L38+12
 242 006c 3033     		adds	r3, r3, #48
 243 006e 9B18     		adds	r3, r3, r2
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 244              		.loc 1 106 29 discriminator 2 view .LVU39
 245 0070 0132     		adds	r2, r2, #1
 246              	.LVL11:
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 247              		.loc 1 106 36 discriminator 2 view .LVU40
 248 0072 1978     		ldrb	r1, [r3]
 106:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 249              		.loc 1 106 34 discriminator 2 view .LVU41
 250 0074 5B4B     		ldr	r3, .L38+4
 251 0076 9954     		strb	r1, [r3, r2]
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 252              		.loc 1 105 13 is_stmt 1 discriminator 2 view .LVU42
 253              	.LVL12:
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 254              		.loc 1 105 13 is_stmt 0 discriminator 2 view .LVU43
 255 0078 F5E7     		b	.L23
 256              	.LVL13:
 257              	.L20:
 105:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 258              		.loc 1 105 13 discriminator 2 view .LVU44
 259              	.LBE40:
 260              	.LBE39:
 109:Src/user.cpp  ****         case 0x02: // Set velocity
 261              		.loc 1 109 9 is_stmt 1 view .LVU45
 110:Src/user.cpp  ****         {
 262              		.loc 1 110 9 view .LVU46
 263              	.LBB41:
 111:Src/user.cpp  ****             motor.dce.setPointVel = valF;
 264              		.loc 1 111 13 view .LVU47
 111:Src/user.cpp  ****             motor.dce.setPointVel = valF;
 265              		.loc 1 111 35 is_stmt 0 view .LVU48
 266 007a 5C4B     		ldr	r3, .L38+12
 267 007c 9C61     		str	r4, [r3, #24]
 112:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.velocity);
 268              		.loc 1 112 13 is_stmt 1 view .LVU49
 269              	.LVL14:
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 270              		.loc 1 113 13 view .LVU50
 271              	.LBB42:
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 272              		.loc 1 113 22 is_stmt 0 view .LVU51
 273 007e 0022     		movs	r2, #0
 274              	.LVL15:
 275              	.L24:
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 276              		.loc 1 113 31 is_stmt 1 discriminator 3 view .LVU52
 277 0080 032A     		cmp	r2, #3
 278 0082 E0DC     		bgt	.L33
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 11


 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 279              		.loc 1 114 17 discriminator 2 view .LVU53
 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 280              		.loc 1 114 40 is_stmt 0 discriminator 2 view .LVU54
 281 0084 594B     		ldr	r3, .L38+12
 282 0086 3433     		adds	r3, r3, #52
 283 0088 9B18     		adds	r3, r3, r2
 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 284              		.loc 1 114 29 discriminator 2 view .LVU55
 285 008a 0132     		adds	r2, r2, #1
 286              	.LVL16:
 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 287              		.loc 1 114 36 discriminator 2 view .LVU56
 288 008c 1978     		ldrb	r1, [r3]
 114:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 289              		.loc 1 114 34 discriminator 2 view .LVU57
 290 008e 554B     		ldr	r3, .L38+4
 291 0090 9954     		strb	r1, [r3, r2]
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 292              		.loc 1 113 13 is_stmt 1 discriminator 2 view .LVU58
 293              	.LVL17:
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 294              		.loc 1 113 13 is_stmt 0 discriminator 2 view .LVU59
 295 0092 F5E7     		b	.L24
 296              	.LVL18:
 297              	.L19:
 113:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 298              		.loc 1 113 13 discriminator 2 view .LVU60
 299              	.LBE42:
 300              	.LBE41:
 117:Src/user.cpp  ****         case 0x03: // Set torque
 301              		.loc 1 117 9 is_stmt 1 view .LVU61
 118:Src/user.cpp  ****         {
 302              		.loc 1 118 9 view .LVU62
 303              	.LBB43:
 119:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 304              		.loc 1 119 13 view .LVU63
 119:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 305              		.loc 1 119 33 is_stmt 0 view .LVU64
 306 0094 211C     		adds	r1, r4, #0
 307 0096 5548     		ldr	r0, .L38+12
 308 0098 FFF7FEFF 		bl	_ZN5Motor14SetTorqueLimitEf
 309              	.LVL19:
 120:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 310              		.loc 1 120 13 is_stmt 1 view .LVU65
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 311              		.loc 1 121 13 view .LVU66
 312              	.LBB44:
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 313              		.loc 1 121 22 is_stmt 0 view .LVU67
 314 009c 0022     		movs	r2, #0
 315              	.LVL20:
 316              	.L25:
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 317              		.loc 1 121 31 is_stmt 1 discriminator 3 view .LVU68
 318 009e 032A     		cmp	r2, #3
 319 00a0 D1DC     		bgt	.L33
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 12


 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 320              		.loc 1 122 17 discriminator 2 view .LVU69
 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 321              		.loc 1 122 40 is_stmt 0 discriminator 2 view .LVU70
 322 00a2 524B     		ldr	r3, .L38+12
 323 00a4 3033     		adds	r3, r3, #48
 324 00a6 9B18     		adds	r3, r3, r2
 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 325              		.loc 1 122 29 discriminator 2 view .LVU71
 326 00a8 0132     		adds	r2, r2, #1
 327              	.LVL21:
 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 328              		.loc 1 122 36 discriminator 2 view .LVU72
 329 00aa 1978     		ldrb	r1, [r3]
 122:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 330              		.loc 1 122 34 discriminator 2 view .LVU73
 331 00ac 4D4B     		ldr	r3, .L38+4
 332 00ae 9954     		strb	r1, [r3, r2]
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 333              		.loc 1 121 13 is_stmt 1 discriminator 2 view .LVU74
 334              	.LVL22:
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 335              		.loc 1 121 13 is_stmt 0 discriminator 2 view .LVU75
 336 00b0 F5E7     		b	.L25
 337              	.LVL23:
 338              	.L35:
 121:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 339              		.loc 1 121 13 discriminator 2 view .LVU76
 340              	.LBE44:
 341              	.LBE43:
 342              	.LBE63:
  99:Src/user.cpp  ****     switch (i2cDataRx[0])
 343              		.loc 1 99 5 view .LVU77
 344 00b2 0022     		movs	r2, #0
 345              	.L18:
 346              	.LVL24:
 347              	.LBB64:
 348              	.LBB45:
 349              	.LBB46:
 128:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 350              		.loc 1 128 31 is_stmt 1 discriminator 3 view .LVU78
 351 00b4 032A     		cmp	r2, #3
 352 00b6 C6DC     		bgt	.L33
 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 353              		.loc 1 129 17 discriminator 2 view .LVU79
 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 354              		.loc 1 129 40 is_stmt 0 discriminator 2 view .LVU80
 355 00b8 4C4B     		ldr	r3, .L38+12
 356 00ba 3033     		adds	r3, r3, #48
 357 00bc 9B18     		adds	r3, r3, r2
 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 358              		.loc 1 129 29 discriminator 2 view .LVU81
 359 00be 0132     		adds	r2, r2, #1
 360              	.LVL25:
 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 361              		.loc 1 129 36 discriminator 2 view .LVU82
 362 00c0 1978     		ldrb	r1, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 13


 129:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 363              		.loc 1 129 34 discriminator 2 view .LVU83
 364 00c2 484B     		ldr	r3, .L38+4
 365 00c4 9954     		strb	r1, [r3, r2]
 128:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 366              		.loc 1 128 13 is_stmt 1 discriminator 2 view .LVU84
 367              	.LVL26:
 128:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 368              		.loc 1 128 13 is_stmt 0 discriminator 2 view .LVU85
 369 00c6 F5E7     		b	.L18
 370              	.LVL27:
 371              	.L36:
 128:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 372              		.loc 1 128 13 discriminator 2 view .LVU86
 373              	.LBE46:
 374              	.LBE45:
 375              	.LBE64:
  99:Src/user.cpp  ****     switch (i2cDataRx[0])
 376              		.loc 1 99 5 view .LVU87
 377 00c8 0022     		movs	r2, #0
 378              	.L17:
 379              	.LVL28:
 380              	.LBB65:
 381              	.LBB47:
 382              	.LBB48:
 135:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 383              		.loc 1 135 31 is_stmt 1 discriminator 3 view .LVU88
 384 00ca 032A     		cmp	r2, #3
 385 00cc BBDC     		bgt	.L33
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 386              		.loc 1 136 17 discriminator 2 view .LVU89
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 387              		.loc 1 136 40 is_stmt 0 discriminator 2 view .LVU90
 388 00ce 474B     		ldr	r3, .L38+12
 389 00d0 3433     		adds	r3, r3, #52
 390 00d2 9B18     		adds	r3, r3, r2
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 391              		.loc 1 136 29 discriminator 2 view .LVU91
 392 00d4 0132     		adds	r2, r2, #1
 393              	.LVL29:
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 394              		.loc 1 136 36 discriminator 2 view .LVU92
 395 00d6 1978     		ldrb	r1, [r3]
 136:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 396              		.loc 1 136 34 discriminator 2 view .LVU93
 397 00d8 424B     		ldr	r3, .L38+4
 398 00da 9954     		strb	r1, [r3, r2]
 135:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 399              		.loc 1 135 13 is_stmt 1 discriminator 2 view .LVU94
 400              	.LVL30:
 135:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 401              		.loc 1 135 13 is_stmt 0 discriminator 2 view .LVU95
 402 00dc F5E7     		b	.L17
 403              	.LVL31:
 404              	.L16:
 135:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 405              		.loc 1 135 13 discriminator 2 view .LVU96
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 14


 406              	.LBE48:
 407              	.LBE47:
 139:Src/user.cpp  ****         case 0x21: // Set id
 408              		.loc 1 139 9 is_stmt 1 view .LVU97
 140:Src/user.cpp  ****         {
 409              		.loc 1 140 9 view .LVU98
 410              	.LBB49:
 141:Src/user.cpp  ****             boardConfig.nodeId = i2cDataRx[1];
 411              		.loc 1 141 13 view .LVU99
 141:Src/user.cpp  ****             boardConfig.nodeId = i2cDataRx[1];
 412              		.loc 1 141 45 is_stmt 0 view .LVU100
 413 00de 404B     		ldr	r3, .L38
 414 00e0 5A78     		ldrb	r2, [r3, #1]
 141:Src/user.cpp  ****             boardConfig.nodeId = i2cDataRx[1];
 415              		.loc 1 141 32 view .LVU101
 416 00e2 444B     		ldr	r3, .L38+20
 417 00e4 5A70     		strb	r2, [r3, #1]
 142:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 418              		.loc 1 142 13 is_stmt 1 view .LVU102
 142:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 419              		.loc 1 142 38 is_stmt 0 view .LVU103
 420 00e6 0222     		movs	r2, #2
 421 00e8 1A70     		strb	r2, [r3]
 143:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 422              		.loc 1 143 13 is_stmt 1 view .LVU104
 423              	.LVL32:
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 424              		.loc 1 144 13 view .LVU105
 425              	.LBB50:
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 426              		.loc 1 144 22 is_stmt 0 view .LVU106
 427 00ea 0022     		movs	r2, #0
 428              	.LVL33:
 429              	.L26:
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 430              		.loc 1 144 31 is_stmt 1 discriminator 3 view .LVU107
 431 00ec 032A     		cmp	r2, #3
 432 00ee AADC     		bgt	.L33
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 433              		.loc 1 145 17 discriminator 2 view .LVU108
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 434              		.loc 1 145 40 is_stmt 0 discriminator 2 view .LVU109
 435 00f0 3E4B     		ldr	r3, .L38+12
 436 00f2 3033     		adds	r3, r3, #48
 437 00f4 9B18     		adds	r3, r3, r2
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 438              		.loc 1 145 29 discriminator 2 view .LVU110
 439 00f6 0132     		adds	r2, r2, #1
 440              	.LVL34:
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 441              		.loc 1 145 36 discriminator 2 view .LVU111
 442 00f8 1978     		ldrb	r1, [r3]
 145:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 443              		.loc 1 145 34 discriminator 2 view .LVU112
 444 00fa 3A4B     		ldr	r3, .L38+4
 445 00fc 9954     		strb	r1, [r3, r2]
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 15


 446              		.loc 1 144 13 is_stmt 1 discriminator 2 view .LVU113
 447              	.LVL35:
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 448              		.loc 1 144 13 is_stmt 0 discriminator 2 view .LVU114
 449 00fe F5E7     		b	.L26
 450              	.LVL36:
 451              	.L15:
 144:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 452              		.loc 1 144 13 discriminator 2 view .LVU115
 453              	.LBE50:
 454              	.LBE49:
 148:Src/user.cpp  ****         case 0x22: // Set kp
 455              		.loc 1 148 9 is_stmt 1 view .LVU116
 149:Src/user.cpp  ****         {
 456              		.loc 1 149 9 view .LVU117
 457              	.LBB51:
 150:Src/user.cpp  ****             motor.dce.kp = valF;
 458              		.loc 1 150 13 view .LVU118
 150:Src/user.cpp  ****             motor.dce.kp = valF;
 459              		.loc 1 150 26 is_stmt 0 view .LVU119
 460 0100 3A4B     		ldr	r3, .L38+12
 461 0102 5C60     		str	r4, [r3, #4]
 151:Src/user.cpp  ****             boardConfig.dceKp = valF;
 462              		.loc 1 151 13 is_stmt 1 view .LVU120
 151:Src/user.cpp  ****             boardConfig.dceKp = valF;
 463              		.loc 1 151 31 is_stmt 0 view .LVU121
 464 0104 3B4B     		ldr	r3, .L38+20
 465 0106 DC61     		str	r4, [r3, #28]
 152:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 466              		.loc 1 152 13 is_stmt 1 view .LVU122
 152:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 467              		.loc 1 152 38 is_stmt 0 view .LVU123
 468 0108 0222     		movs	r2, #2
 469 010a 1A70     		strb	r2, [r3]
 153:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 470              		.loc 1 153 13 is_stmt 1 view .LVU124
 471              	.LVL37:
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 472              		.loc 1 154 13 view .LVU125
 473              	.LBB52:
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 474              		.loc 1 154 22 is_stmt 0 view .LVU126
 475 010c 0022     		movs	r2, #0
 476              	.LVL38:
 477              	.L27:
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 478              		.loc 1 154 31 is_stmt 1 discriminator 3 view .LVU127
 479 010e 032A     		cmp	r2, #3
 480 0110 99DC     		bgt	.L33
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 481              		.loc 1 155 17 discriminator 2 view .LVU128
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 482              		.loc 1 155 40 is_stmt 0 discriminator 2 view .LVU129
 483 0112 364B     		ldr	r3, .L38+12
 484 0114 3033     		adds	r3, r3, #48
 485 0116 9B18     		adds	r3, r3, r2
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 16


 486              		.loc 1 155 29 discriminator 2 view .LVU130
 487 0118 0132     		adds	r2, r2, #1
 488              	.LVL39:
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 489              		.loc 1 155 36 discriminator 2 view .LVU131
 490 011a 1978     		ldrb	r1, [r3]
 155:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 491              		.loc 1 155 34 discriminator 2 view .LVU132
 492 011c 314B     		ldr	r3, .L38+4
 493 011e 9954     		strb	r1, [r3, r2]
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 494              		.loc 1 154 13 is_stmt 1 discriminator 2 view .LVU133
 495              	.LVL40:
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 496              		.loc 1 154 13 is_stmt 0 discriminator 2 view .LVU134
 497 0120 F5E7     		b	.L27
 498              	.LVL41:
 499              	.L14:
 154:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 500              		.loc 1 154 13 discriminator 2 view .LVU135
 501              	.LBE52:
 502              	.LBE51:
 158:Src/user.cpp  ****         case 0x23: // Set ki
 503              		.loc 1 158 9 is_stmt 1 view .LVU136
 159:Src/user.cpp  ****         {
 504              		.loc 1 159 9 view .LVU137
 505              	.LBB53:
 160:Src/user.cpp  ****             motor.dce.ki = valF;
 506              		.loc 1 160 13 view .LVU138
 160:Src/user.cpp  ****             motor.dce.ki = valF;
 507              		.loc 1 160 26 is_stmt 0 view .LVU139
 508 0122 324B     		ldr	r3, .L38+12
 509 0124 DC60     		str	r4, [r3, #12]
 161:Src/user.cpp  ****             boardConfig.dceKi = valF;
 510              		.loc 1 161 13 is_stmt 1 view .LVU140
 161:Src/user.cpp  ****             boardConfig.dceKi = valF;
 511              		.loc 1 161 31 is_stmt 0 view .LVU141
 512 0126 334B     		ldr	r3, .L38+20
 513 0128 5C62     		str	r4, [r3, #36]
 162:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 514              		.loc 1 162 13 is_stmt 1 view .LVU142
 162:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 515              		.loc 1 162 38 is_stmt 0 view .LVU143
 516 012a 0222     		movs	r2, #2
 517 012c 1A70     		strb	r2, [r3]
 163:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 518              		.loc 1 163 13 is_stmt 1 view .LVU144
 519              	.LVL42:
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 520              		.loc 1 164 13 view .LVU145
 521              	.LBB54:
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 522              		.loc 1 164 22 is_stmt 0 view .LVU146
 523 012e 0022     		movs	r2, #0
 524              	.LVL43:
 525              	.L28:
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 17


 526              		.loc 1 164 31 is_stmt 1 discriminator 3 view .LVU147
 527 0130 032A     		cmp	r2, #3
 528 0132 00DD     		ble	.LCB422
 529 0134 87E7     		b	.L33	@long jump
 530              	.LCB422:
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 531              		.loc 1 165 17 discriminator 2 view .LVU148
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 532              		.loc 1 165 40 is_stmt 0 discriminator 2 view .LVU149
 533 0136 2D4B     		ldr	r3, .L38+12
 534 0138 3033     		adds	r3, r3, #48
 535 013a 9B18     		adds	r3, r3, r2
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 536              		.loc 1 165 29 discriminator 2 view .LVU150
 537 013c 0132     		adds	r2, r2, #1
 538              	.LVL44:
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 539              		.loc 1 165 36 discriminator 2 view .LVU151
 540 013e 1978     		ldrb	r1, [r3]
 165:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 541              		.loc 1 165 34 discriminator 2 view .LVU152
 542 0140 284B     		ldr	r3, .L38+4
 543 0142 9954     		strb	r1, [r3, r2]
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 544              		.loc 1 164 13 is_stmt 1 discriminator 2 view .LVU153
 545              	.LVL45:
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 546              		.loc 1 164 13 is_stmt 0 discriminator 2 view .LVU154
 547 0144 F4E7     		b	.L28
 548              	.LVL46:
 549              	.L13:
 164:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 550              		.loc 1 164 13 discriminator 2 view .LVU155
 551              	.LBE54:
 552              	.LBE53:
 168:Src/user.cpp  ****         case 0x24: // Set kv
 553              		.loc 1 168 9 is_stmt 1 view .LVU156
 169:Src/user.cpp  ****         {
 554              		.loc 1 169 9 view .LVU157
 555              	.LBB55:
 170:Src/user.cpp  ****             motor.dce.kv = valF;
 556              		.loc 1 170 13 view .LVU158
 170:Src/user.cpp  ****             motor.dce.kv = valF;
 557              		.loc 1 170 26 is_stmt 0 view .LVU159
 558 0146 294B     		ldr	r3, .L38+12
 559 0148 9C60     		str	r4, [r3, #8]
 171:Src/user.cpp  ****             boardConfig.dceKv = valF;
 560              		.loc 1 171 13 is_stmt 1 view .LVU160
 171:Src/user.cpp  ****             boardConfig.dceKv = valF;
 561              		.loc 1 171 31 is_stmt 0 view .LVU161
 562 014a 2A4B     		ldr	r3, .L38+20
 563 014c 1C62     		str	r4, [r3, #32]
 172:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 564              		.loc 1 172 13 is_stmt 1 view .LVU162
 172:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 565              		.loc 1 172 38 is_stmt 0 view .LVU163
 566 014e 0222     		movs	r2, #2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 18


 567 0150 1A70     		strb	r2, [r3]
 173:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 568              		.loc 1 173 13 is_stmt 1 view .LVU164
 569              	.LVL47:
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 570              		.loc 1 174 13 view .LVU165
 571              	.LBB56:
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 572              		.loc 1 174 22 is_stmt 0 view .LVU166
 573 0152 0022     		movs	r2, #0
 574              	.LVL48:
 575              	.L29:
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 576              		.loc 1 174 31 is_stmt 1 discriminator 3 view .LVU167
 577 0154 032A     		cmp	r2, #3
 578 0156 00DD     		ble	.LCB466
 579 0158 75E7     		b	.L33	@long jump
 580              	.LCB466:
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 581              		.loc 1 175 17 discriminator 2 view .LVU168
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 582              		.loc 1 175 40 is_stmt 0 discriminator 2 view .LVU169
 583 015a 244B     		ldr	r3, .L38+12
 584 015c 3033     		adds	r3, r3, #48
 585 015e 9B18     		adds	r3, r3, r2
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 586              		.loc 1 175 29 discriminator 2 view .LVU170
 587 0160 0132     		adds	r2, r2, #1
 588              	.LVL49:
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 589              		.loc 1 175 36 discriminator 2 view .LVU171
 590 0162 1978     		ldrb	r1, [r3]
 175:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 591              		.loc 1 175 34 discriminator 2 view .LVU172
 592 0164 1F4B     		ldr	r3, .L38+4
 593 0166 9954     		strb	r1, [r3, r2]
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 594              		.loc 1 174 13 is_stmt 1 discriminator 2 view .LVU173
 595              	.LVL50:
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 596              		.loc 1 174 13 is_stmt 0 discriminator 2 view .LVU174
 597 0168 F4E7     		b	.L29
 598              	.LVL51:
 599              	.L12:
 174:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 600              		.loc 1 174 13 discriminator 2 view .LVU175
 601              	.LBE56:
 602              	.LBE55:
 178:Src/user.cpp  ****         case 0x25: // Set kd
 603              		.loc 1 178 9 is_stmt 1 view .LVU176
 179:Src/user.cpp  ****         {
 604              		.loc 1 179 9 view .LVU177
 605              	.LBB57:
 180:Src/user.cpp  ****             motor.dce.kd = valF;
 606              		.loc 1 180 13 view .LVU178
 180:Src/user.cpp  ****             motor.dce.kd = valF;
 607              		.loc 1 180 26 is_stmt 0 view .LVU179
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 19


 608 016a 204B     		ldr	r3, .L38+12
 609 016c 1C61     		str	r4, [r3, #16]
 181:Src/user.cpp  ****             boardConfig.dceKd = valF;
 610              		.loc 1 181 13 is_stmt 1 view .LVU180
 181:Src/user.cpp  ****             boardConfig.dceKd = valF;
 611              		.loc 1 181 31 is_stmt 0 view .LVU181
 612 016e 214B     		ldr	r3, .L38+20
 613 0170 9C62     		str	r4, [r3, #40]
 182:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 614              		.loc 1 182 13 is_stmt 1 view .LVU182
 182:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 615              		.loc 1 182 38 is_stmt 0 view .LVU183
 616 0172 0222     		movs	r2, #2
 617 0174 1A70     		strb	r2, [r3]
 183:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 618              		.loc 1 183 13 is_stmt 1 view .LVU184
 619              	.LVL52:
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 620              		.loc 1 184 13 view .LVU185
 621              	.LBB58:
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 622              		.loc 1 184 22 is_stmt 0 view .LVU186
 623 0176 0022     		movs	r2, #0
 624              	.LVL53:
 625              	.L30:
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 626              		.loc 1 184 31 is_stmt 1 discriminator 3 view .LVU187
 627 0178 032A     		cmp	r2, #3
 628 017a 00DD     		ble	.LCB510
 629 017c 63E7     		b	.L33	@long jump
 630              	.LCB510:
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 631              		.loc 1 185 17 discriminator 2 view .LVU188
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 632              		.loc 1 185 40 is_stmt 0 discriminator 2 view .LVU189
 633 017e 1B4B     		ldr	r3, .L38+12
 634 0180 3033     		adds	r3, r3, #48
 635 0182 9B18     		adds	r3, r3, r2
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 636              		.loc 1 185 29 discriminator 2 view .LVU190
 637 0184 0132     		adds	r2, r2, #1
 638              	.LVL54:
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 639              		.loc 1 185 36 discriminator 2 view .LVU191
 640 0186 1978     		ldrb	r1, [r3]
 185:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 641              		.loc 1 185 34 discriminator 2 view .LVU192
 642 0188 164B     		ldr	r3, .L38+4
 643 018a 9954     		strb	r1, [r3, r2]
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 644              		.loc 1 184 13 is_stmt 1 discriminator 2 view .LVU193
 645              	.LVL55:
 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 646              		.loc 1 184 13 is_stmt 0 discriminator 2 view .LVU194
 647 018c F4E7     		b	.L30
 648              	.LVL56:
 649              	.L11:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 20


 184:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 650              		.loc 1 184 13 discriminator 2 view .LVU195
 651              	.LBE58:
 652              	.LBE57:
 188:Src/user.cpp  ****         case 0x26: // Set torque limit
 653              		.loc 1 188 9 is_stmt 1 view .LVU196
 189:Src/user.cpp  ****         {
 654              		.loc 1 189 9 view .LVU197
 655              	.LBB59:
 190:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 656              		.loc 1 190 13 view .LVU198
 190:Src/user.cpp  ****             motor.SetTorqueLimit(valF);
 657              		.loc 1 190 33 is_stmt 0 view .LVU199
 658 018e 211C     		adds	r1, r4, #0
 659 0190 1648     		ldr	r0, .L38+12
 660 0192 FFF7FEFF 		bl	_ZN5Motor14SetTorqueLimitEf
 661              	.LVL57:
 191:Src/user.cpp  ****             boardConfig.toqueLimit = valF;
 662              		.loc 1 191 13 is_stmt 1 view .LVU200
 191:Src/user.cpp  ****             boardConfig.toqueLimit = valF;
 663              		.loc 1 191 36 is_stmt 0 view .LVU201
 664 0196 174B     		ldr	r3, .L38+20
 665 0198 9C60     		str	r4, [r3, #8]
 192:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 666              		.loc 1 192 13 is_stmt 1 view .LVU202
 192:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 667              		.loc 1 192 38 is_stmt 0 view .LVU203
 668 019a 0222     		movs	r2, #2
 669 019c 1A70     		strb	r2, [r3]
 193:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 670              		.loc 1 193 13 is_stmt 1 view .LVU204
 671              	.LVL58:
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 672              		.loc 1 194 13 view .LVU205
 673              	.LBB60:
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 674              		.loc 1 194 22 is_stmt 0 view .LVU206
 675 019e 0022     		movs	r2, #0
 676              	.LVL59:
 677              	.L31:
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 678              		.loc 1 194 31 is_stmt 1 discriminator 3 view .LVU207
 679 01a0 032A     		cmp	r2, #3
 680 01a2 00DD     		ble	.LCB555
 681 01a4 4FE7     		b	.L33	@long jump
 682              	.LCB555:
 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 683              		.loc 1 195 17 discriminator 2 view .LVU208
 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 684              		.loc 1 195 40 is_stmt 0 discriminator 2 view .LVU209
 685 01a6 114B     		ldr	r3, .L38+12
 686 01a8 3033     		adds	r3, r3, #48
 687 01aa 9B18     		adds	r3, r3, r2
 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 688              		.loc 1 195 29 discriminator 2 view .LVU210
 689 01ac 0132     		adds	r2, r2, #1
 690              	.LVL60:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 21


 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 691              		.loc 1 195 36 discriminator 2 view .LVU211
 692 01ae 1978     		ldrb	r1, [r3]
 195:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 693              		.loc 1 195 34 discriminator 2 view .LVU212
 694 01b0 0C4B     		ldr	r3, .L38+4
 695 01b2 9954     		strb	r1, [r3, r2]
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 696              		.loc 1 194 13 is_stmt 1 discriminator 2 view .LVU213
 697              	.LVL61:
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 698              		.loc 1 194 13 is_stmt 0 discriminator 2 view .LVU214
 699 01b4 F4E7     		b	.L31
 700              	.LVL62:
 701              	.L9:
 194:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 702              		.loc 1 194 13 discriminator 2 view .LVU215
 703              	.LBE60:
 704              	.LBE59:
 198:Src/user.cpp  ****         case 0x27: // Set init pos
 705              		.loc 1 198 9 is_stmt 1 view .LVU216
 199:Src/user.cpp  ****         {
 706              		.loc 1 199 9 view .LVU217
 707              	.LBB61:
 200:Src/user.cpp  ****             boardConfig.initPos = valF;
 708              		.loc 1 200 13 view .LVU218
 200:Src/user.cpp  ****             boardConfig.initPos = valF;
 709              		.loc 1 200 33 is_stmt 0 view .LVU219
 710 01b6 0F4B     		ldr	r3, .L38+20
 711 01b8 5C60     		str	r4, [r3, #4]
 201:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 712              		.loc 1 201 13 is_stmt 1 view .LVU220
 201:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_COMMIT;
 713              		.loc 1 201 38 is_stmt 0 view .LVU221
 714 01ba 0222     		movs	r2, #2
 715 01bc 1A70     		strb	r2, [r3]
 202:Src/user.cpp  ****             auto* b = (unsigned char*) &(motor.angle);
 716              		.loc 1 202 13 is_stmt 1 view .LVU222
 717              	.LVL63:
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 718              		.loc 1 203 13 view .LVU223
 719              	.LBB62:
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 720              		.loc 1 203 22 is_stmt 0 view .LVU224
 721 01be 0022     		movs	r2, #0
 722              	.LVL64:
 723              	.L32:
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 724              		.loc 1 203 31 is_stmt 1 discriminator 3 view .LVU225
 725 01c0 032A     		cmp	r2, #3
 726 01c2 00DD     		ble	.LCB596
 727 01c4 3FE7     		b	.L33	@long jump
 728              	.LCB596:
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 729              		.loc 1 204 17 discriminator 2 view .LVU226
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 730              		.loc 1 204 40 is_stmt 0 discriminator 2 view .LVU227
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 22


 731 01c6 094B     		ldr	r3, .L38+12
 732 01c8 3033     		adds	r3, r3, #48
 733 01ca 9B18     		adds	r3, r3, r2
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 734              		.loc 1 204 29 discriminator 2 view .LVU228
 735 01cc 0132     		adds	r2, r2, #1
 736              	.LVL65:
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 737              		.loc 1 204 36 discriminator 2 view .LVU229
 738 01ce 1978     		ldrb	r1, [r3]
 204:Src/user.cpp  ****                 i2cDataTx[i + 1] = *(b + i);
 739              		.loc 1 204 34 discriminator 2 view .LVU230
 740 01d0 044B     		ldr	r3, .L38+4
 741 01d2 9954     		strb	r1, [r3, r2]
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 742              		.loc 1 203 13 is_stmt 1 discriminator 2 view .LVU231
 743              	.LVL66:
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 744              		.loc 1 203 13 is_stmt 0 discriminator 2 view .LVU232
 745 01d4 F4E7     		b	.L32
 746              	.LVL67:
 747              	.L37:
 203:Src/user.cpp  ****             for (int i = 0; i < 4; i++)
 748              		.loc 1 203 13 discriminator 2 view .LVU233
 749              	.LBE62:
 750              	.LBE61:
 751              	.LBE65:
 752              	.LBE66:
 219:Src/user.cpp  ****         Set_ID(boardConfig.nodeId);
 753              		.loc 1 219 9 is_stmt 1 view .LVU234
 219:Src/user.cpp  ****         Set_ID(boardConfig.nodeId);
 754              		.loc 1 219 15 is_stmt 0 view .LVU235
 755 01d6 074B     		ldr	r3, .L38+20
 756 01d8 5878     		ldrb	r0, [r3, #1]
 757              	.LVL68:
 219:Src/user.cpp  ****         Set_ID(boardConfig.nodeId);
 758              		.loc 1 219 15 view .LVU236
 759 01da FFF7FEFF 		bl	Set_ID
 760              	.LVL69:
 222:Src/user.cpp  **** }
 761              		.loc 1 222 1 view .LVU237
 762 01de 3EE7     		b	.L6
 763              	.L39:
 764              		.align	2
 765              	.L38:
 766 01e0 00000000 		.word	i2cDataRx
 767 01e4 00000000 		.word	i2cDataTx
 768 01e8 00000000 		.word	.L10
 769 01ec 00000000 		.word	.LANCHOR0
 770 01f0 88130000 		.word	5000
 771 01f4 00000000 		.word	.LANCHOR1
 772              		.cfi_endproc
 773              	.LFE1058:
 774              		.fnend
 776              		.global	__aeabi_fsub
 777              		.global	__aeabi_ui2f
 778              		.global	__aeabi_fmul
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 23


 779              		.global	__aeabi_fdiv
 780              		.global	__aeabi_fadd
 781              		.global	__aeabi_f2iz
 782              		.section	.text.TIM14_PeriodElapsedCallback,"ax",%progbits
 783              		.align	1
 784              		.global	TIM14_PeriodElapsedCallback
 785              		.syntax unified
 786              		.code	16
 787              		.thumb_func
 789              	TIM14_PeriodElapsedCallback:
 790              		.fnstart
 791              	.LFB1059:
 227:Src/user.cpp  **** {
 792              		.loc 1 227 1 is_stmt 1 view -0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 797              		.save {r4, r5, r6, r7, lr}
 798              	.LCFI1:
 799              		.cfi_def_cfa_offset 20
 800              		.cfi_offset 4, -20
 801              		.cfi_offset 5, -16
 802              		.cfi_offset 6, -12
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 C646     		mov	lr, r8
 806 0004 00B5     		push	{lr}
 807              		.save {r8}
 808              	.LCFI2:
 809              		.cfi_def_cfa_offset 24
 810              		.cfi_offset 8, -24
 230:Src/user.cpp  ****     LL_ADC_REG_StartConversion(ADC1);
 811              		.loc 1 230 5 view .LVU239
 812              	.LVL70:
 813              	.LBB67:
 814              	.LBI67:
 815              		.file 3 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @file    stm32f0xx_ll_adc.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 24


  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #ifndef __STM32F0xx_LL_ADC_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __STM32F0xx_LL_ADC_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined (ADC1)
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - regular trigger source                                                   */
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - regular trigger edge                                                     */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR1_EXTEN_0) /* Trigger edge set to rising edge 
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTSEL) << (4U 
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN) << (4U *
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6U) /* Value equivalent to POSITION_VAL(ADC_CFGR1_EXTS
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10U) /* Value equivalent to POSITION_VAL(ADC_CFGR1_EXTE
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 25


  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - channel identifier defined by number                                     */
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR1_AWDCH)
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_CHSELR_CHSEL)
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26U)/* Value equivalent to POSITION_VAL(ADC_CHANNEL_ID
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (0x0000001FU) /* Equivalent to shift: (ADC_CHANNEL_NUMBE
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000U) /* Marker of internal channel */
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* channels literals definition.                                              */
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000U)
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR1_AWDCH
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR1_AWDCH
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR1_AWDCH
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR1_AWDCH
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR1_AWDCH_3                  
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR1_AWDCH_3                  
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR1_AWDCH_3                  
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR1_AWDCH_3                  
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR1_AWDCH_3 | ADC_CFGR1_AWDCH
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR1_AWDCH_3 | ADC_CFGR1_AWDCH
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR1_AWDCH_3 | ADC_CFGR1_AWDCH
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR1_AWDCH_3 | ADC_CFGR1_AWDCH
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR1_AWDCH_4                                      
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR1_AWDCH_4                                      
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR1_AWDCH_4                                      
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* channels literals definition.                                              */
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_CHSELR_CHSEL0)
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_CHSELR_CHSEL1)
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_CHSELR_CHSEL2)
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_CHSELR_CHSEL3)
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_CHSELR_CHSEL4)
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_CHSELR_CHSEL5)
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_CHSELR_CHSEL6)
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_CHSELR_CHSEL7)
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_CHSELR_CHSEL8)
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_CHSELR_CHSEL9)
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_CHSELR_CHSEL10)
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_CHSELR_CHSEL11)
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_CHSELR_CHSEL12)
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_CHSELR_CHSEL13)
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_CHSELR_CHSEL14)
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_CHSELR_CHSEL15)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 26


 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_CHSELR_CHSEL16)
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_CHSELR_CHSEL17)
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_CHSELR_CHSEL18)
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*   selection of ADC group (ADC group regular).                              */
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000U)
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET)
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL)
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK)
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET)
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* ADC registers bits positions */
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CFGR1_RES_BITOFFSET_POS        ( 3U) /* Value equivalent to POSITION_VAL(ADC_CFGR1_RES)
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CFGR1_AWDSGL_BITOFFSET_POS     (22U) /* Value equivalent to POSITION_VAL(ADC_CFGR1_AWDS
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_TR_HT_BITOFFSET_POS            (16U) /* Value equivalent to POSITION_VAL(ADC_TR_HT) */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL0_BITOFFSET_POS    ( 0U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL1_BITOFFSET_POS    ( 1U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL2_BITOFFSET_POS    ( 2U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL3_BITOFFSET_POS    ( 3U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL4_BITOFFSET_POS    ( 4U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL5_BITOFFSET_POS    ( 5U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL6_BITOFFSET_POS    ( 6U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL7_BITOFFSET_POS    ( 7U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL8_BITOFFSET_POS    ( 8U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL9_BITOFFSET_POS    ( 9U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL10_BITOFFSET_POS   (10U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL11_BITOFFSET_POS   (11U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL12_BITOFFSET_POS   (12U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL13_BITOFFSET_POS   (13U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL14_BITOFFSET_POS   (14U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL15_BITOFFSET_POS   (15U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL16_BITOFFSET_POS   (16U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL17_BITOFFSET_POS   (17U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL18_BITOFFSET_POS   (18U) /* Value equivalent to POSITION_VAL(ADC_CHSELR_CHS
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* ADC registers bits groups */
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_A
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* ADC internal channels related definitions */
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFFF7BAU)) /* Internal voltage referenc
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define VREFINT_CAL_VREF                   ( 3300U)                    /* Analog voltage reference 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 27


 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Temperature sensor */
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFFF7B8U)) /* Internal temperature sens
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFFF7C2U)) /* Internal temperature sens
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (( int32_t)   30)           /* Internal temperature sens
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (( int32_t)  110)           /* Internal temperature sens
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          ( 3300U)                    /* Analog voltage reference 
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is conditioned to ADC state:
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC instance must be disabled.
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         refer to description of each function for setting
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         conditioned to ADC state.
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** typedef struct
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t Clock;                       /*!< Set ADC instance clock source and prescaler.
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_CLOCK_
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              @note On this STM32 serie, this parameter has some clo
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                    ADC clock synchronous (from PCLK) with prescaler
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                    (APB prescaler configured inside the RCC must be
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              For more details, refer to description of this functio
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 28


 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (functions with prefix "REG").
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is conditioned to ADC state:
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC instance must be disabled.
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         refer to description of each function for setting
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         conditioned to ADC state.
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** typedef struct
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                    (several ADC channels enabled in group regular s
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 29


 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              data preserved or overwritten.
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD        /*!< ADC flag ADC analog watchdog 1 *
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWDIE      /*!< ADC interruption ADC analog watc
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* DMA transfer.                                                              */
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000U) /* ADC group regular conversion data reg
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 30


 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000U)/*!< ADC measurement pathes all disabled */
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CLOCK_SOURCE  ADC instance - Clock source
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CFGR2_CKMODE_1)                                  /*
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CFGR2_CKMODE_0)                                  /*
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC                 (0x00000000U)                               /*!< ADC asy
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000U)             /*!< ADC resolution 12 bits */
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                  ADC_CFGR1_RES_0) /*!< ADC resolution 
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR1_RES_1                  ) /*!< ADC resolution 
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR1_RES_1 | ADC_CFGR1_RES_0) /*!< ADC resolution 
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000U)/*!< ADC conversion data alignment: right a
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR1_ALIGN)      /*!< ADC conversion data alignmen
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000U)             /*!< No ADC low power mode act
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR1_WAIT)                    /*!< ADC low power m
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_LP_AUTOPOWEROFF             (ADC_CFGR1_AUTOFF)                  /*!< ADC low power m
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF    (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF) /*!< ADC low power m
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 31


 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001U) /*!< ADC group regular (available on all S
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_BITFIELD ) /*!< A
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_BITFIELD ) /*!< A
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_BITFIELD ) /*!< A
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_BITFIELD ) /*!< A
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_BITFIELD ) /*!< A
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_BITFIELD ) /*!< A
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_BITFIELD ) /*!< A
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_BITFIELD ) /*!< A
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_BITFIELD ) /*!< A
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_BITFIELD ) /*!< A
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_BITFIELD) /*!< A
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_BITFIELD) /*!< A
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_BITFIELD) /*!< A
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_BITFIELD) /*!< A
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_BITFIELD) /*!< A
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_BITFIELD) /*!< A
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_BITFIELD) /*!< A
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_BITFIELD) /*!< A
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_BITFIELD) /*!< A
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000U)                                           
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH4       (ADC_CFGR1_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)    
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (ADC_CFGR1_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)    
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (ADC_CFGR1_EXTSEL_1 | ADC_CFGR1_EXTSEL_0 | ADC_REG_TRIG_
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO     (ADC_CFGR1_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)    
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                    ADC_CFGR1_EXTEN_0) /*!< ADC group r
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 32


 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR1_EXTEN_1                    ) /*!< ADC group r
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR1_EXTEN_1 | ADC_CFGR1_EXTEN_0) /*!< ADC group r
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** * @{
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** */
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000U) /*!< ADC conversions are performed in sing
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR1_CONT)        /*!< ADC conversions are perform
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000U)              /*!< ADC conversions are not 
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR1_DMAEN) /*!< ADC conversion
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN) /*!< ADC conversion
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** * @{
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** */
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000U)/*!< ADC group regular behavior in case of 
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR1_OVRMOD)     /*!< ADC group regular behavior i
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_DIRECTION  ADC group regular - Sequencer scan direction
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_FORWARD    (0x00000000U)/*!< ADC group regular sequencer scan direc
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD   (ADC_CFGR1_SCANDIR)    /*!< ADC group regular sequencer 
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000U)                                           
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (ADC_CFGR1_DISCEN)                                      
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000U)                               /*!< Samplin
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_7CYCLES_5      (ADC_SMPR_SMP_0)                                      /*
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 33


 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_13CYCLES_5     (ADC_SMPR_SMP_1)                                      /*
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_28CYCLES_5     (ADC_SMPR_SMP_1 | ADC_SMPR_SMP_0)                     /*
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_41CYCLES_5     (ADC_SMPR_SMP_2)                                      /*
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_55CYCLES_5     (ADC_SMPR_SMP_2 | ADC_SMPR_SMP_0)                     /*
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_71CYCLES_5     (ADC_SMPR_SMP_2 | ADC_SMPR_SMP_1)                     /*
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_239CYCLES_5    (ADC_SMPR_SMP_2 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_0)    /*
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000U)                                           
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (                                                    ADC
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)         | ADC
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)         | ADC
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)         | ADC
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)         | ADC
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)         | ADC
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)         | ADC
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)         | ADC
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)         | ADC
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)         | ADC
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)         | ADC
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)         | ADC
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)         | ADC
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)         | ADC
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)         | ADC
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)         | ADC
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)         | ADC
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)         | ADC
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)         | ADC
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK) | ADC
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)         | ADC
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT       & ADC_CHANNEL_ID_MASK) | ADC
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR_HT            )     /*!< ADC analog watchdog thr
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (            ADC_TR_LT)     /*!< ADC analog watchdog thr
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR_HT | ADC_TR_LT)     /*!< ADC analog watchdog bot
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 34


 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Only ADC IP HW delays are defined in ADC LL driver driver,
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         not timeout values.
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         above each literal definition.
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Note: Only ADC IP HW delays are defined in ADC LL driver driver,           */
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       not timeout values.                                                  */
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       STM32 serie:                                                         */
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 83/fADC.                    */
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*         cycles                                                             */
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*         configuration.                                                     */
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* parameter "tSTART").                                                       */
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Unit: us                                                                   */
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (  10U)  /*!< Delay for internal voltage reference stabi
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* parameter "tSTART").                                                       */
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Unit: us                                                                   */
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    (  10U)  /*!< Delay for temperature sensor stabilization
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES ( 2U)  /*!< Delay required between ADC end of calibrat
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 35


 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Write a value in ADC register
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __REG__ Register to be written
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Read a value in ADC register
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __REG__ Register to be read
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Register value
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Example:
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           will return decimal number "4".
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         number is returned, either defined with number
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 36


 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                                
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0U)                                          
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ? (                                                                                            
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS         
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       )                                                                                            
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       :                                                                                            
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       (                                                                                            
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        (((__CHANNEL__) & ADC_CHSELR_CHSEL0) == ADC_CHSELR_CHSEL0) ? (0U) :                         
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****         (                                                                                          
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHSELR_CHSEL1) == ADC_CHSELR_CHSEL1) ? (1U) :                       
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****           (                                                                                        
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            (((__CHANNEL__) & ADC_CHSELR_CHSEL2) == ADC_CHSELR_CHSEL2) ? (2U) :                     
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****             (                                                                                      
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              (((__CHANNEL__) & ADC_CHSELR_CHSEL3) == ADC_CHSELR_CHSEL3) ? (3U) :                   
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****               (                                                                                    
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                (((__CHANNEL__) & ADC_CHSELR_CHSEL4) == ADC_CHSELR_CHSEL4) ? (4U) :                 
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                 (                                                                                  
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                  (((__CHANNEL__) & ADC_CHSELR_CHSEL5) == ADC_CHSELR_CHSEL5) ? (5U) :               
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                   (                                                                                
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                    (((__CHANNEL__) & ADC_CHSELR_CHSEL6) == ADC_CHSELR_CHSEL6) ? (6U) :             
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                     (                                                                              
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                      (((__CHANNEL__) & ADC_CHSELR_CHSEL7) == ADC_CHSELR_CHSEL7) ? (7U) :           
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                       (                                                                            
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                        (((__CHANNEL__) & ADC_CHSELR_CHSEL8) == ADC_CHSELR_CHSEL8) ? (8U) :         
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                         (                                                                          
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                          (((__CHANNEL__) & ADC_CHSELR_CHSEL9) == ADC_CHSELR_CHSEL9) ? (9U) :       
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                           (                                                                        
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                            (((__CHANNEL__) & ADC_CHSELR_CHSEL10) == ADC_CHSELR_CHSEL10) ? (10U) :  
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                             (                                                                      
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                              (((__CHANNEL__) & ADC_CHSELR_CHSEL11) == ADC_CHSELR_CHSEL11) ? (11U) :
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                               (                                                                    
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                (((__CHANNEL__) & ADC_CHSELR_CHSEL12) == ADC_CHSELR_CHSEL12) ? (12U)
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                 (                                                                  
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                  (((__CHANNEL__) & ADC_CHSELR_CHSEL13) == ADC_CHSELR_CHSEL13) ? (13
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                   (                                                                
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                    (((__CHANNEL__) & ADC_CHSELR_CHSEL14) == ADC_CHSELR_CHSEL14) ? (
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                     (                                                              
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                      (((__CHANNEL__) & ADC_CHSELR_CHSEL15) == ADC_CHSELR_CHSEL15) ?
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                       (                                                            
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                        (((__CHANNEL__) & ADC_CHSELR_CHSEL16) == ADC_CHSELR_CHSEL16)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 37


 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                         (                                                          
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                          (((__CHANNEL__) & ADC_CHSELR_CHSEL17) == ADC_CHSELR_CHSEL1
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                           (                                                        
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                            (((__CHANNEL__) & ADC_CHSELR_CHSEL18) == ADC_CHSELR_CHSE
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                             (0U)                                                   
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                           )                                                        
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                         )                                                          
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                       )                                                            
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                     )                                                              
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                   )                                                                
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                 )                                                                  
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                               )                                                                    
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                             )                                                                      
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                           )                                                                        
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                         )                                                                          
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                       )                                                                            
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                     )                                                                              
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                   )                                                                                
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                 )                                                                                  
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****               )                                                                                    
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****             )                                                                                      
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****           )                                                                                        
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****         )                                                                                          
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       )                                                                                            
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from number in decimal format.
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Example:
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT       (2)
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR    (2)
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)(2)
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 38


 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (                                                                            \
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) |                 \
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    (ADC_CHSELR_CHSEL0 << (__DECIMAL_NB__))                                     \
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC internal channel:
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         returned from ADC registers,
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         because internal and external channels share the same channel
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         parameters definitions of driver.
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 39


 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0U)
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         a value defined from parameter definition of
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from ADC registers.
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 40


 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or a value from functions where a channel number is
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         returned from ADC registers,
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         because internal and external channels share the same channel
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         parameters definitions of driver.
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (                                                                            \
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                            \
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR) ||                            \
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)                                     \
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #else
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (                                                                            \
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                            \
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)                               \
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from sequencer channel and groups definition.
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example:
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 41


 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT       (2)
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR    (2)
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)(2)
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (1)
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (1)
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 42


1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         different of 12 bits.
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *            (< ADCx param >,
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *            );
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is 
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         different of 12 bits.
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *            );
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 43


1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__) \
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((__AWD_THRESHOLD_TYPE__) == LL_ADC_AWD_THRESHOLD_LOW)                                 \
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ? (                                                                                   \
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        (__AWD_THRESHOLDS__) & LL_ADC_AWD_THRESHOLD_LOW                                    \
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       )                                                                                   \
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       :                                                                                   \
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       (                                                                                   \
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        ((__AWD_THRESHOLDS__) >> ADC_TR_HT_BITOFFSET_POS) & LL_ADC_AWD_THRESHOLD_LOW       \
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       )                                                                                   \
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval ADC common register instance
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (ADC1_COMMON)
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC common instance are disabled.
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         are disabled.
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is enabled.
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   LL_ADC_IsEnabled(ADC1)
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (refer to reference manual).
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 44


1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (0xFFFU >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U)))
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         a resolution to another resolution.
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted 
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of to the data to be converted
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__, __ADC_RESOLUTION_CURRENT__, __ADC_RESOLUTION_TAR
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((__DATA__)                                                                 \
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U)))   \
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U))      \
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                       (unit: digital value).
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                       __ADC_DATA__,\
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         reference VrefInt.
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         stored in system memory for each device during production.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 45


1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         connected to pin Vref+.
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         internal voltage reference VrefInt.
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_12B)                  \
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         stored in system memory for each device during production.
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Calculation formula:
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  parameters are correct (address and data).
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  less accurate than calibrated values),
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 46


1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         temperature sensor.
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                 sensor voltage has been measured.
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (refer to device datasheet).
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Calculation formula:
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                   (unit: digital value)
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  of the current device has characteristics in line with
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  datasheet typical values.
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12bits
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 47


1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                       On STM32F0, refer to device datasheet parameter "Avg_Slop
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                       On STM32F0, refer to device datasheet parameter "V30" (co
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   ((( (                                                                        \
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                  * 1000)                                                       \
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        -                                                                       \
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                  * 1000)                                                       \
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****       )                                                                        \
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****     ) / (__TEMPSENSOR_TYP_AVGSLOPE__)                                          \
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****    ) + (__TEMPSENSOR_CALX_TEMP__)                                              \
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   )
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 48


1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   These ADC registers are data registers:
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example:
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_DMA_GetRegAddr
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval ADC register address
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Prevent unused argument compilation warning */
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   (void)Register;
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Retrieve address of register DR */
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)&(ADCx->DR);
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be selected.
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         temperature sensor stabilization time.
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet.
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         For ADC conversion of internal channels,
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         a sampling time minimum value is required.
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 49


1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT (1)
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #else
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be selected.
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT (1)
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #else
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 50


1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC instance clock source and prescaler.
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled.
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_SetClock
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ClockSource This parameter can be one of the following values:
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On this STM32 serie, synchronous clock has no prescaler.
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC instance clock source and prescaler.
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_GetClock
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On this STM32 serie, synchronous clock has no prescaler.
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetClock(ADC_TypeDef *ADCx)
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC resolution.
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_SetResolution
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 51


1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC resolution.
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_GetResolution
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_RES));
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_SetDataAlignment
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_GetDataAlignment
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 52


1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_ALIGN));
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC low power mode.
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Description of ADC low power modes:
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           in order to reduce power consumption.
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           has been retrieved by user software.
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           other conversion.
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           applications.
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           How to use this low power mode:
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             IRQ vector sequencer.
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC conversion start.
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_MODE_AUTOOFF is available):
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         of delay during which ADC was idle.
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC channel.
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_SetLowPowerMode\n
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_SetLowPowerMode
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF), LowPowerMode);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 53


1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC low power mode:
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Description of ADC low power modes:
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           in order to reduce power consumption.
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           has been retrieved by user software.
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           other conversion.
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           applications.
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           How to use this low power mode:
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             IRQ vector sequencer.
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC conversion start.
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_MODE_AUTOOFF is available):
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         of delay during which ADC was idle.
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC channel.
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_GetLowPowerMode\n
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_GetLowPowerMode
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF)));
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set sampling time common to a group of channels.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, sampling time scope is on ADC instance:
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Sampling time common to all channels.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 54


1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         converted:
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         setting).
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TS_temp, ...).
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is required.
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet.
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll SMPR     SMP            LL_ADC_SetSamplingTimeCommonChannels
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_13CYCLES_5
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_28CYCLES_5
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_41CYCLES_5
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get sampling time common to a group of channels.
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, sampling time scope is on ADC instance:
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Sampling time common to all channels.
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         this STM32 serie.
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll SMPR     SMP            LL_ADC_GetSamplingTimeCommonChannels
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_13CYCLES_5
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_28CYCLES_5
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_41CYCLES_5
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 55


1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx)
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SMPR, ADC_SMPR_SMP));
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         external interrupt line).
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         also set trigger polarity to rising edge 
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         depends on timers availability on the selected device.
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_SetTriggerSource\n
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_SetTriggerSource
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO  (1)
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO (1)
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         external interrupt line).
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 56


1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         internal (SW start) or external, without detail
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (equivalent to 
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         depends on timers availability on the selected device.
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_GetTriggerSource\n
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_GetTriggerSource
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO  (1)
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO (1)
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t TriggerSource = READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTSEL | ADC_CFGR1_EXTEN);
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* corresponding to ADC_CFGR1_EXTEN {0; 1; 2; 3}.                           */
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR1_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR1_EXTEN and ADC_CFGR1_EXTSEL       */
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return ((TriggerSource
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR1_EXTSEL)
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR1_EXTEN)
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****          );
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****             or external.
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN));
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 57


1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_SetTriggerEdge
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_GetTriggerEdge
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN));
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer scan direction.
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On some other STM32 families, this setting is not available and
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         the default scan direction is forward.
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_SetSequencerScanDirection
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ScanDirection This parameter can be one of the following values:
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer scan direction.
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On some other STM32 families, this setting is not available and
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         the default scan direction is forward.
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_GetSequencerScanDirection
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 58


1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerScanDirection(ADC_TypeDef *ADCx)
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_SCANDIR));
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         number of ranks.
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular 
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_SetSequencerDiscont\n
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DISCEN, SeqDiscont);
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         number of ranks.
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_GetSequencerDiscont\n
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DISCEN));
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on rank corresponding to
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channel number.
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This function performs:
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Set channels selected by overwriting the current sequencer
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           configuration.
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         not fully configurable: sequencer length and each rank
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 59


2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         affectation to a channel are fixed by channel HW number.
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         enabled separately.
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be selected.
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChannels\n
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChannels\n
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChannels\n
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChannels\n
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChannels\n
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChannels\n
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChannels\n
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChannels\n
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChannels\n
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChannels\n
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChannels\n
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChannels\n
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChannels\n
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChannels\n
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChannels\n
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChannels\n
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChannels\n
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChannels\n
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChannels
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 60


2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Add channel to ADC group regular sequence: channel on rank corresponding to
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channel number.
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This function performs:
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Set channels selected by adding them to the current sequencer
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           configuration.
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         not fully configurable: sequencer length and each rank
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         affectation to a channel are fixed by channel HW number.
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         enabled separately.
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be selected.
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChAdd\n
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChAdd\n
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChAdd\n
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChAdd\n
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChAdd\n
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChAdd\n
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChAdd\n
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChAdd\n
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChAdd\n
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChAdd\n
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChAdd\n
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChAdd\n
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChAdd\n
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChAdd\n
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChAdd\n
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChAdd\n
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChAdd\n
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChAdd\n
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChAdd
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 61


2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Remove channel to ADC group regular sequence: channel on rank corresponding to
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channel number.
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This function performs:
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Set channels selected by removing them to the current sequencer
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           configuration.
2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         not fully configurable: sequencer length and each rank
2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         affectation to a channel are fixed by channel HW number.
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         enabled separately.
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be selected.
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChRem\n
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChRem\n
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 62


2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChRem\n
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChRem\n
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChRem\n
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChRem\n
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChRem\n
2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChRem\n
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChRem\n
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChRem\n
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChRem\n
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChRem\n
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChRem\n
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChRem\n
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChRem\n
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChRem\n
2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChRem\n
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChRem\n
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChRem
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
2236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on rank corresponding to
2240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         channel number.
2241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   This function performs:
2242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Channels order reading into each rank of scan sequence:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 63


2243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
2246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         not fully configurable: sequencer length and each rank
2247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         affectation to a channel are fixed by channel HW number.
2248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
2251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         enabled separately.
2253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   One or several values can be retrieved.
2259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_GetSequencerChannels\n
2261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_GetSequencerChannels\n
2262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_GetSequencerChannels\n
2263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_GetSequencerChannels\n
2264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_GetSequencerChannels\n
2265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_GetSequencerChannels\n
2266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_GetSequencerChannels\n
2267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_GetSequencerChannels\n
2268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_GetSequencerChannels\n
2269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_GetSequencerChannels\n
2270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_GetSequencerChannels\n
2271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_GetSequencerChannels\n
2272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_GetSequencerChannels\n
2273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_GetSequencerChannels\n
2274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_GetSequencerChannels\n
2275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_GetSequencerChannels\n
2276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_GetSequencerChannels\n
2277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_GetSequencerChannels\n
2278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_GetSequencerChannels
2279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18         (1)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 64


2300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (1)
2303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
2304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
2305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerChannels(ADC_TypeDef *ADCx)
2307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t ChannelsBitfield = READ_BIT(ADCx->CHSELR, ADC_CHSELR_CHSEL);
2309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
2310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (   (((ChannelsBitfield & ADC_CHSELR_CHSEL0) >> ADC_CHSELR_CHSEL0_BITOFFSET_POS) * LL_ADC_
2311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL1) >> ADC_CHSELR_CHSEL1_BITOFFSET_POS) * LL_ADC_
2312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL2) >> ADC_CHSELR_CHSEL2_BITOFFSET_POS) * LL_ADC_
2313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL3) >> ADC_CHSELR_CHSEL3_BITOFFSET_POS) * LL_ADC_
2314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL4) >> ADC_CHSELR_CHSEL4_BITOFFSET_POS) * LL_ADC_
2315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL5) >> ADC_CHSELR_CHSEL5_BITOFFSET_POS) * LL_ADC_
2316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL6) >> ADC_CHSELR_CHSEL6_BITOFFSET_POS) * LL_ADC_
2317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL7) >> ADC_CHSELR_CHSEL7_BITOFFSET_POS) * LL_ADC_
2318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL8) >> ADC_CHSELR_CHSEL8_BITOFFSET_POS) * LL_ADC_
2319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL9) >> ADC_CHSELR_CHSEL9_BITOFFSET_POS) * LL_ADC_
2320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL10) >> ADC_CHSELR_CHSEL10_BITOFFSET_POS) * LL_AD
2321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL11) >> ADC_CHSELR_CHSEL11_BITOFFSET_POS) * LL_AD
2322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL12) >> ADC_CHSELR_CHSEL12_BITOFFSET_POS) * LL_AD
2323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL13) >> ADC_CHSELR_CHSEL13_BITOFFSET_POS) * LL_AD
2324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL14) >> ADC_CHSELR_CHSEL14_BITOFFSET_POS) * LL_AD
2325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL15) >> ADC_CHSELR_CHSEL15_BITOFFSET_POS) * LL_AD
2326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL16) >> ADC_CHSELR_CHSEL16_BITOFFSET_POS) * LL_AD
2327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL17) >> ADC_CHSELR_CHSEL17_BITOFFSET_POS) * LL_AD
2328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
2329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****            | (((ChannelsBitfield & ADC_CHSELR_CHSEL18) >> ADC_CHSELR_CHSEL18_BITOFFSET_POS) * LL_AD
2330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** #endif
2331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****          );
2332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
2335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
2336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - single mode: one conversion per trigger
2337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
2338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           conversions launched successively automatically.
2339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular 
2340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
2341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_SetContinuousMode
2346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
2348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
2349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
2350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
2353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
2355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 65


2357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
2359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
2360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - single mode: one conversion per trigger
2361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
2362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           conversions launched successively automatically.
2363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_GetContinuousMode
2364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
2367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
2368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
2370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CONT));
2372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
2376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
2377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
2378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         mode:
2379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
2380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           when number of DMA data transfers (number of
2381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions) is reached.
2382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
2383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
2384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
2385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions).
2386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
2387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
2388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         mode non-circular:
2389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
2390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
2391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
2392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
2393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
2394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_SetDMATransfer\n
2399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_SetDMATransfer
2400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
2402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
2403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
2404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
2405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
2408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
2410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 66


2414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
2415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
2416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         mode:
2417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
2418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           when number of DMA data transfers (number of
2419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions) is reached.
2420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
2421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
2422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
2423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           ADC conversions).
2424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
2425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
2426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         mode non-circular:
2427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
2428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
2429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
2430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
2431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
2432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_GetDMATransfer\n
2433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_GetDMATransfer
2434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
2437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
2438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
2439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
2441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
2443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
2447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         data preserved or overwritten.
2448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
2449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         other devices without this feature have a behavior
2450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         equivalent to data overwritten.
2451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
2452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
2453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         overrun should be set to data overwritten.
2454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_SetOverrun
2459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
2461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
2462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
2463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
2466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_OVRMOD, Overrun);
2468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 67


2471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
2472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         data preserved or overwritten.
2473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_GetOverrun
2474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
2477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
2478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
2480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_OVRMOD));
2482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
2486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
2490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
2491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
2495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         a single channel or all channels,
2496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on ADC group regular.
2497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
2498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is enabled.
2499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
2500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
2501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
2502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, there is only 1 kind of analog watchdog
2503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         instance:
2504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
2505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
2506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
2507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
2508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC resolution configured).
2509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    AWDCH          LL_ADC_SetAnalogWDMonitChannels\n
2514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AWDSGL         LL_ADC_SetAnalogWDMonitChannels\n
2515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AWDEN          LL_ADC_SetAnalogWDMonitChannels
2516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
2518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
2519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
2520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
2521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
2522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
2523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
2524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
2525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
2526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
2527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 68


2528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
2529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
2530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
2531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
2532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
2533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
2534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
2535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
2536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
2537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
2538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (1)
2539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
2540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
2541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (1)
2542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         
2543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6,
2544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
2547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1,
2549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              (ADC_CFGR1_AWDCH | ADC_CFGR1_AWDSGL | ADC_CFGR1_AWDEN),
2550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              (AWDChannelGroup & ADC_AWD_CR_ALL_CHANNEL_MASK));
2551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
2555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   Usage of the returned channel number:
2556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
2557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
2558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
2559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
2560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
2562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           as parameter for another function.
2563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - To get the channel number in decimal format:
2564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           process the returned value with the helper macro
2565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
2567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           one channel.
2568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, there is only 1 kind of analog watchdog
2569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         instance:
2570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
2571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
2572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
2573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
2574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC resolution configured).
2575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CFGR1    AWDCH          LL_ADC_GetAnalogWDMonitChannels\n
2580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AWDSGL         LL_ADC_GetAnalogWDMonitChannels\n
2581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         CFGR1    AWDEN          LL_ADC_GetAnalogWDMonitChannels
2582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 69


2585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
2586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
2587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
2588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
2589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
2590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
2591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
2592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
2593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
2594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
2595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
2596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
2597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
2598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
2599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
2600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
2601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
2602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
2603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
2604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG
2605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx)
2607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t AWDChannelGroup = READ_BIT(ADCx->CFGR1, (ADC_CFGR1_AWDCH | ADC_CFGR1_AWDSGL | ADC_CFGR1_
2609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
2610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Note: Set variable according to channel definition including channel ID  */
2611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       with bitfield.                                                     */
2612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t AWDChannelSingle = ((AWDChannelGroup & ADC_CFGR1_AWDSGL) >> ADC_CFGR1_AWDSGL_BITOFFSET_P
2613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   uint32_t AWDChannelBitField = (ADC_CHANNEL_0_BITFIELD << ((AWDChannelGroup & ADC_CHANNEL_ID_NUMBE
2614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   
2615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (AWDChannelGroup | (AWDChannelBitField * AWDChannelSingle));
2616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
2620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         high and low.
2621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
2622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
2623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
2624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
2625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
2626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, there is only 1 kind of analog watchdog
2627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         instance:
2628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
2629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
2630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
2631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
2632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC resolution configured).
2633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll TR       HT             LL_ADC_ConfigAnalogWDThresholds\n
2638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR       LT             LL_ADC_ConfigAnalogWDThresholds
2639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
2641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 70


2642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdHighVa
2645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->TR,
2647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_TR_HT | ADC_TR_LT,
2648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR_HT_BITOFFSET_POS) | AWDThresholdLowValue);
2649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
2653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         high or low.
2654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
2655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
2656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
2657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
2658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
2659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, there is only 1 kind of analog watchdog
2660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         instance:
2661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
2662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
2663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
2664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
2665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *             ADC resolution configured).
2666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll TR       HT             LL_ADC_SetAnalogWDThresholds\n
2671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR       LT             LL_ADC_SetAnalogWDThresholds
2672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
2674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
2675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
2676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
2677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow,
2680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Parameter "AWDThresholdsHighLow" is used with mask "0x00000010"          */
2682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* to be equivalent to "POSITION_VAL(AWDThresholdsHighLow)": if threshold   */
2683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* high is selected, then data is shifted to LSB. Else(threshold low),      */
2684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* data is not shifted.                                                     */
2685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->TR,
2686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              AWDThresholdsHighLow,
2687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow >> ADC_TR_HT_BITOFFSET_POS) & 0x00000010U)
2688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
2692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
2693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         concatenated.
2694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
2695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
2696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         using helper macro:
2697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
2698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 71


2699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
2700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
2701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
2702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
2703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
2704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
2705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
2706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
2707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
2709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
2710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
2711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
2712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** */
2714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHigh
2715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Parameter "AWDThresholdsHighLow" is used with mask "0x00000010"          */
2717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* to be equivalent to "POSITION_VAL(AWDThresholdsHighLow)": if threshold   */
2718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* high is selected, then data is shifted to LSB. Else(threshold low or     */
2719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* both thresholds), data is not shifted.                                   */
2720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->TR,
2721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR_LT))
2722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                     >> ((~AWDThresholdsHighLow) & 0x00000010U)
2723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****                    );
2724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
2728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
2731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
2732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
2736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for 
2737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
2738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC conversion start.
2739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
2740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
2741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
2742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
2743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
2746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
2747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
2751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
2753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
2754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
2755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 72


2756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
2757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_ADEN);
2758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
2762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
2765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         on group regular.
2766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
2767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
2771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
2773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
2774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
2775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
2776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
2777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_ADDIS);
2778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
2782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
2783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
2784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
2785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
2786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
2788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
2790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
2792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
2796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
2797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
2799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
2801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
2803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
2807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
2809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
2810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
2811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   In case of usage of ADC with DMA transfer:
2812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         On this STM32 serie, ADC DMA transfer request should be disabled
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 73


2813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         during calibration:
2814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Calibration factor is available in data register
2815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         and also transfered by DMA.
2816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         To not insert ADC calibration factor among ADC conversion data
2817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         in array variable, DMA transfer must be disabled during
2818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         calibration.
2819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         (DMA transfer setting backup and disable before calibration,
2820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         DMA transfer setting restore after calibration.
2821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         Refer to functions @ref LL_ADC_REG_GetDMATransfer(),
2822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetDMATransfer() ).
2823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
2825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be ADC disabled.
2826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
2827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
2831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
2833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
2834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
2835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
2836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
2837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****              ADC_CR_ADCAL);
2838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Get ADC calibration state.
2842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
2843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
2845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
2847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
2849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** }
2850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @}
2853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
2856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @{
2857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** 
2859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** /**
2860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
2861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both 
2862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
2863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
2864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           starts immediately.
2865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
2866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
2867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *           following the ADC start conversion command.
2868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC state:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 74


2870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
2871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
2872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   *         without ADC disable command on going.
2873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
2874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @param  ADCx ADC instance
2875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   * @retval None
2876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   */
2877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
 816              		.loc 3 2877 22 view .LVU240
 817              	.LBB68:
2878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h **** {
2879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
2880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
2881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
2882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 818              		.loc 3 2882 3 view .LVU241
 819 0006 1F4A     		ldr	r2, .L41
 820 0008 9368     		ldr	r3, [r2, #8]
 821 000a 1F49     		ldr	r1, .L41+4
 822 000c 0B40     		ands	r3, r1
 823 000e 0421     		movs	r1, #4
 824 0010 0B43     		orrs	r3, r1
 825 0012 9360     		str	r3, [r2, #8]
 826              	.LVL71:
 827              		.loc 3 2882 3 is_stmt 0 view .LVU242
 828              	.LBE68:
 829              	.LBE67:
 232:Src/user.cpp  ****     motor.angle = motor.mechanicalAngleMin +
 830              		.loc 1 232 5 is_stmt 1 view .LVU243
 232:Src/user.cpp  ****     motor.angle = motor.mechanicalAngleMin +
 831              		.loc 1 232 25 is_stmt 0 view .LVU244
 832 0014 1D4C     		ldr	r4, .L41+8
 833 0016 A76B     		ldr	r7, [r4, #56]
 233:Src/user.cpp  ****                     (motor.mechanicalAngleMax - motor.mechanicalAngleMin) *
 834              		.loc 1 233 47 view .LVU245
 835 0018 391C     		adds	r1, r7, #0
 836 001a E06B     		ldr	r0, [r4, #60]
 837 001c FFF7FEFF 		bl	__aeabi_fsub
 838              	.LVL72:
 839 0020 061C     		adds	r6, r0, #0
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 840              		.loc 1 234 39 view .LVU246
 841 0022 1B4B     		ldr	r3, .L41+12
 842 0024 1888     		ldrh	r0, [r3]
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 843              		.loc 1 234 22 view .LVU247
 844 0026 FFF7FEFF 		bl	__aeabi_ui2f
 845              	.LVL73:
 846 002a 8046     		mov	r8, r0
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 847              		.loc 1 234 57 view .LVU248
 848 002c A08D     		ldrh	r0, [r4, #44]
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 849              		.loc 1 234 43 view .LVU249
 850 002e FFF7FEFF 		bl	__aeabi_ui2f
 851              	.LVL74:
 852 0032 051C     		adds	r5, r0, #0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 75


 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 853              		.loc 1 234 41 view .LVU250
 854 0034 011C     		adds	r1, r0, #0
 855 0036 4046     		mov	r0, r8
 856 0038 FFF7FEFF 		bl	__aeabi_fsub
 857              	.LVL75:
 858 003c 011C     		adds	r1, r0, #0
 233:Src/user.cpp  ****                     (motor.mechanicalAngleMax - motor.mechanicalAngleMin) *
 859              		.loc 1 233 75 view .LVU251
 860 003e 301C     		adds	r0, r6, #0
 861 0040 FFF7FEFF 		bl	__aeabi_fmul
 862              	.LVL76:
 863 0044 061C     		adds	r6, r0, #0
 235:Src/user.cpp  ****                     ((float) motor.adcValAtAngleMax - (float) motor.adcValAtAngleMin);
 864              		.loc 1 235 36 view .LVU252
 865 0046 E08D     		ldrh	r0, [r4, #46]
 235:Src/user.cpp  ****                     ((float) motor.adcValAtAngleMax - (float) motor.adcValAtAngleMin);
 866              		.loc 1 235 22 view .LVU253
 867 0048 FFF7FEFF 		bl	__aeabi_ui2f
 868              	.LVL77:
 235:Src/user.cpp  ****                     ((float) motor.adcValAtAngleMax - (float) motor.adcValAtAngleMin);
 869              		.loc 1 235 53 view .LVU254
 870 004c 291C     		adds	r1, r5, #0
 871 004e FFF7FEFF 		bl	__aeabi_fsub
 872              	.LVL78:
 873 0052 011C     		adds	r1, r0, #0
 234:Src/user.cpp  ****                     ((float) adcData[0] - (float) motor.adcValAtAngleMin) /
 874              		.loc 1 234 75 view .LVU255
 875 0054 301C     		adds	r0, r6, #0
 876 0056 FFF7FEFF 		bl	__aeabi_fdiv
 877              	.LVL79:
 878 005a 011C     		adds	r1, r0, #0
 232:Src/user.cpp  ****     motor.angle = motor.mechanicalAngleMin +
 879              		.loc 1 232 44 view .LVU256
 880 005c 381C     		adds	r0, r7, #0
 881 005e FFF7FEFF 		bl	__aeabi_fadd
 882              	.LVL80:
 883 0062 011C     		adds	r1, r0, #0
 232:Src/user.cpp  ****     motor.angle = motor.mechanicalAngleMin +
 884              		.loc 1 232 17 view .LVU257
 885 0064 2063     		str	r0, [r4, #48]
 237:Src/user.cpp  ****     motor.CalcDceOutput(motor.angle, 0);
 886              		.loc 1 237 5 is_stmt 1 view .LVU258
 237:Src/user.cpp  ****     motor.CalcDceOutput(motor.angle, 0);
 887              		.loc 1 237 24 is_stmt 0 view .LVU259
 888 0066 0022     		movs	r2, #0
 889 0068 2000     		movs	r0, r4
 890 006a FFF7FEFF 		bl	_ZN5Motor13CalcDceOutputEff
 891              	.LVL81:
 238:Src/user.cpp  ****     motor.SetPwm((int16_t) motor.dce.output);
 892              		.loc 1 238 5 is_stmt 1 view .LVU260
 238:Src/user.cpp  ****     motor.SetPwm((int16_t) motor.dce.output);
 893              		.loc 1 238 17 is_stmt 0 view .LVU261
 894 006e A06A     		ldr	r0, [r4, #40]
 895 0070 FFF7FEFF 		bl	__aeabi_f2iz
 896              	.LVL82:
 897 0074 01B2     		sxth	r1, r0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 76


 898 0076 2000     		movs	r0, r4
 899 0078 FFF7FEFF 		bl	_ZN5Motor6SetPwmEs
 900              	.LVL83:
 901              		.loc 1 239 1 view .LVU262
 902              		@ sp needed
 903 007c 80BC     		pop	{r7}
 904 007e B846     		mov	r8, r7
 905 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 906              	.L42:
 907 0082 C046     		.align	2
 908              	.L41:
 909 0084 00240140 		.word	1073816576
 910 0088 E8FFFF7F 		.word	2147483624
 911 008c 00000000 		.word	.LANCHOR0
 912 0090 00000000 		.word	adcData
 913              		.cfi_endproc
 914              	.LFE1059:
 915              		.fnend
 917              		.section	.text._ZN6EEPROM3putI8Config_tEERKT_iS4_,"axG",%progbits,_ZN6EEPROM3putI8Config_tEERKT_iS
 918              		.align	1
 919              		.weak	_ZN6EEPROM3putI8Config_tEERKT_iS4_
 920              		.syntax unified
 921              		.code	16
 922              		.thumb_func
 924              	_ZN6EEPROM3putI8Config_tEERKT_iS4_:
 925              		.fnstart
 926              	.LVL84:
 927              	.LFB1061:
 928              		.file 4 "Inc/random_flash_interface.h"
   1:Inc/random_flash_interface.h **** #ifndef FlashStorage_STM32_h
   2:Inc/random_flash_interface.h **** #define FlashStorage_STM32_h
   3:Inc/random_flash_interface.h **** 
   4:Inc/random_flash_interface.h **** 
   5:Inc/random_flash_interface.h **** #if !(defined(STM32F0) || defined(STM32F1) || defined(STM32F2) || defined(STM32F3) || defined(STM32
   6:Inc/random_flash_interface.h ****        defined(STM32L0) || defined(STM32L1) || defined(STM32L4) || defined(STM32H7) || defined(STM3
   7:Inc/random_flash_interface.h ****        defined(STM32WB) || defined(STM32MP1) || defined(STM32L5))
   8:Inc/random_flash_interface.h **** #error This code is intended to run on STM32F/L/H/G/WB/MP1 platform! Please check your Tools->Board
   9:Inc/random_flash_interface.h **** #endif
  10:Inc/random_flash_interface.h **** 
  11:Inc/random_flash_interface.h **** // Only use this with emulated EEPROM, without integrated EEPROM
  12:Inc/random_flash_interface.h **** #if !defined(DATA_EEPROM_BASE)
  13:Inc/random_flash_interface.h **** 
  14:Inc/random_flash_interface.h **** #include <cstdint>
  15:Inc/random_flash_interface.h **** #include "random_flash_utils.h"
  16:Inc/random_flash_interface.h **** 
  17:Inc/random_flash_interface.h **** class EEPROM
  18:Inc/random_flash_interface.h **** {
  19:Inc/random_flash_interface.h **** public:
  20:Inc/random_flash_interface.h **** 
  21:Inc/random_flash_interface.h ****     EEPROM() : _initialized(false), _dirtyBuffer(false), _commitASAP(true), _validEEPROM(true)
  22:Inc/random_flash_interface.h ****     {}
  23:Inc/random_flash_interface.h **** 
  24:Inc/random_flash_interface.h ****     /**
  25:Inc/random_flash_interface.h ****      * Read an eeprom cell
  26:Inc/random_flash_interface.h ****      * @param index
  27:Inc/random_flash_interface.h ****      * @return value
  28:Inc/random_flash_interface.h ****      */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 77


  29:Inc/random_flash_interface.h ****     uint8_t read(int address)
  30:Inc/random_flash_interface.h ****     {
  31:Inc/random_flash_interface.h ****         if (!_initialized)
  32:Inc/random_flash_interface.h ****             init();
  33:Inc/random_flash_interface.h **** 
  34:Inc/random_flash_interface.h ****         return eeprom_buffered_read_byte(address);
  35:Inc/random_flash_interface.h ****     }
  36:Inc/random_flash_interface.h **** 
  37:Inc/random_flash_interface.h ****     /**
  38:Inc/random_flash_interface.h ****      * Update an eeprom cell
  39:Inc/random_flash_interface.h ****      * @param index
  40:Inc/random_flash_interface.h ****      * @param value
  41:Inc/random_flash_interface.h ****      */
  42:Inc/random_flash_interface.h ****     void update(int address, uint8_t value)
  43:Inc/random_flash_interface.h ****     {
  44:Inc/random_flash_interface.h ****         if (!_initialized)
  45:Inc/random_flash_interface.h ****             init();
  46:Inc/random_flash_interface.h **** 
  47:Inc/random_flash_interface.h ****         if (eeprom_buffered_read_byte(address) != value)
  48:Inc/random_flash_interface.h ****         {
  49:Inc/random_flash_interface.h ****             _dirtyBuffer = true;
  50:Inc/random_flash_interface.h ****             eeprom_buffered_write_byte(address, value);
  51:Inc/random_flash_interface.h ****         }
  52:Inc/random_flash_interface.h ****     }
  53:Inc/random_flash_interface.h **** 
  54:Inc/random_flash_interface.h ****     /**
  55:Inc/random_flash_interface.h ****      * Write value to an eeprom cell
  56:Inc/random_flash_interface.h ****      * @param index
  57:Inc/random_flash_interface.h ****      * @param value
  58:Inc/random_flash_interface.h ****      */
  59:Inc/random_flash_interface.h ****     void write(int address, uint8_t value)
  60:Inc/random_flash_interface.h ****     {
  61:Inc/random_flash_interface.h ****         update(address, value);
  62:Inc/random_flash_interface.h ****     }
  63:Inc/random_flash_interface.h **** 
  64:Inc/random_flash_interface.h ****     /**
  65:Inc/random_flash_interface.h ****      * Update eeprom cells from an object
  66:Inc/random_flash_interface.h ****      * @param index
  67:Inc/random_flash_interface.h ****      * @param value
  68:Inc/random_flash_interface.h ****      */
  69:Inc/random_flash_interface.h ****     //Functionality to 'get' and 'put' objects to and from EEPROM.
  70:Inc/random_flash_interface.h ****     template<typename T>
  71:Inc/random_flash_interface.h ****     T &get(int _offset, T &_t)
  72:Inc/random_flash_interface.h ****     {
  73:Inc/random_flash_interface.h ****         // Copy the data from the flash to the buffer if not yet
  74:Inc/random_flash_interface.h ****         if (!_initialized)
  75:Inc/random_flash_interface.h ****             init();
  76:Inc/random_flash_interface.h **** 
  77:Inc/random_flash_interface.h ****         uint16_t offset = _offset;
  78:Inc/random_flash_interface.h ****         uint8_t* _pointer = (uint8_t*) &_t;
  79:Inc/random_flash_interface.h **** 
  80:Inc/random_flash_interface.h ****         for (uint16_t count = sizeof(T); count; --count, ++offset)
  81:Inc/random_flash_interface.h ****         {
  82:Inc/random_flash_interface.h ****             *_pointer++ = eeprom_buffered_read_byte(offset);
  83:Inc/random_flash_interface.h ****         }
  84:Inc/random_flash_interface.h **** 
  85:Inc/random_flash_interface.h ****         return _t;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 78


  86:Inc/random_flash_interface.h ****     }
  87:Inc/random_flash_interface.h **** 
  88:Inc/random_flash_interface.h ****     template<typename T>
  89:Inc/random_flash_interface.h ****     const T &put(int idx, const T &t)
 929              		.loc 4 89 14 is_stmt 1 view -0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 8
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933              		.loc 4 89 14 is_stmt 0 view .LVU264
 934 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 935              		.save {r4, r5, r6, r7, lr}
 936              	.LCFI3:
 937              		.cfi_def_cfa_offset 20
 938              		.cfi_offset 4, -20
 939              		.cfi_offset 5, -16
 940              		.cfi_offset 6, -12
 941              		.cfi_offset 7, -8
 942              		.cfi_offset 14, -4
 943              		.pad #12
 944 0002 83B0     		sub	sp, sp, #12
 945              	.LCFI4:
 946              		.cfi_def_cfa_offset 32
 947 0004 0700     		movs	r7, r0
 948 0006 0C00     		movs	r4, r1
 949 0008 0192     		str	r2, [sp, #4]
  90:Inc/random_flash_interface.h ****     {
  91:Inc/random_flash_interface.h ****         // Copy the data from the flash to the buffer if not yet
  92:Inc/random_flash_interface.h ****         if (!_initialized)
 950              		.loc 4 92 14 view .LVU265
 951 000a 0378     		ldrb	r3, [r0]
 952              		.loc 4 92 9 view .LVU266
 953 000c 002B     		cmp	r3, #0
 954 000e 03D0     		beq	.L49
 955              	.LVL85:
 956              	.L44:
  93:Inc/random_flash_interface.h ****             init();
  94:Inc/random_flash_interface.h **** 
  95:Inc/random_flash_interface.h ****         uint16_t offset = idx;
 957              		.loc 4 95 18 view .LVU267
 958 0010 A4B2     		uxth	r4, r4
 959              	.LVL86:
  96:Inc/random_flash_interface.h **** 
  97:Inc/random_flash_interface.h ****         const uint8_t* _pointer = (const uint8_t*) &t;
 960              		.loc 4 97 24 view .LVU268
 961 0012 019B     		ldr	r3, [sp, #4]
 962              	.LBB72:
  98:Inc/random_flash_interface.h **** 
  99:Inc/random_flash_interface.h ****         for (uint16_t count = sizeof(T); count; --count, ++offset)
 963              		.loc 4 99 23 view .LVU269
 964 0014 3026     		movs	r6, #48
 965 0016 0EE0     		b	.L46
 966              	.LVL87:
 967              	.L49:
 968              		.loc 4 99 23 view .LVU270
 969              	.LBE72:
 970              	.LBB73:
 971              	.LBI73:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 79


 100:Inc/random_flash_interface.h ****         {
 101:Inc/random_flash_interface.h ****             eeprom_buffered_write_byte(offset, *_pointer++);
 102:Inc/random_flash_interface.h ****         }
 103:Inc/random_flash_interface.h **** 
 104:Inc/random_flash_interface.h ****         if (_commitASAP)
 105:Inc/random_flash_interface.h ****         {
 106:Inc/random_flash_interface.h ****             // Save the data from the buffer to the flash right away
 107:Inc/random_flash_interface.h ****             eeprom_buffer_flush();
 108:Inc/random_flash_interface.h **** 
 109:Inc/random_flash_interface.h ****             _dirtyBuffer = false;
 110:Inc/random_flash_interface.h ****             _validEEPROM = true;
 111:Inc/random_flash_interface.h ****         } else
 112:Inc/random_flash_interface.h ****         {
 113:Inc/random_flash_interface.h ****             // Delay saving the data from the buffer to the flash. Just flag and wait for commit() 
 114:Inc/random_flash_interface.h ****             _dirtyBuffer = true;
 115:Inc/random_flash_interface.h ****         }
 116:Inc/random_flash_interface.h **** 
 117:Inc/random_flash_interface.h ****         return t;
 118:Inc/random_flash_interface.h ****     }
 119:Inc/random_flash_interface.h **** 
 120:Inc/random_flash_interface.h ****     /**
 121:Inc/random_flash_interface.h ****      * Check whether the eeprom data is valid
 122:Inc/random_flash_interface.h ****      * @return true, if eeprom data is valid (has been written at least once), false if not
 123:Inc/random_flash_interface.h ****      */
 124:Inc/random_flash_interface.h ****     bool isValid()
 125:Inc/random_flash_interface.h ****     {
 126:Inc/random_flash_interface.h ****         return _validEEPROM;
 127:Inc/random_flash_interface.h ****     }
 128:Inc/random_flash_interface.h **** 
 129:Inc/random_flash_interface.h ****     /**
 130:Inc/random_flash_interface.h ****      * Write previously made eeprom changes to the underlying flash storage
 131:Inc/random_flash_interface.h ****      * Use this with care: Each and every commit will harm the flash and reduce it's lifetime (like
 132:Inc/random_flash_interface.h ****      */
 133:Inc/random_flash_interface.h ****     void commit()
 134:Inc/random_flash_interface.h ****     {
 135:Inc/random_flash_interface.h ****         if (!_initialized)
 136:Inc/random_flash_interface.h ****             init();
 137:Inc/random_flash_interface.h **** 
 138:Inc/random_flash_interface.h ****         if (_dirtyBuffer)
 139:Inc/random_flash_interface.h ****         {
 140:Inc/random_flash_interface.h ****             // Save the data from the buffer to the flash
 141:Inc/random_flash_interface.h ****             eeprom_buffer_flush();
 142:Inc/random_flash_interface.h **** 
 143:Inc/random_flash_interface.h ****             _dirtyBuffer = false;
 144:Inc/random_flash_interface.h ****             _validEEPROM = true;
 145:Inc/random_flash_interface.h ****         }
 146:Inc/random_flash_interface.h ****     }
 147:Inc/random_flash_interface.h **** 
 148:Inc/random_flash_interface.h ****     uint16_t length()
 149:Inc/random_flash_interface.h ****     { return E2END + 1; }
 150:Inc/random_flash_interface.h **** 
 151:Inc/random_flash_interface.h ****     void setCommitASAP(bool value = true)
 152:Inc/random_flash_interface.h ****     { _commitASAP = value; }
 153:Inc/random_flash_interface.h ****     bool getCommitASAP()
 154:Inc/random_flash_interface.h ****     { return _commitASAP; }
 155:Inc/random_flash_interface.h **** 
 156:Inc/random_flash_interface.h **** private:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 80


 157:Inc/random_flash_interface.h **** 
 158:Inc/random_flash_interface.h ****     void init()
 972              		.loc 4 158 10 is_stmt 1 view .LVU271
 973              	.LBB74:
 159:Inc/random_flash_interface.h ****     {
 160:Inc/random_flash_interface.h ****         // Copy the data from the flash to the buffer
 161:Inc/random_flash_interface.h ****         eeprom_buffer_fill();
 974              		.loc 4 161 9 view .LVU272
 975              		.loc 4 161 27 is_stmt 0 view .LVU273
 976 0018 FFF7FEFF 		bl	eeprom_buffer_fill
 977              	.LVL88:
 162:Inc/random_flash_interface.h ****         _initialized = true;
 978              		.loc 4 162 9 is_stmt 1 view .LVU274
 979              		.loc 4 162 22 is_stmt 0 view .LVU275
 980 001c 0123     		movs	r3, #1
 981 001e 3B70     		strb	r3, [r7]
 163:Inc/random_flash_interface.h ****     }
 982              		.loc 4 163 5 view .LVU276
 983 0020 F6E7     		b	.L44
 984              	.LVL89:
 985              	.L50:
 986              		.loc 4 163 5 view .LVU277
 987              	.LBE74:
 988              	.LBE73:
 989              	.LBB75:
 101:Inc/random_flash_interface.h ****         }
 990              		.loc 4 101 39 discriminator 2 view .LVU278
 991 0022 5D1C     		adds	r5, r3, #1
 992              	.LVL90:
 101:Inc/random_flash_interface.h ****         }
 993              		.loc 4 101 39 discriminator 2 view .LVU279
 994 0024 1978     		ldrb	r1, [r3]
 995 0026 2000     		movs	r0, r4
 996 0028 FFF7FEFF 		bl	eeprom_buffered_write_byte
 997              	.LVL91:
  99:Inc/random_flash_interface.h ****         {
 998              		.loc 4 99 9 is_stmt 1 discriminator 2 view .LVU280
 999 002c 013E     		subs	r6, r6, #1
 1000              	.LVL92:
  99:Inc/random_flash_interface.h ****         {
 1001              		.loc 4 99 9 is_stmt 0 discriminator 2 view .LVU281
 1002 002e B6B2     		uxth	r6, r6
 1003              	.LVL93:
  99:Inc/random_flash_interface.h ****         {
 1004              		.loc 4 99 9 discriminator 2 view .LVU282
 1005 0030 0134     		adds	r4, r4, #1
 1006              	.LVL94:
  99:Inc/random_flash_interface.h ****         {
 1007              		.loc 4 99 9 discriminator 2 view .LVU283
 1008 0032 A4B2     		uxth	r4, r4
 1009              	.LVL95:
 101:Inc/random_flash_interface.h ****         }
 1010              		.loc 4 101 39 discriminator 2 view .LVU284
 1011 0034 2B00     		movs	r3, r5
 1012              	.LVL96:
 1013              	.L46:
  99:Inc/random_flash_interface.h ****         {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 81


 1014              		.loc 4 99 42 is_stmt 1 discriminator 3 view .LVU285
 1015 0036 002E     		cmp	r6, #0
 1016 0038 F3D1     		bne	.L50
  99:Inc/random_flash_interface.h ****         {
 1017              		.loc 4 99 42 is_stmt 0 discriminator 3 view .LVU286
 1018              	.LBE75:
 104:Inc/random_flash_interface.h ****         {
 1019              		.loc 4 104 13 view .LVU287
 1020 003a BB78     		ldrb	r3, [r7, #2]
 1021              	.LVL97:
 104:Inc/random_flash_interface.h ****         {
 1022              		.loc 4 104 9 view .LVU288
 1023 003c 002B     		cmp	r3, #0
 1024 003e 04D1     		bne	.L51
 114:Inc/random_flash_interface.h ****         }
 1025              		.loc 4 114 26 view .LVU289
 1026 0040 0123     		movs	r3, #1
 1027 0042 7B70     		strb	r3, [r7, #1]
 1028              	.L48:
 118:Inc/random_flash_interface.h **** 
 1029              		.loc 4 118 5 view .LVU290
 1030 0044 0198     		ldr	r0, [sp, #4]
 1031 0046 03B0     		add	sp, sp, #12
 1032              		@ sp needed
 1033              	.LVL98:
 1034              	.LVL99:
 1035              	.LVL100:
 118:Inc/random_flash_interface.h **** 
 1036              		.loc 4 118 5 view .LVU291
 1037 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 1038              	.LVL101:
 1039              	.L51:
 107:Inc/random_flash_interface.h **** 
 1040              		.loc 4 107 32 view .LVU292
 1041 004a FFF7FEFF 		bl	eeprom_buffer_flush
 1042              	.LVL102:
 109:Inc/random_flash_interface.h ****             _validEEPROM = true;
 1043              		.loc 4 109 26 view .LVU293
 1044 004e 0023     		movs	r3, #0
 1045 0050 7B70     		strb	r3, [r7, #1]
 110:Inc/random_flash_interface.h ****         } else
 1046              		.loc 4 110 26 view .LVU294
 1047 0052 0133     		adds	r3, r3, #1
 1048 0054 FB70     		strb	r3, [r7, #3]
 1049 0056 F5E7     		b	.L48
 1050              		.cfi_endproc
 1051              	.LFE1061:
 1052              		.fnend
 1054              		.section	.rodata.Main.str1.4,"aMS",%progbits,1
 1055              		.align	2
 1056              	.LC12:
 1057 0000 636F6E66 		.ascii	"config not\015\000"
 1057      6967206E 
 1057      6F740D00 
 1058              		.align	2
 1059              	.LC15:
 1060 000c 636F6E66 		.ascii	"configed\015\000"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 82


 1060      69676564 
 1060      0D00
 1061              		.section	.text.Main,"ax",%progbits
 1062              		.align	1
 1063              		.global	Main
 1064              		.syntax unified
 1065              		.code	16
 1066              		.thumb_func
 1068              	Main:
 1069              		.fnstart
 1070              	.LFB1057:
  11:Src/user.cpp  **** {
 1071              		.loc 1 11 1 is_stmt 1 view -0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 8
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 1075 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1076              		.save {r4, r5, r6, r7, lr}
 1077              	.LCFI5:
 1078              		.cfi_def_cfa_offset 20
 1079              		.cfi_offset 4, -20
 1080              		.cfi_offset 5, -16
 1081              		.cfi_offset 6, -12
 1082              		.cfi_offset 7, -8
 1083              		.cfi_offset 14, -4
 1084              		.pad #12
 1085 0002 83B0     		sub	sp, sp, #12
 1086              	.LCFI6:
 1087              		.cfi_def_cfa_offset 32
  13:Src/user.cpp  ****     EEPROM eeprom;
 1088              		.loc 1 13 5 view .LVU296
 1089              	.LVL103:
 1090              	.LBB109:
 1091              	.LBI109:
  21:Inc/random_flash_interface.h ****     {}
 1092              		.loc 4 21 5 view .LVU297
 1093              	.LBB110:
 1094              	.LBB111:
  21:Inc/random_flash_interface.h ****     {}
 1095              		.loc 4 21 94 is_stmt 0 view .LVU298
 1096 0004 01AB     		add	r3, sp, #4
 1097              	.LVL104:
  21:Inc/random_flash_interface.h ****     {}
 1098              		.loc 4 21 94 view .LVU299
 1099 0006 0022     		movs	r2, #0
 1100 0008 1A70     		strb	r2, [r3]
 1101 000a 5A70     		strb	r2, [r3, #1]
 1102 000c 0132     		adds	r2, r2, #1
 1103 000e 9A70     		strb	r2, [r3, #2]
 1104 0010 DA70     		strb	r2, [r3, #3]
 1105              	.LVL105:
  21:Inc/random_flash_interface.h ****     {}
 1106              		.loc 4 21 94 view .LVU300
 1107              	.LBE111:
 1108              	.LBE110:
 1109              	.LBE109:
  14:Src/user.cpp  ****     eeprom.get(0, boardConfig);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 83


 1110              		.loc 1 14 5 is_stmt 1 view .LVU301
 1111              	.LBB112:
 1112              	.LBI112:
  71:Inc/random_flash_interface.h ****     {
 1113              		.loc 4 71 8 view .LVU302
 1114              	.LBB113:
 1115              	.LBB114:
 1116              	.LBI114:
 158:Inc/random_flash_interface.h ****     {
 1117              		.loc 4 158 10 view .LVU303
 1118              	.LBB115:
 161:Inc/random_flash_interface.h ****         _initialized = true;
 1119              		.loc 4 161 9 view .LVU304
 161:Inc/random_flash_interface.h ****         _initialized = true;
 1120              		.loc 4 161 27 is_stmt 0 view .LVU305
 1121 0012 FFF7FEFF 		bl	eeprom_buffer_fill
 1122              	.LVL106:
 162:Inc/random_flash_interface.h ****     }
 1123              		.loc 4 162 9 is_stmt 1 view .LVU306
 162:Inc/random_flash_interface.h ****     }
 1124              		.loc 4 162 22 is_stmt 0 view .LVU307
 1125 0016 01AB     		add	r3, sp, #4
 1126              	.LVL107:
 162:Inc/random_flash_interface.h ****     }
 1127              		.loc 4 162 22 view .LVU308
 1128 0018 0122     		movs	r2, #1
 1129 001a 1A70     		strb	r2, [r3]
 1130              	.LVL108:
 162:Inc/random_flash_interface.h ****     }
 1131              		.loc 4 162 22 view .LVU309
 1132              	.LBE115:
 1133              	.LBE114:
 1134              	.LBB116:
  80:Inc/random_flash_interface.h ****         {
 1135              		.loc 4 80 23 view .LVU310
 1136 001c 3026     		movs	r6, #48
 1137              	.LBE116:
  78:Inc/random_flash_interface.h **** 
 1138              		.loc 4 78 18 view .LVU311
 1139 001e 514D     		ldr	r5, .L71
  77:Inc/random_flash_interface.h ****         uint8_t* _pointer = (uint8_t*) &_t;
 1140              		.loc 4 77 18 view .LVU312
 1141 0020 0024     		movs	r4, #0
 1142              	.LVL109:
 1143              	.L55:
 1144              	.LBB117:
  80:Inc/random_flash_interface.h ****         {
 1145              		.loc 4 80 42 is_stmt 1 view .LVU313
 1146 0022 002E     		cmp	r6, #0
 1147 0024 0AD0     		beq	.L54
  82:Inc/random_flash_interface.h ****         }
 1148              		.loc 4 82 25 is_stmt 0 view .LVU314
 1149 0026 6F1C     		adds	r7, r5, #1
 1150              	.LVL110:
  82:Inc/random_flash_interface.h ****         }
 1151              		.loc 4 82 52 view .LVU315
 1152 0028 2000     		movs	r0, r4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 84


 1153 002a FFF7FEFF 		bl	eeprom_buffered_read_byte
 1154              	.LVL111:
  82:Inc/random_flash_interface.h ****         }
 1155              		.loc 4 82 25 view .LVU316
 1156 002e 2870     		strb	r0, [r5]
  80:Inc/random_flash_interface.h ****         {
 1157              		.loc 4 80 9 is_stmt 1 view .LVU317
 1158 0030 013E     		subs	r6, r6, #1
 1159              	.LVL112:
  80:Inc/random_flash_interface.h ****         {
 1160              		.loc 4 80 9 is_stmt 0 view .LVU318
 1161 0032 B6B2     		uxth	r6, r6
 1162              	.LVL113:
  80:Inc/random_flash_interface.h ****         {
 1163              		.loc 4 80 9 view .LVU319
 1164 0034 0134     		adds	r4, r4, #1
 1165              	.LVL114:
  80:Inc/random_flash_interface.h ****         {
 1166              		.loc 4 80 9 view .LVU320
 1167 0036 A4B2     		uxth	r4, r4
 1168              	.LVL115:
  82:Inc/random_flash_interface.h ****         }
 1169              		.loc 4 82 25 view .LVU321
 1170 0038 3D00     		movs	r5, r7
  80:Inc/random_flash_interface.h ****         {
 1171              		.loc 4 80 9 view .LVU322
 1172 003a F2E7     		b	.L55
 1173              	.LVL116:
 1174              	.L54:
  80:Inc/random_flash_interface.h ****         {
 1175              		.loc 4 80 9 view .LVU323
 1176              	.LBE117:
 1177              	.LBE113:
 1178              	.LBE112:
  16:Src/user.cpp  ****     if (boardConfig.configStatus != CONFIG_OK) // use default settings
 1179              		.loc 1 16 5 is_stmt 1 view .LVU324
  16:Src/user.cpp  ****     if (boardConfig.configStatus != CONFIG_OK) // use default settings
 1180              		.loc 1 16 21 is_stmt 0 view .LVU325
 1181 003c 494B     		ldr	r3, .L71
 1182 003e 1B78     		ldrb	r3, [r3]
  16:Src/user.cpp  ****     if (boardConfig.configStatus != CONFIG_OK) // use default settings
 1183              		.loc 1 16 5 view .LVU326
 1184 0040 012B     		cmp	r3, #1
 1185 0042 4BD0     		beq	.L56
  18:Src/user.cpp  ****         printf("config not\r\n");
 1186              		.loc 1 18 9 is_stmt 1 view .LVU327
  18:Src/user.cpp  ****         printf("config not\r\n");
 1187              		.loc 1 18 15 is_stmt 0 view .LVU328
 1188 0044 4848     		ldr	r0, .L71+4
 1189 0046 FFF7FEFF 		bl	puts
 1190              	.LVL117:
  19:Src/user.cpp  ****         boardConfig = BoardConfig_t{
 1191              		.loc 1 19 9 is_stmt 1 view .LVU329
  19:Src/user.cpp  ****         boardConfig = BoardConfig_t{
 1192              		.loc 1 19 21 is_stmt 0 view .LVU330
 1193 004a 464A     		ldr	r2, .L71
 1194 004c 474B     		ldr	r3, .L71+8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 85


 1195 004e 1100     		movs	r1, r2
 1196 0050 31CB     		ldmia	r3!, {r0, r4, r5}
 1197 0052 31C1     		stmia	r1!, {r0, r4, r5}
 1198 0054 31CB     		ldmia	r3!, {r0, r4, r5}
 1199 0056 31C1     		stmia	r1!, {r0, r4, r5}
 1200 0058 31CB     		ldmia	r3!, {r0, r4, r5}
 1201 005a 31C1     		stmia	r1!, {r0, r4, r5}
 1202 005c 31CB     		ldmia	r3!, {r0, r4, r5}
 1203 005e 31C1     		stmia	r1!, {r0, r4, r5}
  35:Src/user.cpp  ****         eeprom.put(0, boardConfig);
 1204              		.loc 1 35 9 is_stmt 1 view .LVU331
  35:Src/user.cpp  ****         eeprom.put(0, boardConfig);
 1205              		.loc 1 35 34 is_stmt 0 view .LVU332
 1206 0060 0021     		movs	r1, #0
 1207 0062 01A8     		add	r0, sp, #4
 1208 0064 FFF7FEFF 		bl	_ZN6EEPROM3putI8Config_tEERKT_iS4_
 1209              	.LVL118:
 1210              	.L57:
  41:Src/user.cpp  ****     motor.SetTorqueLimit(boardConfig.toqueLimit);
 1211              		.loc 1 41 5 is_stmt 1 view .LVU333
  41:Src/user.cpp  ****     motor.SetTorqueLimit(boardConfig.toqueLimit);
 1212              		.loc 1 41 25 is_stmt 0 view .LVU334
 1213 0068 3E4C     		ldr	r4, .L71
 1214 006a 414D     		ldr	r5, .L71+12
 1215 006c A168     		ldr	r1, [r4, #8]
 1216 006e 2800     		movs	r0, r5
 1217 0070 FFF7FEFF 		bl	_ZN5Motor14SetTorqueLimitEf
 1218              	.LVL119:
  42:Src/user.cpp  ****     motor.mechanicalAngleMin = boardConfig.mechanicalAngleMin;
 1219              		.loc 1 42 5 is_stmt 1 view .LVU335
  42:Src/user.cpp  ****     motor.mechanicalAngleMin = boardConfig.mechanicalAngleMin;
 1220              		.loc 1 42 30 is_stmt 0 view .LVU336
 1221 0074 6369     		ldr	r3, [r4, #20]
 1222 0076 AB63     		str	r3, [r5, #56]
  43:Src/user.cpp  ****     motor.mechanicalAngleMax = boardConfig.mechanicalAngleMax;
 1223              		.loc 1 43 5 is_stmt 1 view .LVU337
  43:Src/user.cpp  ****     motor.mechanicalAngleMax = boardConfig.mechanicalAngleMax;
 1224              		.loc 1 43 30 is_stmt 0 view .LVU338
 1225 0078 A369     		ldr	r3, [r4, #24]
 1226 007a EB63     		str	r3, [r5, #60]
  44:Src/user.cpp  ****     motor.adcValAtAngleMin = boardConfig.adcValAtAngleMin;
 1227              		.loc 1 44 5 is_stmt 1 view .LVU339
  44:Src/user.cpp  ****     motor.adcValAtAngleMin = boardConfig.adcValAtAngleMin;
 1228              		.loc 1 44 42 is_stmt 0 view .LVU340
 1229 007c 238A     		ldrh	r3, [r4, #16]
  44:Src/user.cpp  ****     motor.adcValAtAngleMin = boardConfig.adcValAtAngleMin;
 1230              		.loc 1 44 28 view .LVU341
 1231 007e AB85     		strh	r3, [r5, #44]
  45:Src/user.cpp  ****     motor.adcValAtAngleMax = boardConfig.adcValAtAngleMax;
 1232              		.loc 1 45 5 is_stmt 1 view .LVU342
  45:Src/user.cpp  ****     motor.adcValAtAngleMax = boardConfig.adcValAtAngleMax;
 1233              		.loc 1 45 42 is_stmt 0 view .LVU343
 1234 0080 638A     		ldrh	r3, [r4, #18]
  45:Src/user.cpp  ****     motor.adcValAtAngleMax = boardConfig.adcValAtAngleMax;
 1235              		.loc 1 45 28 view .LVU344
 1236 0082 EB85     		strh	r3, [r5, #46]
  46:Src/user.cpp  ****     motor.dce.kp = boardConfig.dceKp;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 86


 1237              		.loc 1 46 5 is_stmt 1 view .LVU345
  46:Src/user.cpp  ****     motor.dce.kp = boardConfig.dceKp;
 1238              		.loc 1 46 18 is_stmt 0 view .LVU346
 1239 0084 E369     		ldr	r3, [r4, #28]
 1240 0086 6B60     		str	r3, [r5, #4]
  47:Src/user.cpp  ****     motor.dce.ki = boardConfig.dceKi;
 1241              		.loc 1 47 5 is_stmt 1 view .LVU347
  47:Src/user.cpp  ****     motor.dce.ki = boardConfig.dceKi;
 1242              		.loc 1 47 18 is_stmt 0 view .LVU348
 1243 0088 636A     		ldr	r3, [r4, #36]
 1244 008a EB60     		str	r3, [r5, #12]
  48:Src/user.cpp  ****     motor.dce.kv = boardConfig.dceKv;
 1245              		.loc 1 48 5 is_stmt 1 view .LVU349
  48:Src/user.cpp  ****     motor.dce.kv = boardConfig.dceKv;
 1246              		.loc 1 48 18 is_stmt 0 view .LVU350
 1247 008c 236A     		ldr	r3, [r4, #32]
 1248 008e AB60     		str	r3, [r5, #8]
  49:Src/user.cpp  ****     motor.dce.kd = boardConfig.dceKd;
 1249              		.loc 1 49 5 is_stmt 1 view .LVU351
  49:Src/user.cpp  ****     motor.dce.kd = boardConfig.dceKd;
 1250              		.loc 1 49 18 is_stmt 0 view .LVU352
 1251 0090 A36A     		ldr	r3, [r4, #40]
 1252 0092 2B61     		str	r3, [r5, #16]
  50:Src/user.cpp  ****     motor.dce.setPointPos = boardConfig.initPos;
 1253              		.loc 1 50 5 is_stmt 1 view .LVU353
  50:Src/user.cpp  ****     motor.dce.setPointPos = boardConfig.initPos;
 1254              		.loc 1 50 27 is_stmt 0 view .LVU354
 1255 0094 6368     		ldr	r3, [r4, #4]
 1256 0096 6B61     		str	r3, [r5, #20]
  51:Src/user.cpp  ****     motor.SetEnable(boardConfig.enableMotorOnBoot);
 1257              		.loc 1 51 5 is_stmt 1 view .LVU355
  51:Src/user.cpp  ****     motor.SetEnable(boardConfig.enableMotorOnBoot);
 1258              		.loc 1 51 20 is_stmt 0 view .LVU356
 1259 0098 2C23     		movs	r3, #44
 1260 009a E15C     		ldrb	r1, [r4, r3]
 1261 009c 2800     		movs	r0, r5
 1262 009e FFF7FEFF 		bl	_ZN5Motor9SetEnableEb
 1263              	.LVL120:
  53:Src/user.cpp  ****     LL_TIM_EnableCounter(TIM3);
 1264              		.loc 1 53 5 is_stmt 1 view .LVU357
 1265              	.LBB118:
 1266              	.LBI118:
 1267              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @file    stm32f0xx_ll_tim.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * License. You may obtain a copy of the License at:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 87


  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifndef __STM32F0xx_LL_TIM_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __STM32F0xx_LL_TIM_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined (TIM1) || defined (TIM2) || defined (TIM3) || defined (TIM14) || defined (TIM15) || def
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 1: TIMx_CH1N */
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 3: TIMx_CH2N */
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 5: TIMx_CH3N */
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U    /* 6: TIMx_CH4  */
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: OC4M, OC4FE, OC4PE */
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 88


  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: CC4S, IC4PSC, IC4F */
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1P */
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 1: CC1NP */
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 2: CC2P */
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U,            /* 3: CC2NP */
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 4: CC3P */
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   10U,           /* 5: CC3NP */
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   12U            /* 6: CC4P */
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OISx[] =
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OIS1 */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   1U,            /* 1: OIS1N */
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 2: OIS2 */
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   3U,            /* 3: OIS2N */
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 4: OIS3 */
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   5U,            /* 5: OIS3N */
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U             /* 6: OIS4 */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_SHIFT  16U
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_MASK   0x0000FFFFU
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM14_OR_RMP_MASK  (TIM14_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the TDG[x:0] of the DTG bits of the TIMx_BDTR register */
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_1 ((uint8_t)0x7F)
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_2 ((uint8_t)0x3F)
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_3 ((uint8_t)0x1F)
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_4 ((uint8_t)0x1F)
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the DTG[7:5] bits of the DTG bits of the TIMx_BDTR register */
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_1 ((uint8_t)0x00)
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_2 ((uint8_t)0x80)
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_3 ((uint8_t)0xC0)
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_4 ((uint8_t)0xE0)
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 89


 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Calculate the deadtime sampling period(in ps).
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz).
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_CALC_DTS(__TIMCLK__, __CKD__)                                                        \
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__))         : \
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : \
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 90


 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetPrescaler().*/
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetCounterMode().*/
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    be a number between 0x0000 and 0xFFFFFFFF.
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetAutoReload().*/
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetClockDivision().*/
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downc
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    reaches zero, an update event is generated and counting restarts
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    from the RCR value (N).
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This means in PWM mode that (N+1) corresponds to:
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of PWM periods in edge-aligned mode
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of half PWM period in center-aligned mode
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    GP timers: this parameter must be a number between Min_Data = 0x
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Max_Data = 0xFF.
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Advanced timers: this parameter must be a number between Min_Dat
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Max_Data = 0xFFFF.
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetRepetitionCounter().*/
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetMode().*/
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNState;      /*!< Specifies the TIM complementary Output Compare state.
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 91


 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                LL_TIM_OC_SetCompareCHx (x=1..6).*/
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPolarity().*/
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetActiveInput().*/
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 92


 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPrescaler().*/
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetFilter().*/
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_SetEncoderMode().*/
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 93


 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Hall sensor interface configuration structure definition.
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;        /*!< Specifies the active edge of TI1 input.
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPolarity().*/
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;       /*!< Specifies the TI1 input prescaler value.
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     Prescaler must be set to get a maximum counter period longer th
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     time interval between 2 consecutive changes on the Hall inputs.
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPrescaler().*/
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;          /*!< Specifies the TI1 input filter.
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref TIM_LL_EC_IC_FILTER.
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetFilter().*/
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CommutationDelay;   /*!< Specifies the compare value to be loaded into the Capture Compa
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     A positive pulse (TRGO event) is generated with a programmable 
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     a change occurs on the Hall inputs.
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a number between Min_Data = 0x0000 and Ma
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_OC_SetCompareCH2().*/
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_HALLSENSOR_InitTypeDef;
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  BDTR (Break and Dead Time) structure definition
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 94


 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSRState;            /*!< Specifies the Off-State selection used in Run mode.
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSR
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                        programmed. */
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSIState;            /*!< Specifies the Off-State used in Idle state.
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSI
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t LockLevel;            /*!< Specifies the LOCK level parameters.
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_LOCKLEVEL
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note The LOCK bits can be written only once after the reset.
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       register has been written, their content is frozen until the 
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t DeadTime;              /*!< Specifies the delay time between the switching-off and the
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       switching-on of the outputs.
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a number between Min_Data = 0x00 and Ma
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_OC_SetDeadTime()
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                        programmed. */
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t BreakState;           /*!< Specifies whether the TIM Break input is enabled or not.
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_ENABLE
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_EnableBRK() or @ref LL_TIM_DisableBRK()
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t BreakPolarity;        /*!< Specifies the TIM Break Input pin polarity.
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_POLARIT
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_ConfigBRK()
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t AutomaticOutput;      /*!< Specifies whether the TIM Automatic Output feature is enabled
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_AUTOMATICOUTP
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_EnableAutomaticOutput() or @ref LL_TIM_DisableAut
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 95


 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_BDTR_InitTypeDef;
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_COMIF                        TIM_SR_COMIF         /*!< COM interrupt flag */
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_BIF                          TIM_SR_BIF           /*!< Break interrupt flag */
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_ENABLE Break Enable
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_DISABLE            0x00000000U             /*!< Break function disabled */
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_ENABLE             TIM_BDTR_BKE            /*!< Break function enabled */
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_AUTOMATICOUTPUT_ENABLE Automatic output enable
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_DISABLE         0x00000000U             /*!< MOE can be set only by 
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_ENABLE          TIM_BDTR_AOE            /*!< MOE can be set by softw
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 96


 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_COMIE                      TIM_DIER_COMIE       /*!< COM interrupt enable */
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_BIE                        TIM_DIER_BIE         /*!< Break interrupt enable */
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter stops counting at 
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter is not stopped at 
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_0        /*!< The counter counts up and 
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_1        /*!<The counter counts up and d
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 97


 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCUPDATESOURCE Capture Compare  Update Source
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_ONLY        0x00000000U          /*!< Capture/compare control bi
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI    TIM_CR2_CCUS         /*!< Capture/compare control bi
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_LOCKLEVEL Lock Level
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_OFF                   0x00000000U          /*!< LOCK OFF - No bit is write
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_1                     TIM_BDTR_LOCK_0      /*!< LOCK Level 1 */
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_2                     TIM_BDTR_LOCK_1      /*!< LOCK Level 2 */
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_3                     TIM_BDTR_LOCK        /*!< LOCK Level 3 */
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 98


 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCIDLESTATE Output Configuration Idle State
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_LOW                 0x00000000U             /*!<OCx=0 (after a dead-time
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_HIGH                TIM_CR2_OIS1            /*!<OCx=1 (after a dead-time
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                    /*!< No prescaler, ca
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 99


 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_BOTHEDGE            (TIM_CCER_CC1P | TIM_CCER_CC1NP) /*!< The circuit is
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1                     TIM_SMCR_SMS_0                               
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2                     TIM_SMCR_SMS_1                               
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12                   (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)             
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 100


 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                         
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                       
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                       
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                     
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                       
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                     
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                     
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)     
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 101


 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_POLARITY break polarity
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_LOW              0x00000000U               /*!< Break input BRK is ac
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_HIGH             TIM_BDTR_BKP              /*!< Break input BRK is ac
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSI OSSI
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_ENABLE                     TIM_BDTR_OSSI           /*!< When inactive, OxC/OCxN
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSR OSSR
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_ENABLE                     TIM_BDTR_OSSR           /*!< When inactive, OC/OCN o
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 102


 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_RCR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)                     
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_BDTR          (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)                     
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_GPIO     TIM14_OR_RMP_MASK                                            
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_RTC_CLK  (TIM14_OR_TI1_RMP_0  | TIM14_OR_RMP_MASK)                    
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_HSE      (TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MASK)                    
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_MCO      (TIM14_OR_TI1_RMP_0  | TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MAS
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 103


 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCREF_CLR_INT OCREF clear input selection
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_OCREF_CLR     0x00000000U         /*!< OCREF_CLR_INT is connected to t
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_ETR           TIM_SMCR_OCCS       /*!< OCREF_CLR_INT is connected to E
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Write a value in TIM register.
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be written
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VAL
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Read a value in TIM register.
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be read
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Register value
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_Exported_Macros Exported_Macros
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating DTG[0:7] in the TIMx_BDTR register to achieve the requested de
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DEADTIME (80000000, @ref LL_TIM_GetClockDivision (), 120);
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DT__ deadtime duration (in ns)
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval DTG[0:7]
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DEADTIME(__TIMCLK__, __CKD__, __DT__)  \
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 104


 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__))))    ?
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__)))  & DT_DELAY_1) :
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__C
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_2 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) 
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__C
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_3 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) 
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_4 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) 
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     0U)
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         active/inactive delay.
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (when the timer operates in one pulse mode).
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 105


1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable timer counter.
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
 1268              		.loc 5 1082 22 view .LVU358
 1269              	.LBB119:
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 1270              		.loc 5 1084 3 view .LVU359
 1271 00a2 344B     		ldr	r3, .L71+16
 1272 00a4 1A68     		ldr	r2, [r3]
 1273 00a6 0125     		movs	r5, #1
 1274 00a8 2A43     		orrs	r2, r5
 1275 00aa 1A60     		str	r2, [r3]
 1276              	.LVL121:
 1277              		.loc 5 1084 3 is_stmt 0 view .LVU360
 1278              	.LBE119:
 1279              	.LBE118:
  54:Src/user.cpp  ****     LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH1);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 106


 1280              		.loc 1 54 5 is_stmt 1 view .LVU361
 1281              	.LBB120:
 1282              	.LBI120:
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable timer counter.
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable update event generation.
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable update event generation.
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Inverted state of bit (0 or 1).
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 107


1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set update event source
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Counter overflow/underflow
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Setting the UG bit
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Update generation through the slave mode controller
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual event update source
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 108


1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       requires a timer reset to avoid unexpected direction
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       due to DIR bit readonly in center aligned mode.
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual counter mode.
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t counter_mode;
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   if (counter_mode == 0U)
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   {
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   }
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 109


1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return counter_mode;
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE)) ? 1UL : 0UL);
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (when supported) and the digital filters.
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 110


1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         generators (when supported) and the digital filters.
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the counter value.
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the counter value.
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 111


1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler value.
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the prescaler value.
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the auto-reload value.
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the repetition counter value.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 112


1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->RCR, RepetitionCounter);
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the repetition counter value.
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Repetition counter value
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->RCR));
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       they are updated only when a commutation event (COM) occurs.
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Only on channels that have a complementary output.
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 113


1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CCUpdateSource This parameter can be one of the following values:
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the lock level to freeze the
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         configuration of several capture/compare parameters.
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the lock mechanism is supported by a timer instance.
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  LockLevel This parameter can be one of the following values:
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_OFF
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 114


1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_2
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_3
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
 1283              		.loc 5 1567 22 view .LVU362
 1284              	.LBB121:
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
 1285              		.loc 5 1569 3 view .LVU363
 1286 00ac 1A6A     		ldr	r2, [r3, #32]
 1287 00ae 2A43     		orrs	r2, r5
 1288 00b0 1A62     		str	r2, [r3, #32]
 1289              	.LVL122:
 1290              		.loc 5 1569 3 is_stmt 0 view .LVU364
 1291              	.LBE121:
 1292              	.LBE120:
  55:Src/user.cpp  ****     LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH2);
 1293              		.loc 1 55 5 is_stmt 1 view .LVU365
 1294              	.LBB122:
 1295              	.LBI122:
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 1296              		.loc 5 1567 22 view .LVU366
 1297              	.LBB123:
 1298              		.loc 5 1569 3 view .LVU367
 1299 00b2 1A6A     		ldr	r2, [r3, #32]
 1300 00b4 1021     		movs	r1, #16
 1301 00b6 0A43     		orrs	r2, r1
 1302 00b8 1A62     		str	r2, [r3, #32]
 1303              	.LVL123:
 1304              		.loc 5 1569 3 is_stmt 0 view .LVU368
 1305              	.LBE123:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 115


 1306              	.LBE122:
  56:Src/user.cpp  ****     LL_TIM_OC_SetCompareCH1(TIM3,0);
 1307              		.loc 1 56 5 is_stmt 1 view .LVU369
 1308              	.LBB124:
 1309              	.LBI124:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 116


1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure an output channel.
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS4          LL_TIM_OC_ConfigOutput
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 117


1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 118


1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the IDLE state of an output channel
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function is significant only for the timer instances
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       supporting the break feature. Macro IS_TIM_BREAK_INSTANCE(TIMx)
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       can be used to check whether or not a timer instance provides
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a break input.
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 119


1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_SetIdleState
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  IdleState This parameter can be one of the following values:
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iC
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the IDLE state of an output channel
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_GetIdleState
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChanne
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 120


1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 121


1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 122


1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 123


2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal an
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         the Ocx and OCxN signals).
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       dead-time insertion feature is supported by a timer instance.
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DeadTime between Min_Data=0 and Max_Data=255
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
 1310              		.loc 5 2075 22 view .LVU370
 1311              	.LBB125:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 124


2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
 1312              		.loc 5 2077 3 view .LVU371
 1313 00ba 0022     		movs	r2, #0
 1314 00bc 5A63     		str	r2, [r3, #52]
 1315              	.LVL124:
 1316              		.loc 5 2077 3 is_stmt 0 view .LVU372
 1317              	.LBE125:
 1318              	.LBE124:
  57:Src/user.cpp  ****     LL_TIM_OC_SetCompareCH2(TIM3,0);
 1319              		.loc 1 57 5 is_stmt 1 view .LVU373
 1320              	.LBB126:
 1321              	.LBI126:
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
 1322              		.loc 5 2092 22 view .LVU374
 1323              	.LBB127:
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
 1324              		.loc 5 2094 3 view .LVU375
 1325 00be 9A63     		str	r2, [r3, #56]
 1326              	.LVL125:
 1327              		.loc 5 2094 3 is_stmt 0 view .LVU376
 1328              	.LBE127:
 1329              	.LBE126:
  60:Src/user.cpp  ****     MY_I2C1_Init(boardConfig.nodeId);
 1330              		.loc 1 60 5 is_stmt 1 view .LVU377
  60:Src/user.cpp  ****     MY_I2C1_Init(boardConfig.nodeId);
 1331              		.loc 1 60 30 is_stmt 0 view .LVU378
 1332 00c0 6078     		ldrb	r0, [r4, #1]
  60:Src/user.cpp  ****     MY_I2C1_Init(boardConfig.nodeId);
 1333              		.loc 1 60 17 view .LVU379
 1334 00c2 FFF7FEFF 		bl	MY_I2C1_Init
 1335              	.LVL126:
  61:Src/user.cpp  ****     LL_mDelay(10);
 1336              		.loc 1 61 5 is_stmt 1 view .LVU380
  61:Src/user.cpp  ****     LL_mDelay(10);
 1337              		.loc 1 61 14 is_stmt 0 view .LVU381
 1338 00c6 0A20     		movs	r0, #10
 1339 00c8 FFF7FEFF 		bl	LL_mDelay
 1340              	.LVL127:
  63:Src/user.cpp  ****     LL_TIM_EnableIT_UPDATE(TIM14);
 1341              		.loc 1 63 5 is_stmt 1 view .LVU382
 1342              	.LBB128:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 125


 1343              	.LBI128:
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 3 (TIMx_CCR3).
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel is supported by a timer instance.
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR3, CompareValue);
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 4 (TIMx_CCR4).
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR4, CompareValue);
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 126


2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 3 is supported by a timer instance.
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure input channel.
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1F          LL_TIM_IC_Config\n
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_Config\n
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 127


2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_Config\n
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_Config\n
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_Config\n
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_Config\n
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_Config\n
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_IC_Config\n
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_Config\n
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_Config\n
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_Config\n
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_Config\n
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_Config\n
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_Config\n
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_Config
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING or @ref LL_TIM_I
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
2238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChanne
2242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))       
2243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              << SHIFT_TAB_ICxx[iChannel]);
2244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
2246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the active input.
2250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
2251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
2252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
2253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
2254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICActiveInput This parameter can be one of the following values:
2261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 128


2265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiv
2267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT
2271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current active input.
2275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
2276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
2277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
2278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
2279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
2291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler of input channel.
2299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
2300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
2301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
2302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
2303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPrescaler This parameter can be one of the following values:
2310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescal
2317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT
2321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 129


2322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current prescaler value acting on an  input channel.
2325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
2326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
2327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
2328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
2329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
2342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iCha
2346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input filter duration.
2350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
2351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
2352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
2353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_SetFilter
2354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICFilter This parameter can be one of the following values:
2361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 130


2379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
2380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_
2384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the input filter duration.
2388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
2389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
2390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
2391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_GetFilter
2392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
2417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input channel polarity.
2425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
2426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
2427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
2428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
2429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
2430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
2431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
2432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_SetPolarity
2433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 131


2436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPolarity This parameter can be one of the following values:
2440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity
2446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ICPolarity << SHIFT_TAB_CCxP[iChannel]);
2450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current input channel polarity.
2454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
2455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
2456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
2457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
2458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
2459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
2460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
2461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_GetPolarity
2462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
2474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
2477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****           SHIFT_TAB_CCxP[iChannel]);
2478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
2482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
2485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
2489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
2491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 132


2493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
2495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
2498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
2502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
2504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
2508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance provides an XOR input.
2510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
2511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
2515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S)) ? 1UL : 0UL);
2517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 1.
2521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 1 is supported by a timer instance.
2526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
2527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
2531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 2.
2537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 2 is supported by a timer instance.
2542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
2543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
2547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 133


2550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 3.
2553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 3 is supported by a timer instance.
2558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
2559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
2563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 4.
2569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 4 is supported by a timer instance.
2574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
2575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
2579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
2588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable external clock mode 2.
2592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ET
2593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
2596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
2600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable external clock mode 2.
2606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 134


2607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
2609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
2613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether external clock mode 2 is enabled.
2619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
2622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
2626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE)) ? 1UL : 0UL);
2628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the clock source of the counter clock.
2632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note when selected clock source is external clock mode 1, the timer input
2633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
2634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       function. This timer input must be configured by calling
2635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the @ref LL_TIM_IC_Config() function.
2636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
2637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode1.
2638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
2641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ECE           LL_TIM_SetClockSource
2642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockSource This parameter can be one of the following values:
2644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
2645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
2646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
2647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
2650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
2652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the encoder interface mode.
2656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
2657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports the encoder mode.
2658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
2659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  EncoderMode This parameter can be one of the following values:
2661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
2662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
2663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 135


2664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
2667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
2669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
2676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger output (TRGO) used for timer synchronization .
2680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
2681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance can operate as a master timer.
2682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
2683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TimerSynchronization This parameter can be one of the following values:
2685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_RESET
2686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_ENABLE
2687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_UPDATE
2688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_CC1IF
2689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC1REF
2690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC2REF
2691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC3REF
2692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC4REF
2693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
2696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
2698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the synchronization mode of a slave timer.
2702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
2705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  SlaveMode This parameter can be one of the following values:
2707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
2708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_RESET
2709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_GATED
2710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
2711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
2714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
2716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the selects the trigger input to be used to synchronize the counter.
2720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 136


2721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
2723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TriggerInput This parameter can be one of the following values:
2725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR0
2726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR1
2727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR2
2728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR3
2729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1F_ED
2730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1FP1
2731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI2FP2
2732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ETRF
2733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
2736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
2738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the Master/Slave mode.
2742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
2745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
2749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the Master/Slave mode.
2755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
2758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
2762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief Indicates whether the Master/Slave mode is enabled.
2768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance can operate as a slave timer.
2770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
2771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
2775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM)) ? 1UL : 0UL);
2777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 137


2778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the external trigger (ETR) input.
2781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
2782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an external trigger input.
2783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
2784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETPS          LL_TIM_ConfigETR\n
2785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETF           LL_TIM_ConfigETR
2786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPolarity This parameter can be one of the following values:
2788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
2789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
2790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPrescaler This parameter can be one of the following values:
2791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
2792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
2793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
2794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
2795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRFilter This parameter can be one of the following values:
2796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
2797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
2798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
2799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
2800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
2801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
2802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
2803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
2804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
2805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
2806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
2807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
2808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
2809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
2810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
2811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
2812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescale
2815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       uint32_t ETRFilter)
2816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | 
2818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Break_Function Break function configuration
2825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the break function.
2829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
2832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 138


2835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
2836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the break function.
2846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
2847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
2853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the break input.
2863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
2866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  BreakPolarity This parameter can be one of the following values:
2868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
2869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
2870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
2873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
2876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to BKP bit takes a delay of 1 APB clock cycle to become effective. *
2877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
2883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
2886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         BDTR         OSSR          LL_TIM_SetOffStates
2887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateIdle This parameter can be one of the following values:
2889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_DISABLE
2890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_ENABLE
2891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateRun This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 139


2892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_DISABLE
2893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_ENABLE
2894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStat
2897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
2899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable automatic output (MOE can be set by software or automatically when a break input
2903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
2906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
2910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable automatic output (MOE can be set only by software).
2916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
2919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
2923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether automatic output is enabled.
2929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
2932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
2936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE)) ? 1UL : 0UL);
2938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
2942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event
2944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
2947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 140


2949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
2951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
2957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event.
2959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
2962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
2966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether outputs are enabled.
2972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
2975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
2979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE)) ? 1UL : 0UL);
2981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
2988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configures the timer DMA burst feature.
2992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
2993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       not a timer instance supports the DMA burst mode.
2994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
2995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         DCR          DBA           LL_TIM_ConfigDMABurst
2996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstBaseAddress This parameter can be one of the following values:
2998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
2999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
3000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
3001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
3002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
3003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
3004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
3005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 141


3006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
3007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
3008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
3009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
3010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
3011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
3012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
3013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
3014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
3015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
3016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstLength This parameter can be one of the following values:
3017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
3018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
3019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
3020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
3021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
3022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
3023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
3024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
3025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
3026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
3027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
3028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
3029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
3030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
3031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
3032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
3033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
3034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
3035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_
3038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
3040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Inputs_Remapping Timer input remapping
3047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Remap TIM inputs (input channel, internal/external triggers).
3051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REMAP_INSTANCE(TIMx) can be used to check whether or not
3052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a some timer inputs can be remapped.
3053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll TIM14_OR    TI1_RMP           LL_TIM_SetRemap
3054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Remap This parameter can be one of the following values:
3056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_GPIO
3057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_RTC_CLK
3058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_HSE
3059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_MCO
3060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
3061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 142


3063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
3064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
3066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_OCREF_Clear OCREF_Clear_Management
3073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the OCREF clear input source
3077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The OCxREF signal of a given channel can be cleared when a high level is applied on the O
3078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes.
3079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR          OCCS                LL_TIM_SetOCRefClearInputSource
3080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OCRefClearInputSource This parameter can be one of the following values:
3082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_OCREF_CLR
3083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
3084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSou
3087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
3089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
3095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the update interrupt flag (UIF).
3099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
3100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
3104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
3106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
3110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
3111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
3115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
3117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 143


3120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 1 interrupt flag (CC1F).
3121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
3122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
3126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
3128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 1 interrupt flag (CC1F) is set (Capture/Compare 1 inte
3132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
3133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
3137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
3139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 2 interrupt flag (CC2F).
3143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
3144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
3148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
3150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 2 interrupt flag (CC2F) is set (Capture/Compare 2 inte
3154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
3155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
3159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
3161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 3 interrupt flag (CC3F).
3165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
3166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
3170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
3172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 3 interrupt flag (CC3F) is set (Capture/Compare 3 inte
3176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 144


3177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
3181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
3183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 4 interrupt flag (CC4F).
3187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
3188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
3192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
3194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 4 interrupt flag (CC4F) is set (Capture/Compare 4 inte
3198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
3199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
3203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
3205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the commutation interrupt flag (COMIF).
3209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           COMIF         LL_TIM_ClearFlag_COM
3210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
3214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_COMIF));
3216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether commutation interrupt flag (COMIF) is set (commutation interrupt is pe
3220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           COMIF         LL_TIM_IsActiveFlag_COM
3221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
3225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_COMIF) == (TIM_SR_COMIF)) ? 1UL : 0UL);
3227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the trigger interrupt flag (TIF).
3231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           TIF           LL_TIM_ClearFlag_TRIG
3232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 145


3234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
3236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_TIF));
3238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether trigger interrupt flag (TIF) is set (trigger interrupt is pending).
3242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           TIF           LL_TIM_IsActiveFlag_TRIG
3243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
3247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_TIF) == (TIM_SR_TIF)) ? 1UL : 0UL);
3249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the break interrupt flag (BIF).
3253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
3254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
3258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
3260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether break interrupt flag (BIF) is set (break interrupt is pending).
3264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
3265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
3269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
3271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 1 over-capture interrupt flag (CC1OF).
3275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC1OF         LL_TIM_ClearFlag_CC1OVR
3276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
3280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC1OF));
3282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 1 over-capture interrupt flag (CC1OF) is set
3286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (Capture/Compare 1 interrupt is pending).
3287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC1OF         LL_TIM_IsActiveFlag_CC1OVR
3288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 146


3291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
3292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC1OF) == (TIM_SR_CC1OF)) ? 1UL : 0UL);
3294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 2 over-capture interrupt flag (CC2OF).
3298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC2OF         LL_TIM_ClearFlag_CC2OVR
3299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
3303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC2OF));
3305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 2 over-capture interrupt flag (CC2OF) is set
3309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (Capture/Compare 2 over-capture interrupt is pending).
3310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC2OF         LL_TIM_IsActiveFlag_CC2OVR
3311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
3315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC2OF) == (TIM_SR_CC2OF)) ? 1UL : 0UL);
3317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 3 over-capture interrupt flag (CC3OF).
3321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC3OF         LL_TIM_ClearFlag_CC3OVR
3322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
3326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC3OF));
3328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 3 over-capture interrupt flag (CC3OF) is set
3332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (Capture/Compare 3 over-capture interrupt is pending).
3333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC3OF         LL_TIM_IsActiveFlag_CC3OVR
3334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
3338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC3OF) == (TIM_SR_CC3OF)) ? 1UL : 0UL);
3340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the Capture/Compare 4 over-capture interrupt flag (CC4OF).
3344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC4OF         LL_TIM_ClearFlag_CC4OVR
3345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 147


3348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
3349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_CC4OF));
3351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether Capture/Compare 4 over-capture interrupt flag (CC4OF) is set
3355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (Capture/Compare 4 over-capture interrupt is pending).
3356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           CC4OF         LL_TIM_IsActiveFlag_CC4OVR
3357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
3361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_CC4OF) == (TIM_SR_CC4OF)) ? 1UL : 0UL);
3363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_IT_Management IT-Management
3370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable update interrupt (UIE).
3374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
3375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
 1344              		.loc 5 3378 22 view .LVU383
 1345              	.LBB129:
3379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 1346              		.loc 5 3380 3 view .LVU384
 1347 00cc 2A4B     		ldr	r3, .L71+20
 1348 00ce DA68     		ldr	r2, [r3, #12]
 1349 00d0 2A43     		orrs	r2, r5
 1350 00d2 DA60     		str	r2, [r3, #12]
 1351              	.LVL128:
 1352              		.loc 5 3380 3 is_stmt 0 view .LVU385
 1353              	.LBE129:
 1354              	.LBE128:
  64:Src/user.cpp  ****     LL_TIM_EnableCounter(TIM14);
 1355              		.loc 1 64 5 is_stmt 1 view .LVU386
 1356              	.LBB130:
 1357              	.LBI130:
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 1358              		.loc 5 1082 22 view .LVU387
 1359              	.LBB131:
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
 1360              		.loc 5 1084 3 view .LVU388
 1361 00d4 1A68     		ldr	r2, [r3]
 1362 00d6 1543     		orrs	r5, r2
 1363 00d8 1D60     		str	r5, [r3]
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 148


 1364              		.loc 5 1085 1 is_stmt 0 view .LVU389
 1365 00da 27E0     		b	.L58
 1366              	.LVL129:
 1367              	.L56:
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 1368              		.loc 5 1085 1 view .LVU390
 1369              	.LBE131:
 1370              	.LBE130:
  39:Src/user.cpp  ****         printf("configed\r\n");
 1371              		.loc 1 39 9 is_stmt 1 view .LVU391
  39:Src/user.cpp  ****         printf("configed\r\n");
 1372              		.loc 1 39 15 is_stmt 0 view .LVU392
 1373 00dc 2748     		ldr	r0, .L71+24
 1374 00de FFF7FEFF 		bl	puts
 1375              	.LVL130:
 1376 00e2 C1E7     		b	.L57
 1377              	.L70:
  71:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_OK;
 1378              		.loc 1 71 13 is_stmt 1 view .LVU393
  71:Src/user.cpp  ****             boardConfig.configStatus = CONFIG_OK;
 1379              		.loc 1 71 38 is_stmt 0 view .LVU394
 1380 00e4 1F4B     		ldr	r3, .L71
 1381 00e6 0122     		movs	r2, #1
 1382 00e8 1A70     		strb	r2, [r3]
  72:Src/user.cpp  ****             eeprom.put(0, boardConfig);
 1383              		.loc 1 72 13 is_stmt 1 view .LVU395
 1384              	.LVL131:
 1385              	.LBB132:
 1386              	.LBI132:
  89:Inc/random_flash_interface.h ****     {
 1387              		.loc 4 89 14 view .LVU396
 1388              	.LBB133:
  92:Inc/random_flash_interface.h ****             init();
 1389              		.loc 4 92 14 is_stmt 0 view .LVU397
 1390 00ea 01AB     		add	r3, sp, #4
 1391              	.LVL132:
  92:Inc/random_flash_interface.h ****             init();
 1392              		.loc 4 92 14 view .LVU398
 1393 00ec 1B78     		ldrb	r3, [r3]
 1394              	.LVL133:
  92:Inc/random_flash_interface.h ****             init();
 1395              		.loc 4 92 9 view .LVU399
 1396 00ee 002B     		cmp	r3, #0
 1397 00f0 03D0     		beq	.L67
 1398              	.L60:
 1399              	.LVL134:
  95:Inc/random_flash_interface.h **** 
 1400              		.loc 4 95 18 view .LVU400
 1401 00f2 3500     		movs	r5, r6
 1402              	.LBB134:
  99:Inc/random_flash_interface.h ****         {
 1403              		.loc 4 99 23 view .LVU401
 1404 00f4 3024     		movs	r4, #48
 1405              	.LBE134:
  97:Inc/random_flash_interface.h **** 
 1406              		.loc 4 97 24 view .LVU402
 1407 00f6 1B4B     		ldr	r3, .L71
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 149


 1408 00f8 0FE0     		b	.L62
 1409              	.LVL135:
 1410              	.L67:
 1411              	.LBB135:
 1412              	.LBI135:
 158:Inc/random_flash_interface.h ****     {
 1413              		.loc 4 158 10 is_stmt 1 view .LVU403
 1414              	.LBB136:
 161:Inc/random_flash_interface.h ****         _initialized = true;
 1415              		.loc 4 161 9 view .LVU404
 161:Inc/random_flash_interface.h ****         _initialized = true;
 1416              		.loc 4 161 27 is_stmt 0 view .LVU405
 1417 00fa FFF7FEFF 		bl	eeprom_buffer_fill
 1418              	.LVL136:
 162:Inc/random_flash_interface.h ****     }
 1419              		.loc 4 162 9 is_stmt 1 view .LVU406
 162:Inc/random_flash_interface.h ****     }
 1420              		.loc 4 162 22 is_stmt 0 view .LVU407
 1421 00fe 01AB     		add	r3, sp, #4
 1422              	.LVL137:
 162:Inc/random_flash_interface.h ****     }
 1423              		.loc 4 162 22 view .LVU408
 1424 0100 0122     		movs	r2, #1
 1425 0102 1A70     		strb	r2, [r3]
 1426              		.loc 4 163 5 view .LVU409
 1427 0104 F5E7     		b	.L60
 1428              	.LVL138:
 1429              	.L68:
 1430              		.loc 4 163 5 view .LVU410
 1431              	.LBE136:
 1432              	.LBE135:
 1433              	.LBB137:
 101:Inc/random_flash_interface.h ****         }
 1434              		.loc 4 101 39 view .LVU411
 1435 0106 5F1C     		adds	r7, r3, #1
 1436              	.LVL139:
 101:Inc/random_flash_interface.h ****         }
 1437              		.loc 4 101 39 view .LVU412
 1438 0108 1978     		ldrb	r1, [r3]
 1439 010a 2800     		movs	r0, r5
 1440 010c FFF7FEFF 		bl	eeprom_buffered_write_byte
 1441              	.LVL140:
  99:Inc/random_flash_interface.h ****         {
 1442              		.loc 4 99 9 is_stmt 1 view .LVU413
 1443 0110 013C     		subs	r4, r4, #1
 1444              	.LVL141:
  99:Inc/random_flash_interface.h ****         {
 1445              		.loc 4 99 9 is_stmt 0 view .LVU414
 1446 0112 A4B2     		uxth	r4, r4
 1447              	.LVL142:
  99:Inc/random_flash_interface.h ****         {
 1448              		.loc 4 99 9 view .LVU415
 1449 0114 0135     		adds	r5, r5, #1
 1450              	.LVL143:
  99:Inc/random_flash_interface.h ****         {
 1451              		.loc 4 99 9 view .LVU416
 1452 0116 ADB2     		uxth	r5, r5
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 150


 1453              	.LVL144:
 101:Inc/random_flash_interface.h ****         }
 1454              		.loc 4 101 39 view .LVU417
 1455 0118 3B00     		movs	r3, r7
 1456              	.LVL145:
 1457              	.L62:
  99:Inc/random_flash_interface.h ****         {
 1458              		.loc 4 99 42 is_stmt 1 view .LVU418
 1459 011a 002C     		cmp	r4, #0
 1460 011c F3D1     		bne	.L68
 1461              	.LBE137:
 104:Inc/random_flash_interface.h ****         {
 1462              		.loc 4 104 13 is_stmt 0 view .LVU419
 1463 011e 01AB     		add	r3, sp, #4
 1464              	.LVL146:
 104:Inc/random_flash_interface.h ****         {
 1465              		.loc 4 104 13 view .LVU420
 1466 0120 9B78     		ldrb	r3, [r3, #2]
 1467              	.LVL147:
 104:Inc/random_flash_interface.h ****         {
 1468              		.loc 4 104 9 view .LVU421
 1469 0122 002B     		cmp	r3, #0
 1470 0124 16D1     		bne	.L69
 114:Inc/random_flash_interface.h ****         }
 1471              		.loc 4 114 26 view .LVU422
 1472 0126 01AB     		add	r3, sp, #4
 1473              	.LVL148:
 114:Inc/random_flash_interface.h ****         }
 1474              		.loc 4 114 26 view .LVU423
 1475 0128 0122     		movs	r2, #1
 1476 012a 5A70     		strb	r2, [r3, #1]
 1477              	.LVL149:
 1478              	.L58:
 114:Inc/random_flash_interface.h ****         }
 1479              		.loc 4 114 26 view .LVU424
 1480              	.LBE133:
 1481              	.LBE132:
  67:Src/user.cpp  ****     while (1)
 1482              		.loc 1 67 5 is_stmt 1 view .LVU425
  69:Src/user.cpp  ****         if (boardConfig.configStatus == CONFIG_COMMIT)
 1483              		.loc 1 69 9 view .LVU426
  69:Src/user.cpp  ****         if (boardConfig.configStatus == CONFIG_COMMIT)
 1484              		.loc 1 69 25 is_stmt 0 view .LVU427
 1485 012c 0D4B     		ldr	r3, .L71
 1486 012e 1B78     		ldrb	r3, [r3]
  69:Src/user.cpp  ****         if (boardConfig.configStatus == CONFIG_COMMIT)
 1487              		.loc 1 69 9 view .LVU428
 1488 0130 022B     		cmp	r3, #2
 1489 0132 D7D0     		beq	.L70
  73:Src/user.cpp  ****         } else if (boardConfig.configStatus == CONFIG_RESTORE)
 1490              		.loc 1 73 16 is_stmt 1 view .LVU429
 1491 0134 002B     		cmp	r3, #0
 1492 0136 F9D1     		bne	.L58
  75:Src/user.cpp  ****             eeprom.put(0, boardConfig);
 1493              		.loc 1 75 13 view .LVU430
  75:Src/user.cpp  ****             eeprom.put(0, boardConfig);
 1494              		.loc 1 75 38 is_stmt 0 view .LVU431
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 151


 1495 0138 0A4A     		ldr	r2, .L71
 1496 013a 0021     		movs	r1, #0
 1497 013c 01A8     		add	r0, sp, #4
 1498 013e FFF7FEFF 		bl	_ZN6EEPROM3putI8Config_tEERKT_iS4_
 1499              	.LVL150:
  76:Src/user.cpp  ****             NVIC_SystemReset();
 1500              		.loc 1 76 13 is_stmt 1 view .LVU432
 1501              	.LBB139:
 1502              	.LBI139:
 1503              		.file 6 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 152


  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 153


 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 154


 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 155


 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 156


 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 157


 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 158


 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 159


 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 160


 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 161


 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 162


 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 163


 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 164


 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 735:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 736:Drivers/CMSIS/Include/core_cm0.h ****   }
 737:Drivers/CMSIS/Include/core_cm0.h ****   else
 738:Drivers/CMSIS/Include/core_cm0.h ****   {
 739:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 740:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 741:Drivers/CMSIS/Include/core_cm0.h ****   }
 742:Drivers/CMSIS/Include/core_cm0.h **** }
 743:Drivers/CMSIS/Include/core_cm0.h **** 
 744:Drivers/CMSIS/Include/core_cm0.h **** 
 745:Drivers/CMSIS/Include/core_cm0.h **** /**
 746:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 747:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 748:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 749:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 750:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 751:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 752:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 753:Drivers/CMSIS/Include/core_cm0.h ****  */
 754:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 755:Drivers/CMSIS/Include/core_cm0.h **** {
 756:Drivers/CMSIS/Include/core_cm0.h **** 
 757:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 758:Drivers/CMSIS/Include/core_cm0.h ****   {
 759:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 760:Drivers/CMSIS/Include/core_cm0.h ****   }
 761:Drivers/CMSIS/Include/core_cm0.h ****   else
 762:Drivers/CMSIS/Include/core_cm0.h ****   {
 763:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 764:Drivers/CMSIS/Include/core_cm0.h ****   }
 765:Drivers/CMSIS/Include/core_cm0.h **** }
 766:Drivers/CMSIS/Include/core_cm0.h **** 
 767:Drivers/CMSIS/Include/core_cm0.h **** 
 768:Drivers/CMSIS/Include/core_cm0.h **** /**
 769:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Encode Priority
 770:Drivers/CMSIS/Include/core_cm0.h ****   \details Encodes the priority for an interrupt with the given priority group,
 771:Drivers/CMSIS/Include/core_cm0.h ****            preemptive priority value, and subpriority value.
 772:Drivers/CMSIS/Include/core_cm0.h ****            In case of a conflict between priority grouping and available
 773:Drivers/CMSIS/Include/core_cm0.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 774:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]     PriorityGroup  Used priority group.
 775:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 776:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 777:Drivers/CMSIS/Include/core_cm0.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 778:Drivers/CMSIS/Include/core_cm0.h ****  */
 779:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 780:Drivers/CMSIS/Include/core_cm0.h **** {
 781:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 782:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t PreemptPriorityBits;
 783:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t SubPriorityBits;
 784:Drivers/CMSIS/Include/core_cm0.h **** 
 785:Drivers/CMSIS/Include/core_cm0.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 786:Drivers/CMSIS/Include/core_cm0.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 787:Drivers/CMSIS/Include/core_cm0.h **** 
 788:Drivers/CMSIS/Include/core_cm0.h ****   return (
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 165


 789:Drivers/CMSIS/Include/core_cm0.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 790:Drivers/CMSIS/Include/core_cm0.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 791:Drivers/CMSIS/Include/core_cm0.h ****          );
 792:Drivers/CMSIS/Include/core_cm0.h **** }
 793:Drivers/CMSIS/Include/core_cm0.h **** 
 794:Drivers/CMSIS/Include/core_cm0.h **** 
 795:Drivers/CMSIS/Include/core_cm0.h **** /**
 796:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Decode Priority
 797:Drivers/CMSIS/Include/core_cm0.h ****   \details Decodes an interrupt priority value with a given priority group to
 798:Drivers/CMSIS/Include/core_cm0.h ****            preemptive priority value and subpriority value.
 799:Drivers/CMSIS/Include/core_cm0.h ****            In case of a conflict between priority grouping and available
 800:Drivers/CMSIS/Include/core_cm0.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 801:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 802:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]     PriorityGroup  Used priority group.
 803:Drivers/CMSIS/Include/core_cm0.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 804:Drivers/CMSIS/Include/core_cm0.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 805:Drivers/CMSIS/Include/core_cm0.h ****  */
 806:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 807:Drivers/CMSIS/Include/core_cm0.h **** {
 808:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 809:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t PreemptPriorityBits;
 810:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t SubPriorityBits;
 811:Drivers/CMSIS/Include/core_cm0.h **** 
 812:Drivers/CMSIS/Include/core_cm0.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 813:Drivers/CMSIS/Include/core_cm0.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 814:Drivers/CMSIS/Include/core_cm0.h **** 
 815:Drivers/CMSIS/Include/core_cm0.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 816:Drivers/CMSIS/Include/core_cm0.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 817:Drivers/CMSIS/Include/core_cm0.h **** }
 818:Drivers/CMSIS/Include/core_cm0.h **** 
 819:Drivers/CMSIS/Include/core_cm0.h **** 
 820:Drivers/CMSIS/Include/core_cm0.h **** 
 821:Drivers/CMSIS/Include/core_cm0.h **** /**
 822:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Vector
 823:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 824:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 825:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 826:Drivers/CMSIS/Include/core_cm0.h ****            Address 0 must be mapped to SRAM.
 827:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn      Interrupt number
 828:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   vector    Address of interrupt handler function
 829:Drivers/CMSIS/Include/core_cm0.h ****  */
 830:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 831:Drivers/CMSIS/Include/core_cm0.h **** {
 832:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 833:Drivers/CMSIS/Include/core_cm0.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 834:Drivers/CMSIS/Include/core_cm0.h **** }
 835:Drivers/CMSIS/Include/core_cm0.h **** 
 836:Drivers/CMSIS/Include/core_cm0.h **** 
 837:Drivers/CMSIS/Include/core_cm0.h **** /**
 838:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Vector
 839:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads an interrupt vector from interrupt vector table.
 840:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 841:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 842:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn      Interrupt number.
 843:Drivers/CMSIS/Include/core_cm0.h ****   \return                 Address of interrupt handler function
 844:Drivers/CMSIS/Include/core_cm0.h ****  */
 845:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 166


 846:Drivers/CMSIS/Include/core_cm0.h **** {
 847:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 848:Drivers/CMSIS/Include/core_cm0.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 849:Drivers/CMSIS/Include/core_cm0.h **** }
 850:Drivers/CMSIS/Include/core_cm0.h **** 
 851:Drivers/CMSIS/Include/core_cm0.h **** 
 852:Drivers/CMSIS/Include/core_cm0.h **** /**
 853:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 854:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 855:Drivers/CMSIS/Include/core_cm0.h ****  */
 856:Drivers/CMSIS/Include/core_cm0.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 1504              		.loc 6 856 34 view .LVU433
 1505              	.LBB140:
 857:Drivers/CMSIS/Include/core_cm0.h **** {
 858:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 1506              		.loc 6 858 3 view .LVU434
 1507              	.LBB141:
 1508              	.LBI141:
 1509              		.file 7 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 167


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 168


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 169


 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 170


 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 171


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 172


 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 173


 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 174


 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 175


 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 176


 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 177


 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 178


 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 179


 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 180


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 181


 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 1510              		.loc 7 877 27 view .LVU435
 1511              	.LBB142:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1512              		.loc 7 879 3 view .LVU436
 1513              		.syntax divided
 1514              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1515 0142 BFF34F8F 		dsb 0xF
 1516              	@ 0 "" 2
 1517              		.thumb
 1518              		.syntax unified
 1519              	.LBE142:
 1520              	.LBE141:
 859:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 860:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 1521              		.loc 6 860 3 view .LVU437
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 182


 1522              		.loc 6 860 15 is_stmt 0 view .LVU438
 1523 0146 0E4B     		ldr	r3, .L71+28
 1524 0148 0E4A     		ldr	r2, .L71+32
 1525 014a DA60     		str	r2, [r3, #12]
 861:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 862:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 1526              		.loc 6 862 3 is_stmt 1 view .LVU439
 1527              	.LBB143:
 1528              	.LBI143:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1529              		.loc 7 877 27 view .LVU440
 1530              	.LBB144:
 1531              		.loc 7 879 3 view .LVU441
 1532              		.syntax divided
 1533              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1534 014c BFF34F8F 		dsb 0xF
 1535              	@ 0 "" 2
 1536              		.thumb
 1537              		.syntax unified
 1538              	.L66:
 1539              	.LBE144:
 1540              	.LBE143:
 863:Drivers/CMSIS/Include/core_cm0.h **** 
 864:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 1541              		.loc 6 864 3 view .LVU442
 865:Drivers/CMSIS/Include/core_cm0.h ****   {
 866:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 1542              		.loc 6 866 5 view .LVU443
 1543              		.syntax divided
 1544              	@ 866 "Drivers/CMSIS/Include/core_cm0.h" 1
 1545 0150 C046     		nop
 1546              	@ 0 "" 2
 864:Drivers/CMSIS/Include/core_cm0.h ****   {
 1547              		.loc 6 864 3 view .LVU444
 1548              		.thumb
 1549              		.syntax unified
 1550 0152 FDE7     		b	.L66
 1551              	.LVL151:
 1552              	.L69:
 864:Drivers/CMSIS/Include/core_cm0.h ****   {
 1553              		.loc 6 864 3 is_stmt 0 view .LVU445
 1554              	.LBE140:
 1555              	.LBE139:
 1556              	.LBB145:
 1557              	.LBB138:
 107:Inc/random_flash_interface.h **** 
 1558              		.loc 4 107 32 view .LVU446
 1559 0154 FFF7FEFF 		bl	eeprom_buffer_flush
 1560              	.LVL152:
 109:Inc/random_flash_interface.h ****             _validEEPROM = true;
 1561              		.loc 4 109 26 view .LVU447
 1562 0158 01AB     		add	r3, sp, #4
 1563              	.LVL153:
 109:Inc/random_flash_interface.h ****             _validEEPROM = true;
 1564              		.loc 4 109 26 view .LVU448
 1565 015a 0022     		movs	r2, #0
 1566 015c 5A70     		strb	r2, [r3, #1]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 183


 110:Inc/random_flash_interface.h ****         } else
 1567              		.loc 4 110 26 view .LVU449
 1568 015e 0132     		adds	r2, r2, #1
 1569 0160 DA70     		strb	r2, [r3, #3]
 1570 0162 E3E7     		b	.L58
 1571              	.L72:
 1572              		.align	2
 1573              	.L71:
 1574 0164 00000000 		.word	.LANCHOR1
 1575 0168 00000000 		.word	.LC12
 1576 016c 00000000 		.word	.LANCHOR2
 1577 0170 00000000 		.word	.LANCHOR0
 1578 0174 00040040 		.word	1073742848
 1579 0178 00200040 		.word	1073750016
 1580 017c 0C000000 		.word	.LC15
 1581 0180 00ED00E0 		.word	-536810240
 1582 0184 0400FA05 		.word	100270084
 1583              	.LBE138:
 1584              	.LBE145:
 1585              		.cfi_endproc
 1586              	.LFE1057:
 1587              		.fnend
 1589              		.section	.text._GLOBAL__sub_I_motor,"ax",%progbits
 1590              		.align	1
 1591              		.syntax unified
 1592              		.code	16
 1593              		.thumb_func
 1595              	_GLOBAL__sub_I_motor:
 1596              		.fnstart
 1597              	.LFB1063:
 1598              		.loc 1 239 1 is_stmt 1 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602 0000 10B5     		push	{r4, lr}
 1603              	.LCFI7:
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 4, -8
 1606              		.cfi_offset 14, -4
 1607              		.loc 1 239 1 is_stmt 0 view .LVU451
 1608 0002 0249     		ldr	r1, .L74
 1609 0004 0120     		movs	r0, #1
 1610 0006 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 1611              	.LVL154:
 1612              		@ sp needed
 1613 000a 10BD     		pop	{r4, pc}
 1614              	.L75:
 1615              		.align	2
 1616              	.L74:
 1617 000c FFFF0000 		.word	65535
 1618              		.cfi_endproc
 1619              	.LFE1063:
 1620              		.cantunwind
 1621              		.fnend
 1623              		.section	.init_array,"aw",%init_array
 1624              		.align	2
 1625 0000 00000000 		.word	_GLOBAL__sub_I_motor(target1)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 184


 1626              		.global	boardConfig
 1627              		.global	motor
 1628              		.section	.rodata
 1629              		.align	2
 1630              		.set	.LANCHOR2,. + 0
 1631              	.LC0:
 1632 0000 01       		.byte	1
 1633 0001 0C       		.byte	12
 1634 0002 0000     		.space	2
 1635 0004 0000B442 		.word	1119092736
 1636 0008 0000003F 		.word	1056964608
 1637 000c 00000000 		.word	0
 1638 0010 FA00     		.short	250
 1639 0012 B80B     		.short	3000
 1640 0014 00000000 		.word	0
 1641 0018 00003443 		.word	1127481344
 1642 001c 00002041 		.word	1092616192
 1643 0020 00000000 		.word	0
 1644 0024 00000000 		.word	0
 1645 0028 00004842 		.word	1112014848
 1646 002c 00       		.byte	0
 1647 002d 000000   		.space	3
 1648              		.section	.bss.boardConfig,"aw",%nobits
 1649              		.align	2
 1650              		.set	.LANCHOR1,. + 0
 1653              	boardConfig:
 1654 0000 00000000 		.space	48
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1655              		.section	.bss.motor,"aw",%nobits
 1656              		.align	2
 1657              		.set	.LANCHOR0,. + 0
 1660              	motor:
 1661 0000 00000000 		.space	88
 1661      00000000 
 1661      00000000 
 1661      00000000 
 1661      00000000 
 1662              		.text
 1663              	.Letext0:
 1664              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1665              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1666              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 1667              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi
 1668              		.file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 1669              		.file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 1670              		.file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 1671              		.file 15 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 1672              		.file 16 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 1673              		.file 17 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1674              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h"
 1675              		.file 19 "Inc/adc.h"
 1676              		.file 20 "Inc/i2c.h"
 1677              		.file 21 "Inc/configurations.h"
 1678              		.file 22 "Inc/stm32f0xx_ll_flash.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 185


 1679              		.file 23 "Inc/random_flash_utils.h"
 1680              		.file 24 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_utils.h"
 1681              		.file 25 "<built-in>"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 186


DEFINED SYMBOLS
                            *ABS*:00000000 user.cpp
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:18     .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:23     .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:65     .text._Z41__static_initialization_and_destruction_0ii:00000014 $d
.ARM.exidx.text._Z41__static_initialization_and_destruction_0ii:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:74     .text.I2C_SlaveDMARxCpltCallback:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:80     .text.I2C_SlaveDMARxCpltCallback:00000000 I2C_SlaveDMARxCpltCallback
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:127    .rodata.I2C_SlaveDMARxCpltCallback:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:766    .text.I2C_SlaveDMARxCpltCallback:000001e0 $d
.ARM.exidx.text.I2C_SlaveDMARxCpltCallback:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:783    .text.TIM14_PeriodElapsedCallback:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:789    .text.TIM14_PeriodElapsedCallback:00000000 TIM14_PeriodElapsedCallback
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:909    .text.TIM14_PeriodElapsedCallback:00000084 $d
.ARM.exidx.text.TIM14_PeriodElapsedCallback:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:918    .text._ZN6EEPROM3putI8Config_tEERKT_iS4_:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:924    .text._ZN6EEPROM3putI8Config_tEERKT_iS4_:00000000 _ZN6EEPROM3putI8Config_tEERKT_iS4_
.ARM.exidx.text._ZN6EEPROM3putI8Config_tEERKT_iS4_:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1055   .rodata.Main.str1.4:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1062   .text.Main:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1068   .text.Main:00000000 Main
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1574   .text.Main:00000164 $d
             .ARM.exidx.text.Main:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1590   .text._GLOBAL__sub_I_motor:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1595   .text._GLOBAL__sub_I_motor:00000000 _GLOBAL__sub_I_motor
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1617   .text._GLOBAL__sub_I_motor:0000000c $d
.ARM.exidx.text._GLOBAL__sub_I_motor:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1624   .init_array:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1653   .bss.boardConfig:00000000 boardConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1660   .bss.motor:00000000 motor
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1629   .rodata:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1649   .bss.boardConfig:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s:1656   .bss.motor:00000000 $d

UNDEFINED SYMBOLS
_ZN5Motor9SetEnableEb
Slave_Transmit
_ZN5Motor14SetTorqueLimitEf
Set_ID
i2cDataRx
i2cDataTx
__aeabi_unwind_cpp_pr0
__aeabi_fsub
__aeabi_ui2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_f2iz
_ZN5Motor13CalcDceOutputEff
_ZN5Motor6SetPwmEs
adcData
eeprom_buffer_fill
eeprom_buffered_write_byte
eeprom_buffer_flush
eeprom_buffered_read_byte
puts
MY_I2C1_Init
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccGJvVtg.s 			page 187


LL_mDelay
