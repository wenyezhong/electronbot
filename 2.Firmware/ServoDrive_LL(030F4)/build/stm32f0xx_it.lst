ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f0xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB884:
  26              		.file 1 "Src/stm32f0xx_it.c"
   1:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f0xx_it.c **** /**
   3:Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Src/stm32f0xx_it.c ****   * @attention
   8:Src/stm32f0xx_it.c ****   *
   9:Src/stm32f0xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Src/stm32f0xx_it.c ****   * All rights reserved.
  11:Src/stm32f0xx_it.c ****   *
  12:Src/stm32f0xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/stm32f0xx_it.c ****   * in the root directory of this software component.
  14:Src/stm32f0xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/stm32f0xx_it.c ****   *
  16:Src/stm32f0xx_it.c ****   ******************************************************************************
  17:Src/stm32f0xx_it.c ****   */
  18:Src/stm32f0xx_it.c **** /* USER CODE END Header */
  19:Src/stm32f0xx_it.c **** 
  20:Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Src/stm32f0xx_it.c **** #include "main.h"
  22:Src/stm32f0xx_it.c **** #include "tim.h"
  23:Src/stm32f0xx_it.c **** #include "i2c.h"
  24:Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  25:Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  26:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  27:Src/stm32f0xx_it.c **** //#include <stdio.h>
  28:Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  29:Src/stm32f0xx_it.c **** 
  30:Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  31:Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  32:Src/stm32f0xx_it.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 2


  33:Src/stm32f0xx_it.c **** /* USER CODE END TD */
  34:Src/stm32f0xx_it.c **** 
  35:Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  37:Src/stm32f0xx_it.c **** 
  38:Src/stm32f0xx_it.c **** /* USER CODE END PD */
  39:Src/stm32f0xx_it.c **** 
  40:Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  42:Src/stm32f0xx_it.c **** 
  43:Src/stm32f0xx_it.c **** /* USER CODE END PM */
  44:Src/stm32f0xx_it.c **** 
  45:Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  47:Src/stm32f0xx_it.c **** 
  48:Src/stm32f0xx_it.c **** /* USER CODE END PV */
  49:Src/stm32f0xx_it.c **** 
  50:Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  51:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  52:Src/stm32f0xx_it.c **** 
  53:Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  54:Src/stm32f0xx_it.c **** 
  55:Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  56:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  57:Src/stm32f0xx_it.c **** 
  58:Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  59:Src/stm32f0xx_it.c **** 
  60:Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  61:Src/stm32f0xx_it.c **** 
  62:Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  63:Src/stm32f0xx_it.c **** /* extern void TIM14_PeriodElapsedCallback(void);
  64:Src/stm32f0xx_it.c **** extern uint16_t adcData[4]; */
  65:Src/stm32f0xx_it.c **** /* USER CODE END EV */
  66:Src/stm32f0xx_it.c **** 
  67:Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */
  69:Src/stm32f0xx_it.c **** /******************************************************************************/
  70:Src/stm32f0xx_it.c **** /**
  71:Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Src/stm32f0xx_it.c ****   */
  73:Src/stm32f0xx_it.c **** void NMI_Handler(void)
  74:Src/stm32f0xx_it.c **** {
  27              		.loc 1 74 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  75:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Src/stm32f0xx_it.c **** 
  77:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Src/stm32f0xx_it.c ****   while (1)
  34              		.loc 1 79 3 discriminator 1 view .LVU1
  80:Src/stm32f0xx_it.c ****   {
  81:Src/stm32f0xx_it.c ****   }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 3


  35              		.loc 1 81 3 discriminator 1 view .LVU2
  79:Src/stm32f0xx_it.c ****   {
  36              		.loc 1 79 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE884:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.code	16
  46              		.thumb_func
  48              	HardFault_Handler:
  49              	.LFB885:
  82:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Src/stm32f0xx_it.c **** }
  84:Src/stm32f0xx_it.c **** 
  85:Src/stm32f0xx_it.c **** /**
  86:Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Src/stm32f0xx_it.c ****   */
  88:Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  89:Src/stm32f0xx_it.c **** {
  50              		.loc 1 89 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
  90:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Src/stm32f0xx_it.c **** 
  92:Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Src/stm32f0xx_it.c ****   while (1)
  57              		.loc 1 93 3 discriminator 1 view .LVU5
  94:Src/stm32f0xx_it.c ****   {
  95:Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Src/stm32f0xx_it.c ****   }
  58              		.loc 1 97 3 discriminator 1 view .LVU6
  93:Src/stm32f0xx_it.c ****   {
  59              		.loc 1 93 9 discriminator 1 view .LVU7
  60 0000 FEE7     		b	.L4
  61              		.cfi_endproc
  62              	.LFE885:
  64              		.section	.text.SVC_Handler,"ax",%progbits
  65              		.align	1
  66              		.global	SVC_Handler
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  71              	SVC_Handler:
  72              	.LFB886:
  98:Src/stm32f0xx_it.c **** }
  99:Src/stm32f0xx_it.c **** 
 100:Src/stm32f0xx_it.c **** /**
 101:Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 102:Src/stm32f0xx_it.c ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 4


 103:Src/stm32f0xx_it.c **** void SVC_Handler(void)
 104:Src/stm32f0xx_it.c **** {
  73              		.loc 1 104 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
 105:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 106:Src/stm32f0xx_it.c **** 
 107:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 108:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 109:Src/stm32f0xx_it.c **** 
 110:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 111:Src/stm32f0xx_it.c **** }
  78              		.loc 1 111 1 view .LVU9
  79              		@ sp needed
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE886:
  84              		.section	.text.PendSV_Handler,"ax",%progbits
  85              		.align	1
  86              		.global	PendSV_Handler
  87              		.syntax unified
  88              		.code	16
  89              		.thumb_func
  91              	PendSV_Handler:
  92              	.LFB887:
 112:Src/stm32f0xx_it.c **** 
 113:Src/stm32f0xx_it.c **** /**
 114:Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 115:Src/stm32f0xx_it.c ****   */
 116:Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 117:Src/stm32f0xx_it.c **** {
  93              		.loc 1 117 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
 118:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 119:Src/stm32f0xx_it.c **** 
 120:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 121:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 122:Src/stm32f0xx_it.c **** 
 123:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 124:Src/stm32f0xx_it.c **** }
  98              		.loc 1 124 1 view .LVU11
  99              		@ sp needed
 100 0000 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE887:
 104              		.section	.text.SysTick_Handler,"ax",%progbits
 105              		.align	1
 106              		.global	SysTick_Handler
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 111              	SysTick_Handler:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 5


 112              	.LFB888:
 125:Src/stm32f0xx_it.c **** 
 126:Src/stm32f0xx_it.c **** /**
 127:Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 128:Src/stm32f0xx_it.c ****   */
 129:Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 130:Src/stm32f0xx_it.c **** {
 113              		.loc 1 130 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 131:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 132:Src/stm32f0xx_it.c **** 
 133:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 134:Src/stm32f0xx_it.c **** 
 135:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 136:Src/stm32f0xx_it.c **** 
 137:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 138:Src/stm32f0xx_it.c **** }
 118              		.loc 1 138 1 view .LVU13
 119              		@ sp needed
 120 0000 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE888:
 124              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 125              		.align	1
 126              		.global	DMA1_Channel1_IRQHandler
 127              		.syntax unified
 128              		.code	16
 129              		.thumb_func
 131              	DMA1_Channel1_IRQHandler:
 132              	.LFB889:
 139:Src/stm32f0xx_it.c **** 
 140:Src/stm32f0xx_it.c **** /******************************************************************************/
 141:Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 142:Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 143:Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 144:Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 145:Src/stm32f0xx_it.c **** /******************************************************************************/
 146:Src/stm32f0xx_it.c **** 
 147:Src/stm32f0xx_it.c **** /**
 148:Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 1 interrupt.
 149:Src/stm32f0xx_it.c ****   */
 150:Src/stm32f0xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 151:Src/stm32f0xx_it.c **** {
 133              		.loc 1 151 1 view -0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 152:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 153:Src/stm32f0xx_it.c ****     LL_DMA_ClearFlag_TC1(DMA1);  
 138              		.loc 1 153 5 view .LVU15
 139              	.LVL0:
 140              	.LBB22:
 141              	.LBI22:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 6


 142              		.file 2 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @file    stm32f0xx_ll_dma.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #ifndef __STM32F0xx_LL_DMA_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __STM32F0xx_LL_DMA_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /*DMA1_Channel6*/
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 7


  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /*DMA1_Channel7*/
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** };
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Constants DMA Private Constants
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Define used to get CSELR register offset */
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define DMA_CSELR_OFFSET                  (uint32_t)(DMA1_CSELR_BASE - DMA1_BASE)
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Defines used for the bit position in the register and perform offsets */
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define DMA_POSITION_CSELR_CXS            ((Channel-1U)*4U)
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** typedef struct
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 8


 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         is incremented or not.
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         is incremented or not.
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if (defined(DMA1_CSELR_DEFAULT)||defined(DMA2_CSELR_DEFAULT))
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t PeriphRequest;          /*!< Specifies the peripheral request.
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_REQUEST
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 9


 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 10


 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000001U /*!< DMA Channel 1 */
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000002U /*!< DMA Channel 2 */
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000003U /*!< DMA Channel 3 */
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000004U /*!< DMA Channel 4 */
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000005U /*!< DMA Channel 5 */
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000006U /*!< DMA Channel 6 */
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000007U /*!< DMA Channel 7 */
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 11


 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 12


 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if (defined(DMA1_CSELR_DEFAULT)||defined(DMA2_CSELR_DEFAULT))
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_REQUEST Transfer peripheral request
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_0                  0x00000000U /*!< DMA peripheral request 0  */
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_1                  0x00000001U /*!< DMA peripheral request 1  */
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_2                  0x00000002U /*!< DMA peripheral request 2  */
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_3                  0x00000003U /*!< DMA peripheral request 3  */
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_4                  0x00000004U /*!< DMA peripheral request 4  */
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_5                  0x00000005U /*!< DMA peripheral request 5  */
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_6                  0x00000006U /*!< DMA peripheral request 6  */
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_7                  0x00000007U /*!< DMA peripheral request 7  */
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_8                  0x00000008U /*!< DMA peripheral request 8  */
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_9                  0x00000009U /*!< DMA peripheral request 9  */
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_10                 0x0000000AU /*!< DMA peripheral request 10 */
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_11                 0x0000000BU /*!< DMA peripheral request 11 */
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_12                 0x0000000CU /*!< DMA peripheral request 12 */
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_13                 0x0000000DU /*!< DMA peripheral request 13 */
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_14                 0x0000000EU /*!< DMA peripheral request 14 */
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_REQUEST_15                 0x0000000FU /*!< DMA peripheral request 15 */
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Write a value in DMA register
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __REG__ Register to be written
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Read a value in DMA register
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 13


 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __REG__ Register to be read
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Register value
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval DMAx
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA2)
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ?  DMA2 : DMA1)
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA2)
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : \
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 14


 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA1_Channel6) && defined (DMA1_Channel7)
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #elif defined (DMA1_Channel6)
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  LL_DMA_CHANNEL_6)
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  LL_DMA_CHANNEL_5)
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /* DMA1_Channel6 && DMA1_Channel7 */
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval DMAx_Channely
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA2)
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  DMA2_Channel7)
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 15


 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  DMA1_Channel7)
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined (DMA1_Channel6) && defined (DMA1_Channel7)
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  DMA1_Channel7)
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #elif defined (DMA1_Channel6)
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  DMA1_Channel6)
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #else
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  DMA1_Channel5)
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif /* DMA1_Channel6 && DMA1_Channel7 */
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  * @{
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****  */
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 16


 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Enable DMA channel.
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))-
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Disable DMA channel.
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_EN) == (DMA_CCR_EN));
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 17


 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              Configuration);
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 18


 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              Mode);
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 19


 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_CIRC));
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 20


 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_PINC));
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_MINC));
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Peripheral size.
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 21


 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Peripheral size.
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Memory size.
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 22


 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Memory size.
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Channel priority level.
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              Priority);
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 23


 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel priority level.
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CCR_PL));
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set Number of data to transfer.
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This action has no effect if
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         channel is enabled.
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Number of data to transfer.
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Once the channel is enabled, the return value indicate the
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         remaining bytes to be transmitted.
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 24


1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CNDTR_NDT));
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Configure the Source and Destination addresses.
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Each IP using DMA provides an API to get directly the register adress (LL_PPP_DMA_GetRe
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CMAR         MA            LL_DMA_ConfigAddresses
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddres
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                                             uint32_t DstAddress, uint32_t Direction)
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   /* Direction Memory to Periph */
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   {
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   }
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   else
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   {
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   }
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set the Memory address.
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 25


1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAd
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Memory address.
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 26


1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Peripheral address.
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 27


1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if (defined(DMA1_CSELR_DEFAULT)||defined(DMA2_CSELR_DEFAULT))
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Set DMA request for DMA instance on Channel x.
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note   Please refer to Reference Manual to get the available mapping of Request value link to 
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_SetPeriphRequest\n
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_SetPeriphRequest\n
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_SetPeriphRequest\n
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_SetPeriphRequest\n
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_SetPeriphRequest\n
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 28


1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_SetPeriphRequest\n
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_SetPeriphRequest
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  PeriphRequest This parameter can be one of the following values:
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_0
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_1
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_2
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_3
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_4
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_5
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_6
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_7
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_8
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_9
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_10
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_11
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_12
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_13
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_14
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_15
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRe
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   MODIFY_REG(DMAx->CSELR,
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CSELR_C1S << ((Channel - 1U) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get DMA request for DMA instance on Channel x.
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_GetPeriphRequest\n
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_GetPeriphRequest\n
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_GetPeriphRequest\n
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_GetPeriphRequest\n
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_GetPeriphRequest\n
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_GetPeriphRequest\n
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_GetPeriphRequest
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_0
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 29


1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_2
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_3
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_4
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_5
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_6
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_7
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_8
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_9
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_10
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_11
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_12
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_13
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_14
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   *         @arg @ref LL_DMA_REQUEST_15
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel)
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->CSELR,
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****                    DMA_CSELR_C1S << ((Channel - 1U) * 4U)) >> DMA_POSITION_CSELR_CXS);
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @}
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @{
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 1 global interrupt flag.
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF1          LL_DMA_IsActiveFlag_GI1
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1));
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 2 global interrupt flag.
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF2          LL_DMA_IsActiveFlag_GI2
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2));
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 3 global interrupt flag.
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF3          LL_DMA_IsActiveFlag_GI3
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 30


1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3));
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 4 global interrupt flag.
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF4          LL_DMA_IsActiveFlag_GI4
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4));
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 5 global interrupt flag.
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF5          LL_DMA_IsActiveFlag_GI5
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5));
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 6 global interrupt flag.
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF6          LL_DMA_IsActiveFlag_GI6
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6));
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 7 global interrupt flag.
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          GIF7          LL_DMA_IsActiveFlag_GI7
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7));
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 1 transfer complete flag.
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 31


1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 2 transfer complete flag.
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 3 transfer complete flag.
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 4 transfer complete flag.
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 5 transfer complete flag.
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 6 transfer complete flag.
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 32


1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 7 transfer complete flag.
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 1 half transfer flag.
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 2 half transfer flag.
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF2         LL_DMA_IsActiveFlag_HT2
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2));
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 3 half transfer flag.
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 4 half transfer flag.
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF4         LL_DMA_IsActiveFlag_HT4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 33


1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4));
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 5 half transfer flag.
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 6 half transfer flag.
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 7 half transfer flag.
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 1 transfer error flag.
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 34


1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 2 transfer error flag.
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 3 transfer error flag.
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 4 transfer error flag.
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 5 transfer error flag.
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 6 transfer error flag.
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6));
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 35


1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Get Channel 7 transfer error flag.
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7));
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 1 global interrupt flag.
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 1 global interrupt flag when the channel in ON.
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC1, LL_DMA_ClearFlag_HT1,
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE1. bug id 2.4.1 in Product Errata Sheet.
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 2 global interrupt flag.
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 2 global interrupt flag when the channel in ON.
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC2, LL_DMA_ClearFlag_HT2,
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE2. bug id 2.4.1 in Product Errata Sheet.
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 3 global interrupt flag.
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 3 global interrupt flag when the channel in ON.
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC3, LL_DMA_ClearFlag_HT3,
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE3. bug id 2.4.1 in Product Errata Sheet.
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 36


1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 4 global interrupt flag.
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 4 global interrupt flag when the channel in ON.
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC4, LL_DMA_ClearFlag_HT4,
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE4. bug id 2.4.1 in Product Errata Sheet.
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 5 global interrupt flag.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 5 global interrupt flag when the channel in ON.
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC5, LL_DMA_ClearFlag_HT5,
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE5. bug id 2.4.1 in Product Errata Sheet.
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel6)
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 6 global interrupt flag.
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 6 global interrupt flag when the channel in ON.
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC6, LL_DMA_ClearFlag_HT6,
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE6. bug id 2.4.1 in Product Errata Sheet.
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #if defined(DMA1_Channel7)
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 7 global interrupt flag.
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @note Do not Clear Channel 7 global interrupt flag when the channel in ON.
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC7, LL_DMA_ClearFlag_HT7,
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****     LL_DMA_ClearFlag_TE7. bug id 2.4.1 in Product Errata Sheet.
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 37


1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** #endif
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 1  transfer complete flag.
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
 143              		.loc 2 1780 22 view .LVU16
 144              	.LBB23:
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 145              		.loc 2 1782 3 view .LVU17
 146 0000 014B     		ldr	r3, .L9
 147 0002 0222     		movs	r2, #2
 148 0004 5A60     		str	r2, [r3, #4]
 149              	.LVL1:
 150              		.loc 2 1782 3 is_stmt 0 view .LVU18
 151              	.LBE23:
 152              	.LBE22:
 154:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 155:Src/stm32f0xx_it.c **** 
 156:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 157:Src/stm32f0xx_it.c ****   //printf("adc=%d\r\n",adcData[0]);
 158:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 159:Src/stm32f0xx_it.c **** }
 153              		.loc 1 159 1 view .LVU19
 154              		@ sp needed
 155 0006 7047     		bx	lr
 156              	.L10:
 157              		.align	2
 158              	.L9:
 159 0008 00000240 		.word	1073872896
 160              		.cfi_endproc
 161              	.LFE889:
 163              		.section	.text.DMA1_Channel2_3_IRQHandler,"ax",%progbits
 164              		.align	1
 165              		.global	DMA1_Channel2_3_IRQHandler
 166              		.syntax unified
 167              		.code	16
 168              		.thumb_func
 170              	DMA1_Channel2_3_IRQHandler:
 171              	.LFB890:
 160:Src/stm32f0xx_it.c **** 
 161:Src/stm32f0xx_it.c **** /**
 162:Src/stm32f0xx_it.c ****   * @brief This function handles DMA1 channel 2 and 3 interrupts.
 163:Src/stm32f0xx_it.c ****   */
 164:Src/stm32f0xx_it.c **** void DMA1_Channel2_3_IRQHandler(void)
 165:Src/stm32f0xx_it.c **** {
 172              		.loc 1 165 1 is_stmt 1 view -0
 173              		.cfi_startproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 38


 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176 0000 10B5     		push	{r4, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 4, -8
 180              		.cfi_offset 14, -4
 166:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
 167:Src/stm32f0xx_it.c ****   if(LL_DMA_IsActiveFlag_TC3(DMA1))
 181              		.loc 1 167 3 view .LVU21
 182              	.LVL2:
 183              	.LBB24:
 184              	.LBI24:
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 185              		.loc 2 1450 26 view .LVU22
 186              	.LBB25:
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 187              		.loc 2 1452 3 view .LVU23
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 188              		.loc 2 1452 11 is_stmt 0 view .LVU24
 189 0002 0B4B     		ldr	r3, .L14
 190 0004 1B68     		ldr	r3, [r3]
 191              	.LVL3:
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 192              		.loc 2 1452 11 view .LVU25
 193              	.LBE25:
 194              	.LBE24:
 195              		.loc 1 167 5 view .LVU26
 196 0006 9B05     		lsls	r3, r3, #22
 197 0008 00D4     		bmi	.L13
 198              	.L11:
 168:Src/stm32f0xx_it.c ****     {
 169:Src/stm32f0xx_it.c ****         //LL_DMA_ClearFlag_GI3(DMA1);
 170:Src/stm32f0xx_it.c ****         LL_DMA_ClearFlag_TC3(DMA1);
 171:Src/stm32f0xx_it.c ****         
 172:Src/stm32f0xx_it.c ****         I2C_SlaveDMARxCpltCallback();  
 173:Src/stm32f0xx_it.c ****         LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 174:Src/stm32f0xx_it.c ****         LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,5);      
 175:Src/stm32f0xx_it.c ****     }
 176:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 0 */
 177:Src/stm32f0xx_it.c **** 
 178:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
 179:Src/stm32f0xx_it.c **** 
 180:Src/stm32f0xx_it.c ****   /* USER CODE END DMA1_Channel2_3_IRQn 1 */
 181:Src/stm32f0xx_it.c **** }
 199              		.loc 1 181 1 view .LVU27
 200              		@ sp needed
 201 000a 10BD     		pop	{r4, pc}
 202              	.L13:
 170:Src/stm32f0xx_it.c ****         
 203              		.loc 1 170 9 is_stmt 1 view .LVU28
 204              	.LVL4:
 205              	.LBB26:
 206              	.LBI26:
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 39


1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 2  transfer complete flag.
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** 
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** /**
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @brief  Clear Channel 3  transfer complete flag.
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   * @retval None
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   */
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
 207              		.loc 2 1802 22 view .LVU29
 208              	.LBB27:
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 209              		.loc 2 1804 3 view .LVU30
 210 000c 084B     		ldr	r3, .L14
 211 000e 8022     		movs	r2, #128
 212 0010 9200     		lsls	r2, r2, #2
 213 0012 5A60     		str	r2, [r3, #4]
 214              	.LVL5:
 215              		.loc 2 1804 3 is_stmt 0 view .LVU31
 216              	.LBE27:
 217              	.LBE26:
 172:Src/stm32f0xx_it.c ****         LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 218              		.loc 1 172 9 is_stmt 1 view .LVU32
 219 0014 FFF7FEFF 		bl	I2C_SlaveDMARxCpltCallback
 220              	.LVL6:
 173:Src/stm32f0xx_it.c ****         LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,5);      
 221              		.loc 1 173 9 view .LVU33
 222              	.LBB28:
 223              	.LBI28:
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 224              		.loc 2 602 22 view .LVU34
 225              	.LBB29:
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 226              		.loc 2 604 3 view .LVU35
 227 0018 064A     		ldr	r2, .L14+4
 228 001a 1368     		ldr	r3, [r2]
 229 001c 0121     		movs	r1, #1
 230 001e 8B43     		bics	r3, r1
 231 0020 1360     		str	r3, [r2]
 232              	.LVL7:
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 233              		.loc 2 604 3 is_stmt 0 view .LVU36
 234              	.LBE29:
 235              	.LBE28:
 174:Src/stm32f0xx_it.c ****     }
 236              		.loc 1 174 9 is_stmt 1 view .LVU37
 237              	.LBB30:
 238              	.LBI30:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 40


1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 239              		.loc 2 1009 22 view .LVU38
 240              	.LBB31:
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 241              		.loc 2 1011 3 view .LVU39
 242 0022 5368     		ldr	r3, [r2, #4]
 243 0024 1B0C     		lsrs	r3, r3, #16
 244 0026 1B04     		lsls	r3, r3, #16
 245 0028 0431     		adds	r1, r1, #4
 246 002a 0B43     		orrs	r3, r1
 247 002c 5360     		str	r3, [r2, #4]
 248              	.LVL8:
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 249              		.loc 2 1011 3 is_stmt 0 view .LVU40
 250              	.LBE31:
 251              	.LBE30:
 252              		.loc 1 181 1 view .LVU41
 253 002e ECE7     		b	.L11
 254              	.L15:
 255              		.align	2
 256              	.L14:
 257 0030 00000240 		.word	1073872896
 258 0034 30000240 		.word	1073872944
 259              		.cfi_endproc
 260              	.LFE890:
 262              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 263              		.align	1
 264              		.global	TIM14_IRQHandler
 265              		.syntax unified
 266              		.code	16
 267              		.thumb_func
 269              	TIM14_IRQHandler:
 270              	.LFB891:
 182:Src/stm32f0xx_it.c **** 
 183:Src/stm32f0xx_it.c **** /**
 184:Src/stm32f0xx_it.c ****   * @brief This function handles TIM14 global interrupt.
 185:Src/stm32f0xx_it.c ****   */
 186:Src/stm32f0xx_it.c **** void TIM14_IRQHandler(void)
 187:Src/stm32f0xx_it.c **** {
 271              		.loc 1 187 1 is_stmt 1 view -0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275 0000 10B5     		push	{r4, lr}
 276              	.LCFI1:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 188:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM14_IRQn 0 */
 189:Src/stm32f0xx_it.c ****   LL_TIM_ClearFlag_UPDATE(TIM14);
 280              		.loc 1 189 3 view .LVU43
 281              	.LVL9:
 282              	.LBB32:
 283              	.LBI32:
 284              		.file 3 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 41


   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @file    stm32f0xx_ll_tim.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifndef __STM32F0xx_LL_TIM_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __STM32F0xx_LL_TIM_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined (TIM1) || defined (TIM2) || defined (TIM3) || defined (TIM14) || defined (TIM15) || def
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 1: TIMx_CH1N */
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 3: TIMx_CH2N */
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 5: TIMx_CH3N */
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U    /* 6: TIMx_CH4  */
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 42


  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: OC4M, OC4FE, OC4PE */
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: CC4S, IC4PSC, IC4F */
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1P */
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 1: CC1NP */
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 2: CC2P */
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U,            /* 3: CC2NP */
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 4: CC3P */
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   10U,           /* 5: CC3NP */
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   12U            /* 6: CC4P */
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OISx[] =
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OIS1 */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   1U,            /* 1: OIS1N */
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 2: OIS2 */
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   3U,            /* 3: OIS2N */
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 4: OIS3 */
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   5U,            /* 5: OIS3N */
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U             /* 6: OIS4 */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_SHIFT  16U
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_MASK   0x0000FFFFU
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM14_OR_RMP_MASK  (TIM14_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the TDG[x:0] of the DTG bits of the TIMx_BDTR register */
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_1 ((uint8_t)0x7F)
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_2 ((uint8_t)0x3F)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 43


 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_3 ((uint8_t)0x1F)
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_4 ((uint8_t)0x1F)
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the DTG[7:5] bits of the DTG bits of the TIMx_BDTR register */
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_1 ((uint8_t)0x00)
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_2 ((uint8_t)0x80)
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_3 ((uint8_t)0xC0)
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_4 ((uint8_t)0xE0)
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Calculate the deadtime sampling period(in ps).
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz).
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_CALC_DTS(__TIMCLK__, __CKD__)                                                        \
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__))         : \
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : \
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 44


 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetPrescaler().*/
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetCounterMode().*/
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    be a number between 0x0000 and 0xFFFFFFFF.
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetAutoReload().*/
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetClockDivision().*/
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downc
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    reaches zero, an update event is generated and counting restarts
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    from the RCR value (N).
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This means in PWM mode that (N+1) corresponds to:
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of PWM periods in edge-aligned mode
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of half PWM period in center-aligned mode
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    GP timers: this parameter must be a number between Min_Data = 0x
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Max_Data = 0xFF.
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Advanced timers: this parameter must be a number between Min_Dat
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Max_Data = 0xFFFF.
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    @ref LL_TIM_SetRepetitionCounter().*/
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 45


 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetMode().*/
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNState;      /*!< Specifies the TIM complementary Output Compare state.
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                LL_TIM_OC_SetCompareCHx (x=1..6).*/
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 46


 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPolarity().*/
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetActiveInput().*/
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPrescaler().*/
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                @ref LL_TIM_IC_SetFilter().*/
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_SetEncoderMode().*/
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 47


 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Hall sensor interface configuration structure definition.
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;        /*!< Specifies the active edge of TI1 input.
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPolarity().*/
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;       /*!< Specifies the TI1 input prescaler value.
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     Prescaler must be set to get a maximum counter period longer th
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     time interval between 2 consecutive changes on the Hall inputs.
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPrescaler().*/
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;          /*!< Specifies the TI1 input filter.
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref TIM_LL_EC_IC_FILTER.
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetFilter().*/
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CommutationDelay;   /*!< Specifies the compare value to be loaded into the Capture Compa
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     A positive pulse (TRGO event) is generated with a programmable 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 48


 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     a change occurs on the Hall inputs.
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a number between Min_Data = 0x0000 and Ma
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     @ref LL_TIM_OC_SetCompareCH2().*/
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_HALLSENSOR_InitTypeDef;
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  BDTR (Break and Dead Time) structure definition
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSRState;            /*!< Specifies the Off-State selection used in Run mode.
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSR
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                        programmed. */
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSIState;            /*!< Specifies the Off-State used in Idle state.
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSI
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t LockLevel;            /*!< Specifies the LOCK level parameters.
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_LOCKLEVEL
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note The LOCK bits can be written only once after the reset.
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       register has been written, their content is frozen until the 
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t DeadTime;              /*!< Specifies the delay time between the switching-off and the
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       switching-on of the outputs.
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a number between Min_Data = 0x00 and Ma
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_OC_SetDeadTime()
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                        programmed. */
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t BreakState;           /*!< Specifies whether the TIM Break input is enabled or not.
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_ENABLE
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_EnableBRK() or @ref LL_TIM_DisableBRK()
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t BreakPolarity;        /*!< Specifies the TIM Break Input pin polarity.
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_POLARIT
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 49


 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_ConfigBRK()
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t AutomaticOutput;      /*!< Specifies whether the TIM Automatic Output feature is enabled
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_AUTOMATICOUTP
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @ref LL_TIM_EnableAutomaticOutput() or @ref LL_TIM_DisableAut
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       programmed. */
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_BDTR_InitTypeDef;
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_COMIF                        TIM_SR_COMIF         /*!< COM interrupt flag */
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_BIF                          TIM_SR_BIF           /*!< Break interrupt flag */
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_ENABLE Break Enable
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_DISABLE            0x00000000U             /*!< Break function disabled */
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_ENABLE             TIM_BDTR_BKE            /*!< Break function enabled */
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 50


 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_AUTOMATICOUTPUT_ENABLE Automatic output enable
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_DISABLE         0x00000000U             /*!< MOE can be set only by 
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_ENABLE          TIM_BDTR_AOE            /*!< MOE can be set by softw
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_COMIE                      TIM_DIER_COMIE       /*!< COM interrupt enable */
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_BIE                        TIM_DIER_BIE         /*!< Break interrupt enable */
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter stops counting at 
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter is not stopped at 
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_0        /*!< The counter counts up and 
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_1        /*!<The counter counts up and d
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 51


 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCUPDATESOURCE Capture Compare  Update Source
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_ONLY        0x00000000U          /*!< Capture/compare control bi
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI    TIM_CR2_CCUS         /*!< Capture/compare control bi
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_LOCKLEVEL Lock Level
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_OFF                   0x00000000U          /*!< LOCK OFF - No bit is write
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_1                     TIM_BDTR_LOCK_0      /*!< LOCK Level 1 */
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_2                     TIM_BDTR_LOCK_1      /*!< LOCK Level 2 */
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_3                     TIM_BDTR_LOCK        /*!< LOCK Level 3 */
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 52


 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCIDLESTATE Output Configuration Idle State
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_LOW                 0x00000000U             /*!<OCx=0 (after a dead-time
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_HIGH                TIM_CR2_OIS1            /*!<OCx=1 (after a dead-time
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 53


 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                    /*!< No prescaler, ca
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_BOTHEDGE            (TIM_CCER_CC1P | TIM_CCER_CC1NP) /*!< The circuit is
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 54


 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1                     TIM_SMCR_SMS_0                               
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2                     TIM_SMCR_SMS_1                               
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12                   (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)             
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                         
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                       
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                       
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                     
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                       
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                     
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                     
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)     
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 55


 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_POLARITY break polarity
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_LOW              0x00000000U               /*!< Break input BRK is ac
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_HIGH             TIM_BDTR_BKP              /*!< Break input BRK is ac
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSI OSSI
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_ENABLE                     TIM_BDTR_OSSI           /*!< When inactive, OxC/OCxN
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 56


 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSR OSSR
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_ENABLE                     TIM_BDTR_OSSR           /*!< When inactive, OC/OCN o
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_RCR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)                     
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_BDTR          (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)                     
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 57


 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_GPIO     TIM14_OR_RMP_MASK                                            
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_RTC_CLK  (TIM14_OR_TI1_RMP_0  | TIM14_OR_RMP_MASK)                    
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_HSE      (TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MASK)                    
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_MCO      (TIM14_OR_TI1_RMP_0  | TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MAS
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCREF_CLR_INT OCREF clear input selection
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_OCREF_CLR     0x00000000U         /*!< OCREF_CLR_INT is connected to t
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_ETR           TIM_SMCR_OCCS       /*!< OCREF_CLR_INT is connected to E
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Write a value in TIM register.
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be written
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VAL
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Read a value in TIM register.
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be read
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Register value
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_Exported_Macros Exported_Macros
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 58


 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating DTG[0:7] in the TIMx_BDTR register to achieve the requested de
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DEADTIME (80000000, @ref LL_TIM_GetClockDivision (), 120);
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DT__ deadtime duration (in ns)
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval DTG[0:7]
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DEADTIME(__TIMCLK__, __CKD__, __DT__)  \
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__))))    ?
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__)))  & DT_DELAY_1) :
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__C
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_2 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) 
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__C
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_3 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) 
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (uint8_t)(DT_RANGE_4 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                                  (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) 
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     0U)
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         active/inactive delay.
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 59


1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (when the timer operates in one pulse mode).
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable timer counter.
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 60


1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable timer counter.
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable update event generation.
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable update event generation.
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Inverted state of bit (0 or 1).
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 61


1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set update event source
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Counter overflow/underflow
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Setting the UG bit
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Update generation through the slave mode controller
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual event update source
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 62


1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       requires a timer reset to avoid unexpected direction
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       due to DIR bit readonly in center aligned mode.
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual counter mode.
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t counter_mode;
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   if (counter_mode == 0U)
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   {
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   }
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return counter_mode;
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 63


1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE)) ? 1UL : 0UL);
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         (when supported) and the digital filters.
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         generators (when supported) and the digital filters.
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 64


1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the counter value.
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the counter value.
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler value.
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 65


1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the prescaler value.
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the auto-reload value.
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the repetition counter value.
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 66


1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->RCR, RepetitionCounter);
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the repetition counter value.
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Repetition counter value
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->RCR));
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       they are updated only when a commutation event (COM) occurs.
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Only on channels that have a complementary output.
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 67


1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CCUpdateSource This parameter can be one of the following values:
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the lock level to freeze the
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         configuration of several capture/compare parameters.
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the lock mechanism is supported by a timer instance.
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  LockLevel This parameter can be one of the following values:
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_OFF
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_1
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_2
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_3
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 68


1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 69


1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure an output channel.
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS4          LL_TIM_OC_ConfigOutput
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 70


1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 71


1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 72


1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the IDLE state of an output channel
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function is significant only for the timer instances
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       supporting the break feature. Macro IS_TIM_BREAK_INSTANCE(TIMx)
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       can be used to check whether or not a timer instance provides
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a break input.
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_SetIdleState
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  IdleState This parameter can be one of the following values:
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iC
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the IDLE state of an output channel
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_GetIdleState
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 73


1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChanne
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 74


1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 75


1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 76


1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal an
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         the Ocx and OCxN signals).
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       dead-time insertion feature is supported by a timer instance.
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 77


2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DeadTime between Min_Data=0 and Max_Data=255
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 3 (TIMx_CCR3).
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel is supported by a timer instance.
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR3, CompareValue);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 78


2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 4 (TIMx_CCR4).
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR4, CompareValue);
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 79


2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 3 is supported by a timer instance.
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure input channel.
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1F          LL_TIM_IC_Config\n
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_Config\n
2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_Config\n
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_Config\n
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_Config\n
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_Config\n
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_Config\n
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_IC_Config\n
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_Config\n
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_Config\n
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_Config\n
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_Config\n
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_Config\n
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_Config\n
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_Config
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 80


2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING or @ref LL_TIM_I
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
2238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChanne
2242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))       
2243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              << SHIFT_TAB_ICxx[iChannel]);
2244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
2246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the active input.
2250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
2251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
2252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
2253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
2254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICActiveInput This parameter can be one of the following values:
2261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiv
2267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT
2271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current active input.
2275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
2276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
2277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
2278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
2279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 81


2283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
2291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler of input channel.
2299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
2300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
2301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
2302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
2303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPrescaler This parameter can be one of the following values:
2310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescal
2317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT
2321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current prescaler value acting on an  input channel.
2325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
2326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
2327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
2328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
2329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 82


2340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
2342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iCha
2346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input filter duration.
2350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
2351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
2352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
2353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_SetFilter
2354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICFilter This parameter can be one of the following values:
2361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
2380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_
2384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the input filter duration.
2388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
2389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
2390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
2391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_GetFilter
2392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 83


2397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
2417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input channel polarity.
2425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
2426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
2427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
2428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
2429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
2430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
2431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
2432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_SetPolarity
2433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPolarity This parameter can be one of the following values:
2440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity
2446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ICPolarity << SHIFT_TAB_CCxP[iChannel]);
2450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current input channel polarity.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 84


2454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
2455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
2456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
2457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
2458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
2459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
2460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
2461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_GetPolarity
2462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
2474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
2477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****           SHIFT_TAB_CCxP[iChannel]);
2478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
2482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
2485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
2489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
2491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
2495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
2498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
2502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
2504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
2508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance provides an XOR input.
2510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 85


2511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
2515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S)) ? 1UL : 0UL);
2517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 1.
2521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 1 is supported by a timer instance.
2526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
2527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
2531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 2.
2537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 2 is supported by a timer instance.
2542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
2543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
2547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 3.
2553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 3 is supported by a timer instance.
2558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
2559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
2563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 86


2568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 4.
2569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 4 is supported by a timer instance.
2574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
2575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
2579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
2588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable external clock mode 2.
2592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ET
2593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
2596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
2600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable external clock mode 2.
2606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
2609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
2613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether external clock mode 2 is enabled.
2619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
2622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 87


2625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
2626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE)) ? 1UL : 0UL);
2628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the clock source of the counter clock.
2632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note when selected clock source is external clock mode 1, the timer input
2633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
2634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       function. This timer input must be configured by calling
2635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the @ref LL_TIM_IC_Config() function.
2636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
2637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode1.
2638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
2641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ECE           LL_TIM_SetClockSource
2642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockSource This parameter can be one of the following values:
2644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
2645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
2646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
2647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
2650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
2652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the encoder interface mode.
2656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
2657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports the encoder mode.
2658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
2659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  EncoderMode This parameter can be one of the following values:
2661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
2662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
2663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
2664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
2667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
2669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
2676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger output (TRGO) used for timer synchronization .
2680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
2681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance can operate as a master timer.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 88


2682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
2683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TimerSynchronization This parameter can be one of the following values:
2685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_RESET
2686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_ENABLE
2687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_UPDATE
2688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_CC1IF
2689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC1REF
2690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC2REF
2691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC3REF
2692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC4REF
2693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
2696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
2698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the synchronization mode of a slave timer.
2702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
2705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  SlaveMode This parameter can be one of the following values:
2707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
2708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_RESET
2709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_GATED
2710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
2711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
2714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
2716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the selects the trigger input to be used to synchronize the counter.
2720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
2723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TriggerInput This parameter can be one of the following values:
2725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR0
2726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR1
2727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR2
2728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR3
2729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1F_ED
2730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1FP1
2731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI2FP2
2732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ETRF
2733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
2736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
2738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 89


2739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the Master/Slave mode.
2742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
2745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
2749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the Master/Slave mode.
2755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
2758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
2762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief Indicates whether the Master/Slave mode is enabled.
2768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance can operate as a slave timer.
2770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
2771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
2775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM)) ? 1UL : 0UL);
2777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the external trigger (ETR) input.
2781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
2782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an external trigger input.
2783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
2784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETPS          LL_TIM_ConfigETR\n
2785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETF           LL_TIM_ConfigETR
2786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPolarity This parameter can be one of the following values:
2788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
2789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
2790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPrescaler This parameter can be one of the following values:
2791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
2792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
2793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
2794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
2795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRFilter This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 90


2796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
2797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
2798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
2799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
2800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
2801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
2802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
2803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
2804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
2805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
2806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
2807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
2808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
2809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
2810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
2811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
2812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescale
2815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       uint32_t ETRFilter)
2816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | 
2818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Break_Function Break function configuration
2825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the break function.
2829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
2832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
2836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the break function.
2846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
2847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 91


2853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the break input.
2863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
2866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  BreakPolarity This parameter can be one of the following values:
2868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
2869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
2870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
2873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
2876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to BKP bit takes a delay of 1 APB clock cycle to become effective. *
2877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
2883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
2886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         BDTR         OSSR          LL_TIM_SetOffStates
2887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateIdle This parameter can be one of the following values:
2889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_DISABLE
2890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_ENABLE
2891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateRun This parameter can be one of the following values:
2892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_DISABLE
2893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_ENABLE
2894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStat
2897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
2899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable automatic output (MOE can be set by software or automatically when a break input
2903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
2906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 92


2910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable automatic output (MOE can be set only by software).
2916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
2919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
2923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether automatic output is enabled.
2929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
2932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
2936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE)) ? 1UL : 0UL);
2938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
2942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event
2944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
2947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
2951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
2957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event.
2959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
2962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
2966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 93


2967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether outputs are enabled.
2972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
2975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
2979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE)) ? 1UL : 0UL);
2981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
2988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configures the timer DMA burst feature.
2992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
2993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       not a timer instance supports the DMA burst mode.
2994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
2995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         DCR          DBA           LL_TIM_ConfigDMABurst
2996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstBaseAddress This parameter can be one of the following values:
2998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
2999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
3000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
3001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
3002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
3003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
3004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
3005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
3006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
3007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
3008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
3009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
3010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
3011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
3012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
3013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
3014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
3015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
3016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstLength This parameter can be one of the following values:
3017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
3018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
3019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
3020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
3021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
3022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
3023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 94


3024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
3025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
3026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
3027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
3028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
3029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
3030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
3031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
3032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
3033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
3034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
3035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_
3038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
3040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Inputs_Remapping Timer input remapping
3047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Remap TIM inputs (input channel, internal/external triggers).
3051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REMAP_INSTANCE(TIMx) can be used to check whether or not
3052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a some timer inputs can be remapped.
3053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll TIM14_OR    TI1_RMP           LL_TIM_SetRemap
3054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Remap This parameter can be one of the following values:
3056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_GPIO
3057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_RTC_CLK
3058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_HSE
3059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_MCO
3060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
3061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
3064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
3066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_OCREF_Clear OCREF_Clear_Management
3073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the OCREF clear input source
3077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The OCxREF signal of a given channel can be cleared when a high level is applied on the O
3078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes.
3079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR          OCCS                LL_TIM_SetOCRefClearInputSource
3080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 95


3081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OCRefClearInputSource This parameter can be one of the following values:
3082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_OCREF_CLR
3083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
3084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSou
3087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
3089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
3095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the update interrupt flag (UIF).
3099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
3100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
 285              		.loc 3 3103 22 view .LVU44
 286              	.LBB33:
3104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 287              		.loc 3 3105 3 view .LVU45
 288 0002 034B     		ldr	r3, .L17
 289 0004 0222     		movs	r2, #2
 290 0006 5242     		rsbs	r2, r2, #0
 291 0008 1A61     		str	r2, [r3, #16]
 292              	.LVL10:
 293              		.loc 3 3105 3 is_stmt 0 view .LVU46
 294              	.LBE33:
 295              	.LBE32:
 190:Src/stm32f0xx_it.c ****   TIM14_PeriodElapsedCallback();
 296              		.loc 1 190 3 is_stmt 1 view .LVU47
 297 000a FFF7FEFF 		bl	TIM14_PeriodElapsedCallback
 298              	.LVL11:
 191:Src/stm32f0xx_it.c ****   //printf("t\r\n");
 192:Src/stm32f0xx_it.c ****   /* USER CODE END TIM14_IRQn 0 */
 193:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM14_IRQn 1 */
 194:Src/stm32f0xx_it.c **** 
 195:Src/stm32f0xx_it.c ****   /* USER CODE END TIM14_IRQn 1 */
 196:Src/stm32f0xx_it.c **** }
 299              		.loc 1 196 1 is_stmt 0 view .LVU48
 300              		@ sp needed
 301 000e 10BD     		pop	{r4, pc}
 302              	.L18:
 303              		.align	2
 304              	.L17:
 305 0010 00200040 		.word	1073750016
 306              		.cfi_endproc
 307              	.LFE891:
 309              		.section	.text.I2C1_IRQHandler,"ax",%progbits
 310              		.align	1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 96


 311              		.global	I2C1_IRQHandler
 312              		.syntax unified
 313              		.code	16
 314              		.thumb_func
 316              	I2C1_IRQHandler:
 317              	.LFB892:
 197:Src/stm32f0xx_it.c **** 
 198:Src/stm32f0xx_it.c **** /**
 199:Src/stm32f0xx_it.c ****   * @brief This function handles I2C1 global interrupt.
 200:Src/stm32f0xx_it.c ****   */
 201:Src/stm32f0xx_it.c **** void I2C1_IRQHandler(void)
 202:Src/stm32f0xx_it.c **** {
 318              		.loc 1 202 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 203:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN I2C1_IRQn 0 */
 204:Src/stm32f0xx_it.c ****   if(LL_I2C_IsActiveFlag_ADDR(I2C1))
 323              		.loc 1 204 3 view .LVU50
 324              	.LVL12:
 325              	.LBB34:
 326              	.LBI34:
 327              		.file 4 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @file    stm32f0xx_ll_i2c.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief   Header file of I2C LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #ifndef STM32F0xx_LL_I2C_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define STM32F0xx_LL_I2C_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 97


  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined (I2C1) || defined (I2C2)
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL I2C
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Private_Constants I2C Private Constants
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private macros ------------------------------------------------------------*/
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(USE_FULL_LL_DRIVER)
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Private_Macros I2C Private Macros
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_ES_INIT I2C Exported Init structure
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** typedef struct
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t PeripheralMode;      /*!< Specifies the peripheral mode.
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_PERIPHERAL_MOD
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetMode(). */
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t Timing;              /*!< Specifies the SDA setup, hold time and the SCL high, low perio
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter must be set by referring to the STM32CubeMX Too
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      the helper macro @ref __LL_I2C_CONVERT_TIMINGS().
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetTiming(). */
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t AnalogFilter;        /*!< Enables or disables analog noise filter.
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_ANALOGFILTER_S
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_EnableAnalogFilter() or LL_I2C_DisableAnalogFilter
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t DigitalFilter;       /*!< Configures the digital noise filter.
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a number between Min_Data = 0x00 and Max
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 98


  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetDigitalFilter(). */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t OwnAddress1;         /*!< Specifies the device own address 1.
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter must be a value between Min_Data = 0x00 and Max
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetOwnAddress1(). */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t TypeAcknowledge;     /*!< Specifies the ACKnowledge or Non ACKnowledge condition after t
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      match code or next received byte.
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_I2C_ACKNOWLEDG
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_AcknowledgeNextData(). */
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t OwnAddrSize;         /*!< Specifies the device own address 1 size (7-bit or 10-bit).
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_OWNADDRESS1.
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetOwnAddress1(). */
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** } LL_I2C_InitTypeDef;
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /*USE_FULL_LL_DRIVER*/
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported constants --------------------------------------------------------*/
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Constants I2C Exported Constants
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_CLEAR_FLAG Clear Flags Defines
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    Flags defines which can be used with LL_I2C_WriteReg function
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ADDRCF                   I2C_ICR_ADDRCF          /*!< Address Matched flag   */
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_NACKCF                   I2C_ICR_NACKCF          /*!< Not Acknowledge flag   */
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_STOPCF                   I2C_ICR_STOPCF          /*!< Stop detection flag    */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_BERRCF                   I2C_ICR_BERRCF          /*!< Bus error flag         */
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ARLOCF                   I2C_ICR_ARLOCF          /*!< Arbitration Lost flag  */
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_OVRCF                    I2C_ICR_OVRCF           /*!< Overrun/Underrun flag  */
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_PECCF                    I2C_ICR_PECCF           /*!< PEC error flag         */
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_TIMOUTCF                 I2C_ICR_TIMOUTCF        /*!< Timeout detection flag */
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ALERTCF                  I2C_ICR_ALERTCF         /*!< Alert flag             */
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_GET_FLAG Get Flags Defines
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    Flags defines which can be used with LL_I2C_ReadReg function
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TXE                      I2C_ISR_TXE             /*!< Transmit data register emp
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TXIS                     I2C_ISR_TXIS            /*!< Transmit interrupt status 
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_RXNE                     I2C_ISR_RXNE            /*!< Receive data register not 
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ADDR                     I2C_ISR_ADDR            /*!< Address matched (slave mod
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 99


 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_NACKF                    I2C_ISR_NACKF           /*!< Not Acknowledge received f
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_STOPF                    I2C_ISR_STOPF           /*!< Stop detection flag       
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TC                       I2C_ISR_TC              /*!< Transfer Complete (master 
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TCR                      I2C_ISR_TCR             /*!< Transfer Complete Reload  
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_BERR                     I2C_ISR_BERR            /*!< Bus error                 
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ARLO                     I2C_ISR_ARLO            /*!< Arbitration lost          
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_OVR                      I2C_ISR_OVR             /*!< Overrun/Underrun (slave mo
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_PECERR                   I2C_ISR_PECERR          /*!< PEC Error in reception (SM
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TIMEOUT                  I2C_ISR_TIMEOUT         /*!< Timeout detection flag (SM
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ALERT                    I2C_ISR_ALERT           /*!< SMBus alert (SMBus mode)  
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_BUSY                     I2C_ISR_BUSY            /*!< Bus busy                  
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_IT IT Defines
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    IT defines which can be used with LL_I2C_ReadReg and  LL_I2C_WriteReg functions
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_TXIE                     I2C_CR1_TXIE            /*!< TX Interrupt enable       
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_RXIE                     I2C_CR1_RXIE            /*!< RX Interrupt enable       
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_ADDRIE                   I2C_CR1_ADDRIE          /*!< Address match Interrupt en
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_NACKIE                   I2C_CR1_NACKIE          /*!< Not acknowledge received I
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_STOPIE                   I2C_CR1_STOPIE          /*!< STOP detection Interrupt e
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_TCIE                     I2C_CR1_TCIE            /*!< Transfer Complete interrup
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_ERRIE                    I2C_CR1_ERRIE           /*!< Error interrupts enable   
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_PERIPHERAL_MODE Peripheral Mode
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_I2C                    0x00000000U              /*!< I2C Master or Slave mode  
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_HOST             I2C_CR1_SMBHEN           /*!< SMBus Host address acknowl
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_DEVICE           0x00000000U              /*!< SMBus Device default mode
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                          (Default address not ackno
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_DEVICE_ARP       I2C_CR1_SMBDEN           /*!< SMBus Device Default addre
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ANALOGFILTER_SELECTION Analog Filter Selection
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ANALOGFILTER_ENABLE          0x00000000U             /*!< Analog filter is enabled. 
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ANALOGFILTER_DISABLE         I2C_CR1_ANFOFF          /*!< Analog filter is disabled.
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ADDRESSING_MODE Master Addressing Mode
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRESSING_MODE_7BIT         0x00000000U              /*!< Master operates in 7-bit 
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRESSING_MODE_10BIT        I2C_CR2_ADD10            /*!< Master operates in 10-bit
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 100


 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_OWNADDRESS1 Own Address 1 Length
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS1_7BIT             0x00000000U             /*!< Own address 1 is a 7-bit a
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS1_10BIT            I2C_OAR1_OA1MODE        /*!< Own address 1 is a 10-bit 
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_OWNADDRESS2 Own Address 2 Masks
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_NOMASK           I2C_OAR2_OA2NOMASK      /*!< Own Address2 No mask.     
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK01           I2C_OAR2_OA2MASK01      /*!< Only Address2 bits[7:2] ar
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK02           I2C_OAR2_OA2MASK02      /*!< Only Address2 bits[7:3] ar
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK03           I2C_OAR2_OA2MASK03      /*!< Only Address2 bits[7:4] ar
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK04           I2C_OAR2_OA2MASK04      /*!< Only Address2 bits[7:5] ar
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK05           I2C_OAR2_OA2MASK05      /*!< Only Address2 bits[7:6] ar
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK06           I2C_OAR2_OA2MASK06      /*!< Only Address2 bits[7] are 
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK07           I2C_OAR2_OA2MASK07      /*!< No comparison is done.
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                          All Address2 are acknowled
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_I2C_ACKNOWLEDGE Acknowledge Generation
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ACK                          0x00000000U              /*!< ACK is sent after current
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_NACK                         I2C_CR2_NACK             /*!< NACK is sent after curren
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ADDRSLAVE Slave Address Length
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRSLAVE_7BIT               0x00000000U              /*!< Slave Address in 7-bit. *
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRSLAVE_10BIT              I2C_CR2_ADD10            /*!< Slave Address in 10-bit.*
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_REQUEST Transfer Request Direction
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_REQUEST_WRITE                0x00000000U              /*!< Master request a write tr
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_REQUEST_READ                 I2C_CR2_RD_WRN           /*!< Master request a read tra
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_MODE Transfer End Mode
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 101


 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_RELOAD                  I2C_CR2_RELOAD           /*!< Enable I2C Reload mode.  
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_AUTOEND                 I2C_CR2_AUTOEND          /*!< Enable I2C Automatic end 
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with no HW PEC comparison
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SOFTEND                 0x00000000U              /*!< Enable I2C Software end m
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with no HW PEC comparison
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_RELOAD            LL_I2C_MODE_RELOAD       /*!< Enable SMBUS Automatic en
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC    LL_I2C_MODE_AUTOEND      /*!< Enable SMBUS Automatic en
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC    LL_I2C_MODE_SOFTEND      /*!< Enable SMBUS Software end
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC  (uint32_t)(LL_I2C_MODE_AUTOEND | I2C_CR2_PECBYTE)
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Enable SMBUS Automatic end mode with HW PEC comparison.   */
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC  (uint32_t)(LL_I2C_MODE_SOFTEND | I2C_CR2_PECBYTE)
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Enable SMBUS Software end mode with HW PEC comparison.    */
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_GENERATE Start And Stop Generation
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_NOSTARTSTOP         0x00000000U
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Don't Generate Stop and Start condition. */
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_STOP                (uint32_t)(0x80000000U | I2C_CR2_STOP)
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Stop condition (Size should be set to 0).      */
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_START_READ          (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Start for read request. */
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_START_WRITE         (uint32_t)(0x80000000U | I2C_CR2_START)
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Start for write request. */
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_7BIT_READ   (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for read request, slave 7Bit address.  */
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_7BIT_WRITE  (uint32_t)(0x80000000U | I2C_CR2_START)
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for write request, slave 7Bit address. */
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_10BIT_READ  (uint32_t)(0x80000000U | I2C_CR2_START | \
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                        I2C_CR2_RD_WRN | I2C_CR2_HEAD10R)
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for read request, slave 10Bit address. */
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_10BIT_WRITE (uint32_t)(0x80000000U | I2C_CR2_START)
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for write request, slave 10Bit address.*/
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_DIRECTION Read Write Direction
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DIRECTION_WRITE              0x00000000U              /*!< Write transfer request by
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           slave enters receiver mod
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DIRECTION_READ               I2C_ISR_DIR              /*!< Read transfer request by 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           slave enters transmitter 
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_DMA_REG_DATA DMA Register Data
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 102


 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DMA_REG_DATA_TRANSMIT        0x00000000U              /*!< Get address of data regis
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           transmission */
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DMA_REG_DATA_RECEIVE         0x00000001U              /*!< Get address of data regis
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           reception */
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_SMBUS_TIMEOUTA_MODE SMBus TimeoutA Mode SCL SDA Timeout
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW      0x00000000U          /*!< TimeoutA is used to detec
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           SCL low level timeout.   
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH I2C_TIMEOUTR_TIDLE   /*!< TimeoutA is used to detec
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           both SCL and SDA high lev
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_SMBUS_TIMEOUT_SELECTION SMBus Timeout Selection
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA               I2C_TIMEOUTR_TIMOUTEN                 /*!< TimeoutA ena
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTB               I2C_TIMEOUTR_TEXTEN                   /*!< TimeoutB (ex
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                                        enable bit  
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_ALL_TIMEOUT            (uint32_t)(I2C_TIMEOUTR_TIMOUTEN | \
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                        I2C_TIMEOUTR_TEXTEN)       /*!< TimeoutA and
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** (extended clock) enable bits */
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported macro ------------------------------------------------------------*/
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Macros I2C Exported Macros
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EM_WRITE_READ Common Write and read registers Macros
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Write a value in I2C register
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __INSTANCE__ I2C Instance
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __REG__ Register to be written
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __VALUE__ Value to be written in the register
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Read a value in I2C register
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 103


 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __INSTANCE__ I2C Instance
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __REG__ Register to be read
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Register value
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EM_CONVERT_TIMINGS Convert SDA SCL timings
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SDA setup, hold time and the SCL high, low period.
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __PRESCALER__ This parameter must be a value between  Min_Data=0 and Max_Data=0xF.
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SETUP_TIME__ This parameter must be a value between Min_Data=0 and Max_Data=0xF.
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                            (tscldel = (SCLDEL+1)xtpresc)
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __HOLD_TIME__  This parameter must be a value between Min_Data=0 and Max_Data=0xF.
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                            (tsdadel = SDADELxtpresc)
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SCLH_PERIOD__ This parameter must be a value between Min_Data=0 and Max_Data=0xFF.
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                             (tsclh = (SCLH+1)xtpresc)
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SCLL_PERIOD__ This parameter must be a value between  Min_Data=0 and Max_Data=0xFF.
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                             (tscll = (SCLL+1)xtpresc)
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFFFFFFF
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define __LL_I2C_CONVERT_TIMINGS(__PRESCALER__, __SETUP_TIME__, __HOLD_TIME__, __SCLH_PERIOD__, __S
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ((((uint32_t)(__PRESCALER__)    << I2C_TIMINGR_PRESC_Pos)  & I2C_TIMINGR_PRESC)   | \
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SETUP_TIME__)   << I2C_TIMINGR_SCLDEL_Pos) & I2C_TIMINGR_SCLDEL)  | \
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__HOLD_TIME__)    << I2C_TIMINGR_SDADEL_Pos) & I2C_TIMINGR_SDADEL)  | \
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SCLH_PERIOD__)  << I2C_TIMINGR_SCLH_Pos)   & I2C_TIMINGR_SCLH)    | \
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SCLL_PERIOD__)  << I2C_TIMINGR_SCLL_Pos)   & I2C_TIMINGR_SCLL))
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported functions --------------------------------------------------------*/
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Functions I2C Exported Functions
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_Configuration Configuration
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable I2C peripheral (PE = 1).
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_Enable
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_PE);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 104


 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable I2C peripheral (PE = 0).
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When PE = 0, the I2C SCL and SDA lines are released.
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Internal state machines and status bits are put back to their reset value.
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         When cleared, PE must be kept low for at least 3 APB clock cycles.
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_Disable
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the I2C peripheral is enabled or disabled.
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_IsEnabled
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE)) ? 1UL : 0UL);
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure Noise Filters (Analog and Digital).
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   If the analog filter is also enabled, the digital filter is added to analog filter.
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The filters can only be programmed when the I2C is disabled (PE = 0).
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_ConfigFilters\n
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          DNF           LL_I2C_ConfigFilters
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  AnalogFilter This parameter can be one of the following values:
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ANALOGFILTER_ENABLE
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ANALOGFILTER_DISABLE
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disa
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                           and Max_Data=0x0F (Digital filter enabled and filtering capability up to 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This parameter is used to configure the digital noise filter on SDA and SCL input.
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t Digita
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure Digital Noise Filter.
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   If the analog filter is also enabled, the digital filter is added to analog filter.
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This filter can only be programmed when the I2C is disabled (PE = 0).
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          DNF           LL_I2C_SetDigitalFilter
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disa
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                           and Max_Data=0x0F (Digital filter enabled and filtering capability up to 
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This parameter is used to configure the digital noise filter on SDA and SCL input.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 105


 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetDigitalFilter(I2C_TypeDef *I2Cx, uint32_t DigitalFilter)
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_DNF, DigitalFilter << I2C_CR1_DNF_Pos);
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the current Digital Noise Filter configuration.
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          DNF           LL_I2C_GetDigitalFilter
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDigitalFilter(I2C_TypeDef *I2Cx)
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR1, I2C_CR1_DNF) >> I2C_CR1_DNF_Pos);
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Analog Noise Filter.
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This filter can only be programmed when the I2C is disabled (PE = 0).
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_EnableAnalogFilter
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAnalogFilter(I2C_TypeDef *I2Cx)
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ANFOFF);
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Analog Noise Filter.
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This filter can only be programmed when the I2C is disabled (PE = 0).
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_DisableAnalogFilter
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAnalogFilter(I2C_TypeDef *I2Cx)
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ANFOFF);
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Analog Noise Filter is enabled or disabled.
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_IsEnabledAnalogFilter
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAnalogFilter(I2C_TypeDef *I2Cx)
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ANFOFF) != (I2C_CR1_ANFOFF)) ? 1UL : 0UL);
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable DMA transmission requests.
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_EnableDMAReq_TX
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 106


 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableDMAReq_TX(I2C_TypeDef *I2Cx)
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable DMA transmission requests.
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_DisableDMAReq_TX
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableDMAReq_TX(I2C_TypeDef *I2Cx)
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if DMA transmission requests are enabled or disabled.
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_IsEnabledDMAReq_TX
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_TX(I2C_TypeDef *I2Cx)
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN) == (I2C_CR1_TXDMAEN)) ? 1UL : 0UL);
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable DMA reception requests.
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_EnableDMAReq_RX
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableDMAReq_RX(I2C_TypeDef *I2Cx)
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable DMA reception requests.
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_DisableDMAReq_RX
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableDMAReq_RX(I2C_TypeDef *I2Cx)
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if DMA reception requests are enabled or disabled.
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_IsEnabledDMAReq_RX
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 107


 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_RX(I2C_TypeDef *I2Cx)
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN) == (I2C_CR1_RXDMAEN)) ? 1UL : 0UL);
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the data register address used for DMA transfer
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TXDR         TXDATA        LL_I2C_DMA_GetRegAddr\n
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         RXDR         RXDATA        LL_I2C_DMA_GetRegAddr
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Direction This parameter can be one of the following values:
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DMA_REG_DATA_TRANSMIT
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DMA_REG_DATA_RECEIVE
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Address of data register
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx, uint32_t Direction)
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t data_reg_addr;
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   {
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     /* return address of TXDR register */
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   }
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   else
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   {
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     /* return address of RXDR register */
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   }
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return data_reg_addr;
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Clock stretching.
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Clock stretching.
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_DisableClockStretching
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 108


 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Clock stretching is enabled or disabled.
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_IsEnabledClockStretching
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledClockStretching(I2C_TypeDef *I2Cx)
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH) != (I2C_CR1_NOSTRETCH)) ? 1UL : 0UL);
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable hardware byte control in slave mode.
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_EnableSlaveByteControl
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSlaveByteControl(I2C_TypeDef *I2Cx)
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_SBC);
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable hardware byte control in slave mode.
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_DisableSlaveByteControl
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSlaveByteControl(I2C_TypeDef *I2Cx)
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_SBC);
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if hardware byte control in slave mode is enabled or disabled.
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_IsEnabledSlaveByteControl
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSlaveByteControl(I2C_TypeDef *I2Cx)
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_SBC) == (I2C_CR1_SBC)) ? 1UL : 0UL);
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(I2C_CR1_WUPEN)
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Wakeup from STOP.
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when Digital Filter is disabled.
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_EnableWakeUpFromStop
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableWakeUpFromStop(I2C_TypeDef *I2Cx)
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 109


 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_WUPEN);
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Wakeup from STOP.
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_DisableWakeUpFromStop
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableWakeUpFromStop(I2C_TypeDef *I2Cx)
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_WUPEN);
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Wakeup from STOP is enabled or disabled.
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_IsEnabledWakeUpFromStop
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledWakeUpFromStop(I2C_TypeDef *I2Cx)
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_WUPEN) == (I2C_CR1_WUPEN)) ? 1UL : 0UL);
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /* I2C_CR1_WUPEN */
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable General Call.
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When enabled the Address 0x00 is ACKed.
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable General Call.
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When disabled the Address 0x00 is NACKed.
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if General Call is enabled or disabled.
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_IsEnabledGeneralCall
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 110


 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledGeneralCall(I2C_TypeDef *I2Cx)
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_GCEN) == (I2C_CR1_GCEN)) ? 1UL : 0UL);
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the Master to operate in 7-bit or 10-bit addressing mode.
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing this bit is not allowed, when the START bit is set.
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          ADD10         LL_I2C_SetMasterAddressingMode
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  AddressingMode This parameter can be one of the following values:
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the Master addressing mode.
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          ADD10         LL_I2C_GetMasterAddressingMode
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetMasterAddressingMode(I2C_TypeDef *I2Cx)
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_ADD10));
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the Own Address1.
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1           LL_I2C_SetOwnAddress1\n
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         OAR1         OA1MODE       LL_I2C_SetOwnAddress1
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddress1 This parameter must be a value between Min_Data=0 and Max_Data=0x3FF.
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddrSize This parameter can be one of the following values:
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAdd
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable acknowledge on Own Address1 match address.
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 111


 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable acknowledge on Own Address1 match address.
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Own Address1 acknowledge is enabled or disabled.
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_IsEnabledOwnAddress1
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledOwnAddress1(I2C_TypeDef *I2Cx)
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN) == (I2C_OAR1_OA1EN)) ? 1UL : 0UL);
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the 7bits Own Address2.
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This action has no effect if own address2 is enabled.
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2           LL_I2C_SetOwnAddress2\n
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         OAR2         OA2MSK        LL_I2C_SetOwnAddress2
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddress2 Value between Min_Data=0 and Max_Data=0x7F.
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddrMask This parameter can be one of the following values:
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_NOMASK
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK01
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK02
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK03
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK04
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK05
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAdd
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable acknowledge on Own Address2 match address.
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_EnableOwnAddress2
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 112


 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableOwnAddress2(I2C_TypeDef *I2Cx)
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable  acknowledge on Own Address2 match address.
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Own Address1 acknowledge is enabled or disabled.
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_IsEnabledOwnAddress2
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledOwnAddress2(I2C_TypeDef *I2Cx)
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN) == (I2C_OAR2_OA2EN)) ? 1UL : 0UL);
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SDA setup, hold time and the SCL high, low period.
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      TIMINGR       LL_I2C_SetTiming
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This parameter is computed with the STM32CubeMX Tool.
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMINGR, Timing);
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the Timing Prescaler setting.
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      PRESC         LL_I2C_GetTimingPrescaler
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTimingPrescaler(I2C_TypeDef *I2Cx)
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_PRESC) >> I2C_TIMINGR_PRESC_Pos);
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SCL low period setting.
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLL          LL_I2C_GetClockLowPeriod
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 113


 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetClockLowPeriod(I2C_TypeDef *I2Cx)
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLL) >> I2C_TIMINGR_SCLL_Pos);
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SCL high period setting.
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLH          LL_I2C_GetClockHighPeriod
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetClockHighPeriod(I2C_TypeDef *I2Cx)
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLH) >> I2C_TIMINGR_SCLH_Pos);
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SDA hold time.
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SDADEL        LL_I2C_GetDataHoldTime
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDataHoldTime(I2C_TypeDef *I2Cx)
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SDADEL) >> I2C_TIMINGR_SDADEL_Pos);
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SDA setup time.
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLDEL        LL_I2C_GetDataSetupTime
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDataSetupTime(I2C_TypeDef *I2Cx)
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLDEL) >> I2C_TIMINGR_SCLDEL_Pos);
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure peripheral mode.
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SMBHEN        LL_I2C_SetMode\n
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          SMBDEN        LL_I2C_SetMode
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  PeripheralMode This parameter can be one of the following values:
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_I2C
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_HOST
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 114


1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get peripheral mode.
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SMBHEN        LL_I2C_GetMode\n
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          SMBDEN        LL_I2C_GetMode
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_I2C
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_HOST
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetMode(I2C_TypeDef *I2Cx)
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN));
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable SMBus alert (Host or Device mode)
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   SMBus Device mode:
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin is drived low and
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *           Alert Response Address Header acknowledge is enabled.
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Host mode:
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin management is supported.
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_EnableSMBusAlert
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusAlert(I2C_TypeDef *I2Cx)
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ALERTEN);
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable SMBus alert (Host or Device mode)
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   SMBus Device mode:
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin is not drived (can be used as a standard GPIO) and
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *           Alert Response Address Header acknowledge is disabled.
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Host mode:
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin management is not supported.
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_DisableSMBusAlert
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusAlert(I2C_TypeDef *I2Cx)
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ALERTEN);
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if SMBus alert (Host or Device mode) is enabled or disabled.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 115


1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_IsEnabledSMBusAlert
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusAlert(I2C_TypeDef *I2Cx)
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ALERTEN) == (I2C_CR1_ALERTEN)) ? 1UL : 0UL);
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable SMBus Packet Error Calculation (PEC).
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_EnableSMBusPEC
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusPEC(I2C_TypeDef *I2Cx)
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_PECEN);
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable SMBus Packet Error Calculation (PEC).
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_DisableSMBusPEC
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusPEC(I2C_TypeDef *I2Cx)
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_PECEN);
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if SMBus Packet Error Calculation (PEC) is enabled or disabled.
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_IsEnabledSMBusPEC
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusPEC(I2C_TypeDef *I2Cx)
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_PECEN) == (I2C_CR1_PECEN)) ? 1UL : 0UL);
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Clock Timeout.
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This configuration can only be programmed when associated Timeout is disabled (TimeoutA
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_ConfigSMBusTimeout\n
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TIDLE         LL_I2C_ConfigSMBusTimeout\n
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 116


1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TIMEOUTB      LL_I2C_ConfigSMBusTimeout
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutA This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutAMode This parameter can be one of the following values:
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutB
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ConfigSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t TimeoutA, uint32_t Timeo
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                uint32_t TimeoutB)
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTA | I2C_TIMEOUTR_TIDLE | I2C_TIMEOUTR_TIMEOUTB,
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              TimeoutA | TimeoutAMode | (TimeoutB << I2C_TIMEOUTR_TIMEOUTB_Pos));
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Clock TimeoutA (SCL low timeout or SCL and SDA high timeout depends
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   These bits can only be programmed when TimeoutA is disabled.
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_SetSMBusTimeoutA
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutA This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutA(I2C_TypeDef *I2Cx, uint32_t TimeoutA)
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutA);
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Clock TimeoutA setting.
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_GetSMBusTimeoutA
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFF
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutA(I2C_TypeDef *I2Cx)
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTA));
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the SMBus Clock TimeoutA mode.
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when TimeoutA is disabled.
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIDLE         LL_I2C_SetSMBusTimeoutAMode
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutAMode This parameter can be one of the following values:
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutAMode(I2C_TypeDef *I2Cx, uint32_t TimeoutAMode)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 117


1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutAMode);
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Clock TimeoutA mode.
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIDLE         LL_I2C_GetSMBusTimeoutAMode
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutAMode(I2C_TypeDef *I2Cx)
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIDLE));
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Extended Cumulative Clock TimeoutB (Master or Slave mode).
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   These bits can only be programmed when TimeoutB is disabled.
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTB      LL_I2C_SetSMBusTimeoutB
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutB This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutB(I2C_TypeDef *I2Cx, uint32_t TimeoutB)
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutB << I2C_TIMEOUTR_TIMEOUTB_Pos);
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Extended Cumulative Clock TimeoutB setting.
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTB      LL_I2C_GetSMBusTimeoutB
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFF
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutB(I2C_TypeDef *I2Cx)
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTB) >> I2C_TIMEOUTR_TIMEOUTB_Pos);
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable the SMBus Clock Timeout.
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_EnableSMBusTimeout\n
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_EnableSMBusTimeout
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 118


1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->TIMEOUTR, ClockTimeout);
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable the SMBus Clock Timeout.
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_DisableSMBusTimeout\n
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_DisableSMBusTimeout
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->TIMEOUTR, ClockTimeout);
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the SMBus Clock Timeout is enabled or disabled.
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_IsEnabledSMBusTimeout\n
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_IsEnabledSMBusTimeout
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->TIMEOUTR, (I2C_TIMEOUTR_TIMOUTEN | I2C_TIMEOUTR_TEXTEN)) == \
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****            (ClockTimeout)) ? 1UL : 0UL);
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_IT_Management IT_Management
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable TXIS interrupt.
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_EnableIT_TX
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 119


1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable TXIS interrupt.
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_DisableIT_TX
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the TXIS Interrupt is enabled or disabled.
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_IsEnabledIT_TX
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXIE) == (I2C_CR1_TXIE)) ? 1UL : 0UL);
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable RXNE interrupt.
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable RXNE interrupt.
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the RXNE Interrupt is enabled or disabled.
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_IsEnabledIT_RX
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 120


1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_RX(I2C_TypeDef *I2Cx)
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXIE) == (I2C_CR1_RXIE)) ? 1UL : 0UL);
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Address match interrupt (slave mode only).
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_EnableIT_ADDR
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_ADDR(I2C_TypeDef *I2Cx)
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Address match interrupt (slave mode only).
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_DisableIT_ADDR
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_ADDR(I2C_TypeDef *I2Cx)
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Address match interrupt is enabled or disabled.
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_IsEnabledIT_ADDR
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_ADDR(I2C_TypeDef *I2Cx)
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ADDRIE) == (I2C_CR1_ADDRIE)) ? 1UL : 0UL);
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Not acknowledge received interrupt.
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_EnableIT_NACK
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_NACK(I2C_TypeDef *I2Cx)
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Not acknowledge received interrupt.
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_DisableIT_NACK
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_NACK(I2C_TypeDef *I2Cx)
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 121


1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Not acknowledge received interrupt is enabled or disabled.
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_IsEnabledIT_NACK
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_NACK(I2C_TypeDef *I2Cx)
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_NACKIE) == (I2C_CR1_NACKIE)) ? 1UL : 0UL);
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable STOP detection interrupt.
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_EnableIT_STOP
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_STOP(I2C_TypeDef *I2Cx)
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable STOP detection interrupt.
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_DisableIT_STOP
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_STOP(I2C_TypeDef *I2Cx)
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if STOP detection interrupt is enabled or disabled.
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_IsEnabledIT_STOP
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_STOP(I2C_TypeDef *I2Cx)
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_STOPIE) == (I2C_CR1_STOPIE)) ? 1UL : 0UL);
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Transfer Complete interrupt.
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these events will generate interrupt :
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete (TC)
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete Reload (TCR)
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_EnableIT_TC
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_TC(I2C_TypeDef *I2Cx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 122


1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Transfer Complete interrupt.
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these events will generate interrupt :
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete (TC)
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete Reload (TCR)
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_DisableIT_TC
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_TC(I2C_TypeDef *I2Cx)
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Transfer Complete interrupt is enabled or disabled.
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_IsEnabledIT_TC
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TC(I2C_TypeDef *I2Cx)
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TCIE) == (I2C_CR1_TCIE)) ? 1UL : 0UL);
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Error interrupts.
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these errors will generate interrupt :
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Arbitration Loss (ARLO)
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Bus Error detection (BERR)
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Overrun/Underrun (OVR)
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Timeout detection (TIMEOUT)
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus PEC error detection (PECERR)
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Alert pin event detection (ALERT)
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_EnableIT_ERR
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Error interrupts.
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these errors will generate interrupt :
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Arbitration Loss (ARLO)
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Bus Error detection (BERR)
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Overrun/Underrun (OVR)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 123


1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Timeout detection (TIMEOUT)
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus PEC error detection (PECERR)
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Alert pin event detection (ALERT)
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_DisableIT_ERR
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_ERR(I2C_TypeDef *I2Cx)
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Error interrupts are enabled or disabled.
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_IsEnabledIT_ERR
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_ERR(I2C_TypeDef *I2Cx)
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ERRIE) == (I2C_CR1_ERRIE)) ? 1UL : 0UL);
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_FLAG_management FLAG_management
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transmit data register empty flag.
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When next data is written in Transmit data register.
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When Transmit data register is empty.
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transmit interrupt flag.
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When next data is written in Transmit data register.
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When Transmit data register is empty.
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 124


1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Receive data register not empty flag.
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When Receive data register is read.
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received data is copied in Receive data register.
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Address matched flag (slave mode).
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received slave address matched with one of the enabled slave address.
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ADDR          LL_I2C_IsActiveFlag_ADDR
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
 328              		.loc 4 1594 26 view .LVU51
 329              	.LBB35:
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 330              		.loc 4 1596 3 view .LVU52
 331              		.loc 4 1596 12 is_stmt 0 view .LVU53
 332 0000 094B     		ldr	r3, .L21
 333 0002 9B69     		ldr	r3, [r3, #24]
 334              		.loc 4 1596 71 view .LVU54
 335 0004 1B07     		lsls	r3, r3, #28
 336 0006 0DD5     		bpl	.L19
 337              	.LVL13:
 338              		.loc 4 1596 71 view .LVU55
 339              	.LBE35:
 340              	.LBE34:
 205:Src/stm32f0xx_it.c ****   {
 206:Src/stm32f0xx_it.c ****       if(LL_I2C_GetTransferDirection(I2C1) == LL_I2C_DIRECTION_WRITE)
 341              		.loc 1 206 7 is_stmt 1 view .LVU56
 342              	.LBB36:
 343              	.LBI36:
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Not Acknowledge received flag.
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a NACK is received after a byte transmission.
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 125


1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Stop detection flag.
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a Stop condition is detected.
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transfer complete flag (master mode).
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When RELOAD=0, AUTOEND=0 and NBYTES date have been transferred.
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transfer complete flag (master mode).
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When RELOAD=1 and NBYTES date have been transferred.
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TCR           LL_I2C_IsActiveFlag_TCR
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TCR(I2C_TypeDef *I2Cx)
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Bus error flag.
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a misplaced Start or Stop condition is detected.
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          BERR          LL_I2C_IsActiveFlag_BERR
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Arbitration lost flag.
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When arbitration lost.
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ARLO          LL_I2C_IsActiveFlag_ARLO
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 126


1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Overrun/Underrun flag (slave mode).
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When an overrun/underrun error occurs (Clock Stretching Disabled).
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          OVR           LL_I2C_IsActiveFlag_OVR
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_OVR) == (I2C_ISR_OVR)) ? 1UL : 0UL);
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus PEC error flag in reception.
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received PEC does not match with the PEC register content.
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          PECERR        LL_I2C_IsActiveSMBusFlag_PECERR
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_PECERR) == (I2C_ISR_PECERR)) ? 1UL : 0UL);
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus Timeout detection flag.
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a timeout or extended clock timeout occurs.
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TIMEOUT       LL_I2C_IsActiveSMBusFlag_TIMEOUT
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TIMEOUT) == (I2C_ISR_TIMEOUT)) ? 1UL : 0UL);
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus alert flag.
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When SMBus host configuration, SMBus alert enabled and
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 127


1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *              a falling edge event occurs on SMBA pin.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ALERT         LL_I2C_IsActiveSMBusFlag_ALERT
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ALERT) == (I2C_ISR_ALERT)) ? 1UL : 0UL);
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Bus Busy flag.
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a Start condition is detected.
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Address Matched flag.
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ADDRCF        LL_I2C_ClearFlag_ADDR
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Not Acknowledge flag.
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Stop detection flag.
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 128


1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Transmit data register empty flag (TXE).
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can be clear by software in order to flush the transmit data register (TXDR).
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXE           LL_I2C_ClearFlag_TXE
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_TXE(I2C_TypeDef *I2Cx)
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Bus error flag.
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          BERRCF        LL_I2C_ClearFlag_BERR
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Arbitration lost flag.
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ARLOCF        LL_I2C_ClearFlag_ARLO
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Overrun/Underrun flag.
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          OVRCF         LL_I2C_ClearFlag_OVR
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_OVRCF);
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus PEC error flag.
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          PECCF         LL_I2C_ClearSMBusFlag_PECERR
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_PECCF);
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 129


1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus Timeout detection flag.
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          TIMOUTCF      LL_I2C_ClearSMBusFlag_TIMEOUT
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_TIMOUTCF);
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus Alert flag.
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ALERTCF       LL_I2C_ClearSMBusFlag_ALERT
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ALERTCF);
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_Data_Management Data_Management
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable automatic STOP condition generation (master mode).
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Automatic end mode : a STOP condition is automatically sent when NBYTES data are transf
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This bit has no effect in slave mode or when RELOAD bit is set.
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable automatic STOP condition generation (master mode).
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Software end mode : TC flag is set when NBYTES data are transferre, stretching SCL low.
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_DisableAutoEndMode
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 130


1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if automatic STOP condition is enabled or disabled.
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_IsEnabledAutoEndMode
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAutoEndMode(I2C_TypeDef *I2Cx)
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_AUTOEND) == (I2C_CR2_AUTOEND)) ? 1UL : 0UL);
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable reload mode (master mode).
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The transfer is not completed after the NBYTES data transfer, NBYTES will be reloaded w
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_EnableReloadMode
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableReloadMode(I2C_TypeDef *I2Cx)
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable reload mode (master mode).
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The transfer is completed after the NBYTES data transfer(STOP or RESTART will follow).
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_DisableReloadMode
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableReloadMode(I2C_TypeDef *I2Cx)
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if reload mode is enabled or disabled.
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_IsEnabledReloadMode
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the number of bytes for transfer.
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NBYTES           LL_I2C_SetTransferSize
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 131


1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the number of bytes configured for transfer.
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NBYTES           LL_I2C_GetTransferSize
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xFF
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferSize(I2C_TypeDef *I2Cx)
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_NBYTES) >> I2C_CR2_NBYTES_Pos);
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Prepare the generation of a ACKnowledge or Non ACKnowledge condition after the address 
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****             or next received byte.
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Usage in Slave mode only.
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NACK          LL_I2C_AcknowledgeNextData
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TypeAcknowledge This parameter can be one of the following values:
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ACK
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_NACK
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Generate a START or RESTART condition
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The START bit can be set even if bus is BUSY or I2C is in slave mode.
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This action has no effect when RELOAD is set.
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          START           LL_I2C_GenerateStartCondition
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_START);
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Generate a STOP condition after the current byte transfer (master mode).
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable automatic RESTART Read request condition for 10bit address header (master mode).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 132


2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The master sends the complete 10bit slave address read sequence :
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Start + 2 bytes 10bit address in Write direction + Restart + first 7 bits of 10bit addr
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****             in Read direction.
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_EnableAuto10BitRead
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAuto10BitRead(I2C_TypeDef *I2Cx)
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_HEAD10R);
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable automatic RESTART Read request condition for 10bit address header (master mode)
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The master only sends the first 7 bits of 10bit address in Read direction.
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_DisableAuto10BitRead
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAuto10BitRead(I2C_TypeDef *I2Cx)
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_HEAD10R);
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if automatic RESTART Read request condition for 10bit address header is enabled o
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_IsEnabledAuto10BitRead
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAuto10BitRead(I2C_TypeDef *I2Cx)
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_HEAD10R) != (I2C_CR2_HEAD10R)) ? 1UL : 0UL);
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the transfer direction (master mode).
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RD_WRN           LL_I2C_SetTransferRequest
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferRequest This parameter can be one of the following values:
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_WRITE
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_READ
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the transfer direction requested (master mode).
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RD_WRN           LL_I2C_GetTransferRequest
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_WRITE
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_READ
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 133


2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferRequest(I2C_TypeDef *I2Cx)
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_RD_WRN));
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the slave address for transfer (master mode).
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD           LL_I2C_SetSlaveAddr
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the slave address programmed for transfer.
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD           LL_I2C_GetSlaveAddr
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0x3F
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSlaveAddr(I2C_TypeDef *I2Cx)
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_SADD));
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Handles I2Cx communication when starting transfer or during transfer (TC or TCR flag ar
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD          LL_I2C_HandleTransfer\n
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          ADD10         LL_I2C_HandleTransfer\n
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          RD_WRN        LL_I2C_HandleTransfer\n
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          START         LL_I2C_HandleTransfer\n
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          STOP          LL_I2C_HandleTransfer\n
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          RELOAD        LL_I2C_HandleTransfer\n
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          NBYTES        LL_I2C_HandleTransfer\n
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          AUTOEND       LL_I2C_HandleTransfer\n
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          HEAD10R       LL_I2C_HandleTransfer
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddr Specifies the slave address to be programmed.
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddrSize This parameter can be one of the following values:
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRSLAVE_7BIT
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRSLAVE_10BIT
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferSize Specifies the number of bytes to be programmed.
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *                       This parameter must be a value between Min_Data=0 and Max_Data=255.
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  EndMode This parameter can be one of the following values:
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_RELOAD
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_AUTOEND
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SOFTEND
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_RELOAD
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 134


2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Request This parameter can be one of the following values:
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_NOSTARTSTOP
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_STOP
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_START_READ
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_START_WRITE
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_7BIT_READ
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_7BIT_WRITE
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_READ
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAdd
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                            uint32_t TransferSize, uint32_t EndMode, uint32_t Reques
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the value of transfer direction (slave mode).
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Write transfer, Slave enters in receiver mode.
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: Read transfer, Slave enters in transmitter mode.
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          DIR           LL_I2C_GetTransferDirection
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DIRECTION_WRITE
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DIRECTION_READ
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
 344              		.loc 4 2156 26 view .LVU57
 345              	.LBB37:
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 346              		.loc 4 2158 3 view .LVU58
 347              		.loc 4 2158 21 is_stmt 0 view .LVU59
 348 0008 074B     		ldr	r3, .L21
 349 000a 9B69     		ldr	r3, [r3, #24]
 350              	.LVL14:
 351              		.loc 4 2158 21 view .LVU60
 352              	.LBE37:
 353              	.LBE36:
 354              		.loc 1 206 9 view .LVU61
 355 000c DB03     		lsls	r3, r3, #15
 356 000e 09D4     		bmi	.L19
 207:Src/stm32f0xx_it.c ****       {
 208:Src/stm32f0xx_it.c ****           LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 357              		.loc 1 208 11 is_stmt 1 view .LVU62
 358              	.LVL15:
 359              	.LBB38:
 360              	.LBI38:
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** {
 361              		.loc 2 583 22 view .LVU63
 362              	.LBB39:
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 135


 363              		.loc 2 585 3 view .LVU64
 364 0010 064A     		ldr	r2, .L21+4
 365 0012 1368     		ldr	r3, [r2]
 366 0014 0121     		movs	r1, #1
 367 0016 0B43     		orrs	r3, r1
 368 0018 1360     		str	r3, [r2]
 369              	.LVL16:
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h **** }
 370              		.loc 2 585 3 is_stmt 0 view .LVU65
 371              	.LBE39:
 372              	.LBE38:
 209:Src/stm32f0xx_it.c ****           LL_I2C_ClearFlag_ADDR(I2C1);
 373              		.loc 1 209 11 is_stmt 1 view .LVU66
 374              	.LBB40:
 375              	.LBI40:
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 376              		.loc 4 1755 22 view .LVU67
 377              	.LBB41:
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 378              		.loc 4 1757 3 view .LVU68
 379 001a 034A     		ldr	r2, .L21
 380 001c D369     		ldr	r3, [r2, #28]
 381 001e 0731     		adds	r1, r1, #7
 382 0020 0B43     		orrs	r3, r1
 383 0022 D361     		str	r3, [r2, #28]
 384              	.LVL17:
 385              	.L19:
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 386              		.loc 4 1757 3 is_stmt 0 view .LVU69
 387              	.LBE41:
 388              	.LBE40:
 210:Src/stm32f0xx_it.c ****       }
 211:Src/stm32f0xx_it.c ****       
 212:Src/stm32f0xx_it.c ****   }
 213:Src/stm32f0xx_it.c **** 
 214:Src/stm32f0xx_it.c ****   /* USER CODE END I2C1_IRQn 0 */
 215:Src/stm32f0xx_it.c **** 
 216:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN I2C1_IRQn 1 */
 217:Src/stm32f0xx_it.c **** 
 218:Src/stm32f0xx_it.c ****   /* USER CODE END I2C1_IRQn 1 */
 219:Src/stm32f0xx_it.c **** }
 389              		.loc 1 219 1 view .LVU70
 390              		@ sp needed
 391 0024 7047     		bx	lr
 392              	.L22:
 393 0026 C046     		.align	2
 394              	.L21:
 395 0028 00540040 		.word	1073763328
 396 002c 30000240 		.word	1073872944
 397              		.cfi_endproc
 398              	.LFE892:
 400              		.text
 401              	.Letext0:
 402              		.file 5 "e:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 403              		.file 6 "e:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 404              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 405              		.file 8 "Inc/tim.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 136


 406              		.file 9 "Inc/i2c.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s 			page 137


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_it.c
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:18     .text.NMI_Handler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:24     .text.NMI_Handler:00000000 NMI_Handler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:42     .text.HardFault_Handler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:48     .text.HardFault_Handler:00000000 HardFault_Handler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:65     .text.SVC_Handler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:71     .text.SVC_Handler:00000000 SVC_Handler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:85     .text.PendSV_Handler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:91     .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:105    .text.SysTick_Handler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:111    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:125    .text.DMA1_Channel1_IRQHandler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:131    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:159    .text.DMA1_Channel1_IRQHandler:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:164    .text.DMA1_Channel2_3_IRQHandler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:170    .text.DMA1_Channel2_3_IRQHandler:00000000 DMA1_Channel2_3_IRQHandler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:257    .text.DMA1_Channel2_3_IRQHandler:00000030 $d
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:263    .text.TIM14_IRQHandler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:269    .text.TIM14_IRQHandler:00000000 TIM14_IRQHandler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:305    .text.TIM14_IRQHandler:00000010 $d
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:310    .text.I2C1_IRQHandler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:316    .text.I2C1_IRQHandler:00000000 I2C1_IRQHandler
C:\Users\ADMINI~1\AppData\Local\Temp\cchLHJLZ.s:395    .text.I2C1_IRQHandler:00000028 $d

UNDEFINED SYMBOLS
I2C_SlaveDMARxCpltCallback
TIM14_PeriodElapsedCallback
