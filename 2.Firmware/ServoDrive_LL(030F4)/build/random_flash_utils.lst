ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"random_flash_utils.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.eeprom_buffered_read_byte,"ax",%progbits
  18              		.align	1
  19              		.global	eeprom_buffered_read_byte
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	eeprom_buffered_read_byte:
  25              		.fnstart
  26              	.LVL0:
  27              	.LFB57:
  28              		.file 1 "Src/random_flash_utils.cpp"
   1:Src/random_flash_utils.cpp **** #ifndef __STM32_EEPROM_HPP
   2:Src/random_flash_utils.cpp **** #define __STM32_EEPROM_HPP
   3:Src/random_flash_utils.cpp **** 
   4:Src/random_flash_utils.cpp **** #include <string.h>
   5:Src/random_flash_utils.cpp **** #include "random_flash_utils.h"
   6:Src/random_flash_utils.cpp **** #include "stm32f0xx_ll_flash.h"
   7:Src/random_flash_utils.cpp **** #include <stdio.h>
   8:Src/random_flash_utils.cpp **** 
   9:Src/random_flash_utils.cpp **** #ifdef __cplusplus
  10:Src/random_flash_utils.cpp **** extern "C" {
  11:Src/random_flash_utils.cpp **** 
  12:Src/random_flash_utils.cpp **** #endif
  13:Src/random_flash_utils.cpp **** 
  14:Src/random_flash_utils.cpp **** /* Be able to change FLASH_BANK_NUMBER to use if relevant */
  15:Src/random_flash_utils.cpp **** #if !defined(FLASH_BANK_NUMBER) && \
  16:Src/random_flash_utils.cpp ****     (defined(STM32F0xx) || defined(STM32F1xx) || defined(STM32G4xx) || \
  17:Src/random_flash_utils.cpp ****      defined(STM32H7xx) || defined(STM32L4xx) || defined(STM32L5xx))
  18:Src/random_flash_utils.cpp **** /* For STM32F0xx, FLASH_BANK_1 is not defined only FLASH_BANK1_END is defined */
  19:Src/random_flash_utils.cpp **** #if defined(STM32F0xx)
  20:Src/random_flash_utils.cpp **** #define FLASH_BANK_1 1U
  21:Src/random_flash_utils.cpp **** #endif
  22:Src/random_flash_utils.cpp **** #if defined(FLASH_BANK_2)
  23:Src/random_flash_utils.cpp **** #define FLASH_BANK_NUMBER   FLASH_BANK_2
  24:Src/random_flash_utils.cpp **** #else
  25:Src/random_flash_utils.cpp **** #define FLASH_BANK_NUMBER   FLASH_BANK_1
  26:Src/random_flash_utils.cpp **** #endif /* FLASH_BANK_2 */
  27:Src/random_flash_utils.cpp **** #ifndef FLASH_BANK_NUMBER
  28:Src/random_flash_utils.cpp **** #error "FLASH_BANK_NUMBER could not be defined"
  29:Src/random_flash_utils.cpp **** #endif
  30:Src/random_flash_utils.cpp **** #endif /* !FLASH_BANK_NUMBER */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 2


  31:Src/random_flash_utils.cpp **** 
  32:Src/random_flash_utils.cpp **** /* Be able to change FLASH_DATA_SECTOR to use if relevant */
  33:Src/random_flash_utils.cpp **** #if defined(STM32F2xx) || defined(STM32F4xx) || defined(STM32F7xx) || \
  34:Src/random_flash_utils.cpp ****     defined(STM32H7xx)
  35:Src/random_flash_utils.cpp **** #if !defined(FLASH_DATA_SECTOR)
  36:Src/random_flash_utils.cpp **** #define FLASH_DATA_SECTOR   ((uint32_t)(FLASH_SECTOR_TOTAL - 1))
  37:Src/random_flash_utils.cpp **** #else
  38:Src/random_flash_utils.cpp **** #ifndef FLASH_BASE_ADDRESS
  39:Src/random_flash_utils.cpp **** #error "FLASH_BASE_ADDRESS have to be defined when FLASH_DATA_SECTOR is defined"
  40:Src/random_flash_utils.cpp **** #endif
  41:Src/random_flash_utils.cpp **** #endif /* !FLASH_DATA_SECTOR */
  42:Src/random_flash_utils.cpp **** #endif /* STM32F2xx || STM32F4xx || STM32F7xx */
  43:Src/random_flash_utils.cpp **** 
  44:Src/random_flash_utils.cpp **** /* Be able to change FLASH_PAGE_NUMBER to use if relevant */
  45:Src/random_flash_utils.cpp **** #if !defined(FLASH_PAGE_NUMBER) && \
  46:Src/random_flash_utils.cpp ****     (defined (STM32G0xx) || defined(STM32G4xx) || defined (STM32L4xx) || \
  47:Src/random_flash_utils.cpp ****      defined (STM32L5xx) || defined(STM32WBxx))
  48:Src/random_flash_utils.cpp **** #define FLASH_PAGE_NUMBER   ((uint32_t)((FLASH_SIZE / FLASH_PAGE_SIZE) - 1))
  49:Src/random_flash_utils.cpp **** #endif /* !FLASH_PAGE_NUMBER */
  50:Src/random_flash_utils.cpp **** 
  51:Src/random_flash_utils.cpp **** /* Be able to change FLASH_END to use */
  52:Src/random_flash_utils.cpp **** 
  53:Src/random_flash_utils.cpp **** #define FLASH_END  FLASH_USER_END_ADDR// FLASH_BANK1_END
  54:Src/random_flash_utils.cpp **** 
  55:Src/random_flash_utils.cpp **** #if !defined(FLASH_END)
  56:Src/random_flash_utils.cpp **** #if defined (STM32F0xx) || defined (STM32F1xx)
  57:Src/random_flash_utils.cpp **** #if defined (FLASH_BANK2_END) && (FLASH_BANK_NUMBER == FLASH_BANK_2)
  58:Src/random_flash_utils.cpp **** #define FLASH_END  FLASH_BANK2_END
  59:Src/random_flash_utils.cpp **** #elif defined (FLASH_BANK1_END) && (FLASH_BANK_NUMBER == FLASH_BANK_1)
  60:Src/random_flash_utils.cpp **** #define FLASH_END  FLASH_BANK1_END
  61:Src/random_flash_utils.cpp **** #endif
  62:Src/random_flash_utils.cpp **** 
  63:Src/random_flash_utils.cpp **** #elif defined (STM32F3xx)
  64:Src/random_flash_utils.cpp **** static inline uint32_t get_flash_end(void)
  65:Src/random_flash_utils.cpp **** {
  66:Src/random_flash_utils.cpp ****   uint32_t size;
  67:Src/random_flash_utils.cpp ****   switch ((*((uint16_t *)FLASH_SIZE_DATA_REGISTER))) {
  68:Src/random_flash_utils.cpp ****     case 0x200U:
  69:Src/random_flash_utils.cpp ****       size = 0x0807FFFFU;
  70:Src/random_flash_utils.cpp ****       break;
  71:Src/random_flash_utils.cpp ****     case 0x100U:
  72:Src/random_flash_utils.cpp ****       size = 0x0803FFFFU;
  73:Src/random_flash_utils.cpp ****       break;
  74:Src/random_flash_utils.cpp ****     case 0x80U:
  75:Src/random_flash_utils.cpp ****       size = 0x0801FFFFU;
  76:Src/random_flash_utils.cpp ****       break;
  77:Src/random_flash_utils.cpp ****     case 0x40U:
  78:Src/random_flash_utils.cpp ****       size = 0x0800FFFFU;
  79:Src/random_flash_utils.cpp ****       break;
  80:Src/random_flash_utils.cpp ****     case 0x20U:
  81:Src/random_flash_utils.cpp ****       size = 0x08007FFFU;
  82:Src/random_flash_utils.cpp ****       break;
  83:Src/random_flash_utils.cpp ****     default:
  84:Src/random_flash_utils.cpp ****       size = 0x08003FFFU;
  85:Src/random_flash_utils.cpp ****       break;
  86:Src/random_flash_utils.cpp ****   }
  87:Src/random_flash_utils.cpp ****   return size;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 3


  88:Src/random_flash_utils.cpp **** }
  89:Src/random_flash_utils.cpp **** #define FLASH_END  get_flash_end()
  90:Src/random_flash_utils.cpp **** #elif defined(STM32G0xx) || defined(STM32G4xx) || defined (STM32L4xx) || \
  91:Src/random_flash_utils.cpp ****       defined (STM32L5xx) || defined(STM32WBxx)
  92:Src/random_flash_utils.cpp **** /* If FLASH_PAGE_NUMBER is defined by user, this is not really end of the flash */
  93:Src/random_flash_utils.cpp **** #define FLASH_END  ((uint32_t)(FLASH_BASE + (((FLASH_PAGE_NUMBER +1) * FLASH_PAGE_SIZE))-1))
  94:Src/random_flash_utils.cpp **** #elif defined(EEPROM_RETRAM_MODE)
  95:Src/random_flash_utils.cpp **** #define FLASH_END  ((uint32_t)(EEPROM_RETRAM_START_ADDRESS + EEPROM_RETRAM_MODE_SIZE -1))
  96:Src/random_flash_utils.cpp **** #elif defined(DATA_EEPROM_END)
  97:Src/random_flash_utils.cpp **** #define FLASH_END DATA_EEPROM_END
  98:Src/random_flash_utils.cpp **** #endif
  99:Src/random_flash_utils.cpp **** #ifndef FLASH_END
 100:Src/random_flash_utils.cpp **** #error "FLASH_END could not be defined"
 101:Src/random_flash_utils.cpp **** #endif
 102:Src/random_flash_utils.cpp **** #endif /* FLASH_END */
 103:Src/random_flash_utils.cpp **** 
 104:Src/random_flash_utils.cpp **** /* Be able to change FLASH_BASE_ADDRESS to use */
 105:Src/random_flash_utils.cpp **** #ifndef FLASH_BASE_ADDRESS
 106:Src/random_flash_utils.cpp **** /*
 107:Src/random_flash_utils.cpp ****  * By default, Use the last page of the flash to store data
 108:Src/random_flash_utils.cpp ****  * in order to prevent overwritting
 109:Src/random_flash_utils.cpp ****  * program data
 110:Src/random_flash_utils.cpp ****  */
 111:Src/random_flash_utils.cpp **** #if defined(EEPROM_RETRAM_MODE)
 112:Src/random_flash_utils.cpp **** #define FLASH_BASE_ADDRESS  EEPROM_RETRAM_START_ADDRESS
 113:Src/random_flash_utils.cpp **** #else
 114:Src/random_flash_utils.cpp **** #define FLASH_BASE_ADDRESS  ((uint32_t)((FLASH_END + 1) - FLASH_PAGE_SIZE))
 115:Src/random_flash_utils.cpp **** #endif
 116:Src/random_flash_utils.cpp **** #ifndef FLASH_BASE_ADDRESS
 117:Src/random_flash_utils.cpp **** #error "FLASH_BASE_ADDRESS could not be defined"
 118:Src/random_flash_utils.cpp **** #endif
 119:Src/random_flash_utils.cpp **** #endif /* FLASH_BASE_ADDRESS */
 120:Src/random_flash_utils.cpp **** 
 121:Src/random_flash_utils.cpp **** #if !defined(DATA_EEPROM_BASE)
 122:Src/random_flash_utils.cpp **** static uint8_t eeprom_buffer[E2END + 1] __attribute__((aligned(8))) = {0};
 123:Src/random_flash_utils.cpp **** #endif
 124:Src/random_flash_utils.cpp **** 
 125:Src/random_flash_utils.cpp **** /**
 126:Src/random_flash_utils.cpp ****   * @brief  Function reads a byte from emulated eeprom (flash)
 127:Src/random_flash_utils.cpp ****   * @param  pos : address to read
 128:Src/random_flash_utils.cpp ****   * @retval byte : data read from eeprom
 129:Src/random_flash_utils.cpp ****   */
 130:Src/random_flash_utils.cpp **** uint8_t eeprom_read_byte(const uint32_t pos)
 131:Src/random_flash_utils.cpp **** {
 132:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 133:Src/random_flash_utils.cpp ****     __IO uint8_t data = 0;
 134:Src/random_flash_utils.cpp ****     if (pos <= (DATA_EEPROM_END - DATA_EEPROM_BASE)) {
 135:Src/random_flash_utils.cpp ****       /* with actual EEPROM, pos is a relative address */
 136:Src/random_flash_utils.cpp ****       data = *(__IO uint8_t *)(DATA_EEPROM_BASE + pos);
 137:Src/random_flash_utils.cpp ****     }
 138:Src/random_flash_utils.cpp ****     return (uint8_t)data;
 139:Src/random_flash_utils.cpp **** #else
 140:Src/random_flash_utils.cpp ****     eeprom_buffer_fill();
 141:Src/random_flash_utils.cpp ****     return eeprom_buffered_read_byte(pos);
 142:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 143:Src/random_flash_utils.cpp **** }
 144:Src/random_flash_utils.cpp **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 4


 145:Src/random_flash_utils.cpp **** /**
 146:Src/random_flash_utils.cpp ****   * @brief  Function writes a byte to emulated eeprom (flash)
 147:Src/random_flash_utils.cpp ****   * @param  pos : address to write
 148:Src/random_flash_utils.cpp ****   * @param  value : value to write
 149:Src/random_flash_utils.cpp ****   * @retval none
 150:Src/random_flash_utils.cpp ****   */
 151:Src/random_flash_utils.cpp **** void eeprom_write_byte(uint32_t pos, uint8_t value)
 152:Src/random_flash_utils.cpp **** {
 153:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 154:Src/random_flash_utils.cpp ****     /* with actual EEPROM, pos is a relative address */
 155:Src/random_flash_utils.cpp ****     if (pos <= (DATA_EEPROM_END - DATA_EEPROM_BASE)) {
 156:Src/random_flash_utils.cpp ****       if (LL_FLASHEx_DATAEEPROM_Unlock() == LL_OK) {
 157:Src/random_flash_utils.cpp ****         LL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (pos + DATA_EEPROM_BASE), (uint32
 158:Src/random_flash_utils.cpp ****         LL_FLASHEx_DATAEEPROM_Lock();
 159:Src/random_flash_utils.cpp ****       }
 160:Src/random_flash_utils.cpp ****     }
 161:Src/random_flash_utils.cpp **** #else
 162:Src/random_flash_utils.cpp ****     eeprom_buffered_write_byte(pos, value);
 163:Src/random_flash_utils.cpp ****     eeprom_buffer_flush();
 164:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 165:Src/random_flash_utils.cpp **** }
 166:Src/random_flash_utils.cpp **** 
 167:Src/random_flash_utils.cpp **** #if !defined(DATA_EEPROM_BASE)
 168:Src/random_flash_utils.cpp **** 
 169:Src/random_flash_utils.cpp **** /**
 170:Src/random_flash_utils.cpp ****   * @brief  Function reads a byte from the eeprom buffer
 171:Src/random_flash_utils.cpp ****   * @param  pos : address to read
 172:Src/random_flash_utils.cpp ****   * @retval byte : data read from eeprom
 173:Src/random_flash_utils.cpp ****   */
 174:Src/random_flash_utils.cpp **** uint8_t eeprom_buffered_read_byte(const uint32_t pos)
 175:Src/random_flash_utils.cpp **** {
  29              		.loc 1 175 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 176:Src/random_flash_utils.cpp ****     return eeprom_buffer[pos];
  34              		.loc 1 176 5 view .LVU1
  35              		.loc 1 176 29 is_stmt 0 view .LVU2
  36 0000 014B     		ldr	r3, .L2
  37 0002 185C     		ldrb	r0, [r3, r0]
  38              	.LVL1:
 177:Src/random_flash_utils.cpp **** }
  39              		.loc 1 177 1 view .LVU3
  40              		@ sp needed
  41 0004 7047     		bx	lr
  42              	.L3:
  43 0006 C046     		.align	2
  44              	.L2:
  45 0008 00000000 		.word	_ZL13eeprom_buffer
  46              		.cfi_endproc
  47              	.LFE57:
  48              		.cantunwind
  49              		.fnend
  51              		.section	.text.eeprom_buffered_write_byte,"ax",%progbits
  52              		.align	1
  53              		.global	eeprom_buffered_write_byte
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 5


  54              		.syntax unified
  55              		.code	16
  56              		.thumb_func
  58              	eeprom_buffered_write_byte:
  59              		.fnstart
  60              	.LVL2:
  61              	.LFB58:
 178:Src/random_flash_utils.cpp **** 
 179:Src/random_flash_utils.cpp **** /**
 180:Src/random_flash_utils.cpp ****   * @brief  Function writes a byte to the eeprom buffer
 181:Src/random_flash_utils.cpp ****   * @param  pos : address to write
 182:Src/random_flash_utils.cpp ****   * @param  value : value to write
 183:Src/random_flash_utils.cpp ****   * @retval none
 184:Src/random_flash_utils.cpp ****   */
 185:Src/random_flash_utils.cpp **** void eeprom_buffered_write_byte(uint32_t pos, uint8_t value)
 186:Src/random_flash_utils.cpp **** {
  62              		.loc 1 186 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 187:Src/random_flash_utils.cpp ****     eeprom_buffer[pos] = value;
  67              		.loc 1 187 5 view .LVU5
  68              		.loc 1 187 24 is_stmt 0 view .LVU6
  69 0000 014B     		ldr	r3, .L5
  70 0002 1954     		strb	r1, [r3, r0]
 188:Src/random_flash_utils.cpp **** }
  71              		.loc 1 188 1 view .LVU7
  72              		@ sp needed
  73 0004 7047     		bx	lr
  74              	.L6:
  75 0006 C046     		.align	2
  76              	.L5:
  77 0008 00000000 		.word	_ZL13eeprom_buffer
  78              		.cfi_endproc
  79              	.LFE58:
  80              		.cantunwind
  81              		.fnend
  83              		.section	.text.eeprom_buffer_fill,"ax",%progbits
  84              		.align	1
  85              		.global	eeprom_buffer_fill
  86              		.syntax unified
  87              		.code	16
  88              		.thumb_func
  90              	eeprom_buffer_fill:
  91              		.fnstart
  92              	.LFB59:
 189:Src/random_flash_utils.cpp **** 
 190:Src/random_flash_utils.cpp **** /**
 191:Src/random_flash_utils.cpp ****   * @brief  This function copies the data from flash into the buffer
 192:Src/random_flash_utils.cpp ****   * @param  none
 193:Src/random_flash_utils.cpp ****   * @retval none
 194:Src/random_flash_utils.cpp ****   */
 195:Src/random_flash_utils.cpp **** void eeprom_buffer_fill(void)
 196:Src/random_flash_utils.cpp **** {
  93              		.loc 1 196 1 is_stmt 1 view -0
  94              		.cfi_startproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 6


  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97 0000 10B5     		push	{r4, lr}
  98              	.LCFI0:
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 4, -8
 101              		.cfi_offset 14, -4
 197:Src/random_flash_utils.cpp ****     memcpy(eeprom_buffer, (uint8_t*) (FLASH_BASE_ADDRESS), E2END + 1);
 102              		.loc 1 197 5 view .LVU9
 103              		.loc 1 197 11 is_stmt 0 view .LVU10
 104 0002 8022     		movs	r2, #128
 105 0004 D200     		lsls	r2, r2, #3
 106 0006 0249     		ldr	r1, .L8
 107 0008 0248     		ldr	r0, .L8+4
 108 000a FFF7FEFF 		bl	memcpy
 109              	.LVL3:
 198:Src/random_flash_utils.cpp **** }
 110              		.loc 1 198 1 view .LVU11
 111              		@ sp needed
 112 000e 10BD     		pop	{r4, pc}
 113              	.L9:
 114              		.align	2
 115              	.L8:
 116 0010 003C0008 		.word	134233088
 117 0014 00000000 		.word	_ZL13eeprom_buffer
 118              		.cfi_endproc
 119              	.LFE59:
 120              		.cantunwind
 121              		.fnend
 123              		.section	.text.eeprom_read_byte,"ax",%progbits
 124              		.align	1
 125              		.global	eeprom_read_byte
 126              		.syntax unified
 127              		.code	16
 128              		.thumb_func
 130              	eeprom_read_byte:
 131              		.fnstart
 132              	.LVL4:
 133              	.LFB55:
 131:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 134              		.loc 1 131 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 131:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 138              		.loc 1 131 1 is_stmt 0 view .LVU13
 139 0000 10B5     		push	{r4, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 4, -8
 143              		.cfi_offset 14, -4
 144 0002 0400     		movs	r4, r0
 140:Src/random_flash_utils.cpp ****     return eeprom_buffered_read_byte(pos);
 145              		.loc 1 140 5 is_stmt 1 view .LVU14
 140:Src/random_flash_utils.cpp ****     return eeprom_buffered_read_byte(pos);
 146              		.loc 1 140 23 is_stmt 0 view .LVU15
 147 0004 FFF7FEFF 		bl	eeprom_buffer_fill
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 7


 148              	.LVL5:
 141:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 149              		.loc 1 141 5 is_stmt 1 view .LVU16
 141:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 150              		.loc 1 141 37 is_stmt 0 view .LVU17
 151 0008 2000     		movs	r0, r4
 152 000a FFF7FEFF 		bl	eeprom_buffered_read_byte
 153              	.LVL6:
 143:Src/random_flash_utils.cpp **** 
 154              		.loc 1 143 1 view .LVU18
 155              		@ sp needed
 156              	.LVL7:
 143:Src/random_flash_utils.cpp **** 
 157              		.loc 1 143 1 view .LVU19
 158 000e 10BD     		pop	{r4, pc}
 159              		.cfi_endproc
 160              	.LFE55:
 161              		.cantunwind
 162              		.fnend
 164              		.section	.text.eeprom_buffer_flush,"ax",%progbits
 165              		.align	1
 166              		.global	eeprom_buffer_flush
 167              		.syntax unified
 168              		.code	16
 169              		.thumb_func
 171              	eeprom_buffer_flush:
 172              		.fnstart
 173              	.LFB60:
 199:Src/random_flash_utils.cpp **** 
 200:Src/random_flash_utils.cpp **** #if defined(EEPROM_RETRAM_MODE)
 201:Src/random_flash_utils.cpp **** 
 202:Src/random_flash_utils.cpp **** /**
 203:Src/random_flash_utils.cpp ****   * @brief  This function writes the buffer content into the flash
 204:Src/random_flash_utils.cpp ****   * @param  none
 205:Src/random_flash_utils.cpp ****   * @retval none
 206:Src/random_flash_utils.cpp ****   */
 207:Src/random_flash_utils.cpp **** void eeprom_buffer_flush(void)
 208:Src/random_flash_utils.cpp **** {
 209:Src/random_flash_utils.cpp ****   memcpy((uint8_t *)(FLASH_BASE_ADDRESS), eeprom_buffer, E2END + 1);
 210:Src/random_flash_utils.cpp **** }
 211:Src/random_flash_utils.cpp **** 
 212:Src/random_flash_utils.cpp **** #else /* defined(EEPROM_RETRAM_MODE) */
 213:Src/random_flash_utils.cpp **** 
 214:Src/random_flash_utils.cpp **** /**
 215:Src/random_flash_utils.cpp ****   * @brief  This function writes the buffer content into the flash
 216:Src/random_flash_utils.cpp ****   * @param  none
 217:Src/random_flash_utils.cpp ****   * @retval none
 218:Src/random_flash_utils.cpp ****   */
 219:Src/random_flash_utils.cpp **** void eeprom_buffer_flush(void)
 220:Src/random_flash_utils.cpp **** {
 174              		.loc 1 220 1 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 16
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 0000 30B5     		push	{r4, r5, lr}
 179              		.save {r4, r5, lr}
 180              	.LCFI2:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 8


 181              		.cfi_def_cfa_offset 12
 182              		.cfi_offset 4, -12
 183              		.cfi_offset 5, -8
 184              		.cfi_offset 14, -4
 185              		.pad #20
 186 0002 85B0     		sub	sp, sp, #20
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 32
 221:Src/random_flash_utils.cpp ****     FLASH_EraseInitTypeDef EraseInitStruct;
 189              		.loc 1 221 5 view .LVU21
 222:Src/random_flash_utils.cpp ****     uint32_t offset = 0;
 190              		.loc 1 222 5 view .LVU22
 191              	.LVL8:
 223:Src/random_flash_utils.cpp ****     uint32_t address = FLASH_BASE_ADDRESS;
 192              		.loc 1 223 5 view .LVU23
 224:Src/random_flash_utils.cpp ****     // printf("address=%x\r\n",address);
 225:Src/random_flash_utils.cpp ****     uint32_t address_end = FLASH_BASE_ADDRESS + E2END;
 193              		.loc 1 225 5 view .LVU24
 226:Src/random_flash_utils.cpp ****     // printf("address_end=%x\r\n",address_end);
 227:Src/random_flash_utils.cpp **** #if defined (STM32F0xx) || defined (STM32F1xx) || defined (STM32F3xx) || \
 228:Src/random_flash_utils.cpp ****     defined (STM32G0xx) || defined (STM32G4xx) || \
 229:Src/random_flash_utils.cpp ****     defined (STM32L4xx) || defined (STM32L5xx) || defined (STM32WBxx)
 230:Src/random_flash_utils.cpp ****     uint32_t pageError = 0;
 194              		.loc 1 230 5 view .LVU25
 195              		.loc 1 230 14 is_stmt 0 view .LVU26
 196 0004 0023     		movs	r3, #0
 197 0006 0093     		str	r3, [sp]
 231:Src/random_flash_utils.cpp ****     uint64_t data = 0;
 198              		.loc 1 231 5 is_stmt 1 view .LVU27
 199              	.LVL9:
 232:Src/random_flash_utils.cpp **** 
 233:Src/random_flash_utils.cpp ****     /* ERASING page */
 234:Src/random_flash_utils.cpp ****     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 200              		.loc 1 234 5 view .LVU28
 201              		.loc 1 234 31 is_stmt 0 view .LVU29
 202 0008 0233     		adds	r3, r3, #2
 203 000a 0193     		str	r3, [sp, #4]
 235:Src/random_flash_utils.cpp **** #if defined (STM32F1xx) || defined (STM32G4xx) || defined (STM32L4xx) || \
 236:Src/random_flash_utils.cpp ****     defined (STM32L5xx)
 237:Src/random_flash_utils.cpp ****     EraseInitStruct.Banks = FLASH_BANK_NUMBER;
 238:Src/random_flash_utils.cpp **** #endif
 239:Src/random_flash_utils.cpp **** #if defined (STM32G0xx) || defined (STM32G4xx) || defined (STM32L4xx) || \
 240:Src/random_flash_utils.cpp ****     defined (STM32L5xx) || defined (STM32WBxx)
 241:Src/random_flash_utils.cpp ****     EraseInitStruct.Page = FLASH_PAGE_NUMBER;
 242:Src/random_flash_utils.cpp **** #else
 243:Src/random_flash_utils.cpp ****     EraseInitStruct.PageAddress = FLASH_BASE_ADDRESS;
 204              		.loc 1 243 5 is_stmt 1 view .LVU30
 205              		.loc 1 243 33 is_stmt 0 view .LVU31
 206 000c 154B     		ldr	r3, .L16
 207 000e 0293     		str	r3, [sp, #8]
 244:Src/random_flash_utils.cpp **** #endif
 245:Src/random_flash_utils.cpp ****     EraseInitStruct.NbPages = 1;
 208              		.loc 1 245 5 is_stmt 1 view .LVU32
 209              		.loc 1 245 29 is_stmt 0 view .LVU33
 210 0010 0123     		movs	r3, #1
 211 0012 0393     		str	r3, [sp, #12]
 246:Src/random_flash_utils.cpp **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 9


 247:Src/random_flash_utils.cpp ****     if (LL_Flash_Unlock() == LL_OK)  
 212              		.loc 1 247 5 is_stmt 1 view .LVU34
 213              		.loc 1 247 24 is_stmt 0 view .LVU35
 214 0014 FFF7FEFF 		bl	LL_Flash_Unlock
 215              	.LVL10:
 216              		.loc 1 247 5 view .LVU36
 217 0018 0028     		cmp	r0, #0
 218 001a 01D0     		beq	.L15
 219              	.LVL11:
 220              	.L11:
 248:Src/random_flash_utils.cpp ****     {
 249:Src/random_flash_utils.cpp **** #if defined (STM32G0xx) || defined (STM32G4xx) || defined (STM32L4xx) || \
 250:Src/random_flash_utils.cpp ****       defined (STM32L5xx) || defined (STM32WBxx)
 251:Src/random_flash_utils.cpp ****         LL_FLASH_ClearFlag(FLASH_FLAG_ALL_ERRORS);
 252:Src/random_flash_utils.cpp **** #else
 253:Src/random_flash_utils.cpp ****         LL_FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 254:Src/random_flash_utils.cpp **** #endif
 255:Src/random_flash_utils.cpp ****         if (LL_Flash_PageErase(&EraseInitStruct, &pageError) == LL_OK)
 256:Src/random_flash_utils.cpp ****         {
 257:Src/random_flash_utils.cpp ****             while (address <= address_end)
 258:Src/random_flash_utils.cpp ****             {
 259:Src/random_flash_utils.cpp **** 
 260:Src/random_flash_utils.cpp ****                 data = *((uint64_t*) ((uint8_t*) eeprom_buffer + offset));
 261:Src/random_flash_utils.cpp **** 
 262:Src/random_flash_utils.cpp ****                 if (LL_FLASH_Program(ProgaraType_DATA64, address, data) == LL_OK)
 263:Src/random_flash_utils.cpp ****                 {
 264:Src/random_flash_utils.cpp ****                     address += 8;
 265:Src/random_flash_utils.cpp ****                     offset += 8;
 266:Src/random_flash_utils.cpp ****                 } else
 267:Src/random_flash_utils.cpp ****                 {
 268:Src/random_flash_utils.cpp ****                     address = address_end + 1;
 269:Src/random_flash_utils.cpp ****                 }
 270:Src/random_flash_utils.cpp ****             }
 271:Src/random_flash_utils.cpp ****         }
 272:Src/random_flash_utils.cpp ****         LL_FLASH_Lock();
 273:Src/random_flash_utils.cpp ****     }
 274:Src/random_flash_utils.cpp **** #else
 275:Src/random_flash_utils.cpp ****     uint32_t SectorError = 0;
 276:Src/random_flash_utils.cpp **** #if defined(STM32H7xx)
 277:Src/random_flash_utils.cpp ****     uint64_t data[4] = {0x0000};
 278:Src/random_flash_utils.cpp **** #else
 279:Src/random_flash_utils.cpp ****     uint32_t data = 0;
 280:Src/random_flash_utils.cpp **** #endif
 281:Src/random_flash_utils.cpp **** 
 282:Src/random_flash_utils.cpp ****     /* ERASING page */
 283:Src/random_flash_utils.cpp **** #if defined(STM32H7xx)
 284:Src/random_flash_utils.cpp ****     EraseInitStruct.Banks = FLASH_BANK_NUMBER;
 285:Src/random_flash_utils.cpp **** #endif
 286:Src/random_flash_utils.cpp ****     EraseInitStruct.NbPages = 1;
 287:Src/random_flash_utils.cpp **** 
 288:Src/random_flash_utils.cpp ****     LL_Flash_Unlock();
 289:Src/random_flash_utils.cpp **** 
 290:Src/random_flash_utils.cpp ****     if (LL_Flash_PageErase(&EraseInitStruct, &SectorError) == LL_OK)
 291:Src/random_flash_utils.cpp ****     {
 292:Src/random_flash_utils.cpp ****         while (address <= address_end)
 293:Src/random_flash_utils.cpp ****         {
 294:Src/random_flash_utils.cpp **** #if defined(STM32H7xx)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 10


 295:Src/random_flash_utils.cpp ****             // 256 bits
 296:Src/random_flash_utils.cpp ****             memcpy(&data, eeprom_buffer + offset, 8 * sizeof(uint32_t));
 297:Src/random_flash_utils.cpp ****             if (LL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address, (uint32_t)data) == LL_OK) {
 298:Src/random_flash_utils.cpp ****               address += 32;
 299:Src/random_flash_utils.cpp ****               offset += 32;
 300:Src/random_flash_utils.cpp **** #else
 301:Src/random_flash_utils.cpp ****             memcpy(&data, eeprom_buffer + offset, sizeof(uint32_t));
 302:Src/random_flash_utils.cpp ****             if (LL_FLASH_Program(ProgaraType_DATA32, address, data) == LL_OK)
 303:Src/random_flash_utils.cpp ****             {
 304:Src/random_flash_utils.cpp ****                 address += 4;
 305:Src/random_flash_utils.cpp ****                 offset += 4;
 306:Src/random_flash_utils.cpp **** #endif
 307:Src/random_flash_utils.cpp ****             } else
 308:Src/random_flash_utils.cpp ****             {
 309:Src/random_flash_utils.cpp ****                 address = address_end + 1;
 310:Src/random_flash_utils.cpp ****             }
 311:Src/random_flash_utils.cpp ****         }
 312:Src/random_flash_utils.cpp ****     }
 313:Src/random_flash_utils.cpp ****     LL_FLASH_Lock();
 314:Src/random_flash_utils.cpp **** #endif
 315:Src/random_flash_utils.cpp **** }
 221              		.loc 1 315 1 view .LVU37
 222 001c 05B0     		add	sp, sp, #20
 223              		@ sp needed
 224 001e 30BD     		pop	{r4, r5, pc}
 225              	.LVL12:
 226              	.L15:
 253:Src/random_flash_utils.cpp **** #endif
 227              		.loc 1 253 9 is_stmt 1 view .LVU38
 228              	.LBB6:
 229              	.LBI6:
 230              		.file 2 "Inc/stm32f0xx_ll_flash.h"
   1:Inc/stm32f0xx_ll_flash.h **** #ifndef __STM32F0xx_LL_FLASH_EX_H
   2:Inc/stm32f0xx_ll_flash.h **** #define __STM32F0xx_LL_FLASH_EX_H
   3:Inc/stm32f0xx_ll_flash.h **** 
   4:Inc/stm32f0xx_ll_flash.h **** #include "stm32f0xx.h"
   5:Inc/stm32f0xx_ll_flash.h **** #include "stm32f0xx_ll_flash.h"
   6:Inc/stm32f0xx_ll_flash.h **** typedef enum {
   7:Inc/stm32f0xx_ll_flash.h **** 	LL_OK=0U,
   8:Inc/stm32f0xx_ll_flash.h **** 	LL_ERROR=1U,
   9:Inc/stm32f0xx_ll_flash.h **** 	LL_BUSY = 2U,
  10:Inc/stm32f0xx_ll_flash.h **** 	LL_TIMEOUT=3U
  11:Inc/stm32f0xx_ll_flash.h **** }LL_StatusTypeDef;
  12:Inc/stm32f0xx_ll_flash.h **** 
  13:Inc/stm32f0xx_ll_flash.h **** 
  14:Inc/stm32f0xx_ll_flash.h **** typedef struct
  15:Inc/stm32f0xx_ll_flash.h **** {
  16:Inc/stm32f0xx_ll_flash.h ****   uint32_t TypeErase;   /*!< TypeErase: Mass erase or page erase.
  17:Inc/stm32f0xx_ll_flash.h ****                              This parameter can be a value of @ref FLASHEx_Type_Erase */
  18:Inc/stm32f0xx_ll_flash.h **** 
  19:Inc/stm32f0xx_ll_flash.h ****   uint32_t PageAddress; /*!< PageAdress: Initial FLASH page address to erase when mass erase is dis
  20:Inc/stm32f0xx_ll_flash.h ****                              This parameter must be a number between Min_Data = FLASH_BASE and Max_
  21:Inc/stm32f0xx_ll_flash.h ****   
  22:Inc/stm32f0xx_ll_flash.h ****   uint32_t NbPages;     /*!< NbPages: Number of pagess to be erased.
  23:Inc/stm32f0xx_ll_flash.h ****                              This parameter must be a value between Min_Data = 1 and Max_Data = (ma
  24:Inc/stm32f0xx_ll_flash.h ****                                                           
  25:Inc/stm32f0xx_ll_flash.h **** } FLASH_EraseInitTypeDef;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 11


  26:Inc/stm32f0xx_ll_flash.h **** 
  27:Inc/stm32f0xx_ll_flash.h **** #define FLASH_FLAG_BSY             FLASH_SR_BSY            /*!< FLASH Busy flag                    
  28:Inc/stm32f0xx_ll_flash.h **** #define FLASH_FLAG_PGERR           FLASH_SR_PGERR          /*!< FLASH Programming error flag    */
  29:Inc/stm32f0xx_ll_flash.h **** #define FLASH_FLAG_WRPERR          FLASH_SR_WRPERR         /*!< FLASH Write protected error flag   
  30:Inc/stm32f0xx_ll_flash.h **** #define FLASH_FLAG_EOP             FLASH_SR_EOP            /*!< FLASH End of Operation flag        
  31:Inc/stm32f0xx_ll_flash.h **** 
  32:Inc/stm32f0xx_ll_flash.h **** #define FLASH_TYPEERASE_PAGES          FLASH_CR_PER         /*!< FLASH_CR_PER          */
  33:Inc/stm32f0xx_ll_flash.h **** #define FLASH_TYPEERASE_MASSERASE      FLASH_CR_MER            /*!< MASSERASE              */
  34:Inc/stm32f0xx_ll_flash.h **** 
  35:Inc/stm32f0xx_ll_flash.h **** 
  36:Inc/stm32f0xx_ll_flash.h **** #if defined(STM32F030x6) || defined(STM32F030x8) || defined(STM32F031x6) || defined(STM32F038xx) \
  37:Inc/stm32f0xx_ll_flash.h ****  || defined(STM32F051x8) || defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F058xx) ||
  38:Inc/stm32f0xx_ll_flash.h **** #define FLASH_PAGE_SIZE          0x400U
  39:Inc/stm32f0xx_ll_flash.h **** #endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F051x8 || STM32F042x6 || STM32F048xx ||
  40:Inc/stm32f0xx_ll_flash.h **** 
  41:Inc/stm32f0xx_ll_flash.h **** #if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) \
  42:Inc/stm32f0xx_ll_flash.h ****  || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC)
  43:Inc/stm32f0xx_ll_flash.h **** #define FLASH_PAGE_SIZE          0x800U
  44:Inc/stm32f0xx_ll_flash.h **** #endif /* STM32F071xB || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx || STM32F030xC */
  45:Inc/stm32f0xx_ll_flash.h **** 
  46:Inc/stm32f0xx_ll_flash.h **** typedef enum {
  47:Inc/stm32f0xx_ll_flash.h **** 	ProgaraType_DATA64,
  48:Inc/stm32f0xx_ll_flash.h **** 	ProgaraType_DATA32,
  49:Inc/stm32f0xx_ll_flash.h **** 	ProgaraType_DATA16
  50:Inc/stm32f0xx_ll_flash.h **** }ProgaramDataType;
  51:Inc/stm32f0xx_ll_flash.h **** 
  52:Inc/stm32f0xx_ll_flash.h **** typedef enum {\
  53:Inc/stm32f0xx_ll_flash.h **** 	FLASH_Lock=1U,Flash_Unlock=!FLASH_Lock\
  54:Inc/stm32f0xx_ll_flash.h **** }FlashStates;
  55:Inc/stm32f0xx_ll_flash.h **** 
  56:Inc/stm32f0xx_ll_flash.h ****   /* Set the OBL_Launch bit to launch the option byte loading */
  57:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
  58:Inc/stm32f0xx_ll_flash.h **** {
  59:Inc/stm32f0xx_ll_flash.h ****   SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
  60:Inc/stm32f0xx_ll_flash.h **** }
  61:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_Lock(void)
  62:Inc/stm32f0xx_ll_flash.h **** {
  63:Inc/stm32f0xx_ll_flash.h ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
  64:Inc/stm32f0xx_ll_flash.h **** }
  65:Inc/stm32f0xx_ll_flash.h **** 
  66:Inc/stm32f0xx_ll_flash.h **** 
  67:Inc/stm32f0xx_ll_flash.h ****   /* @brief  Set flash erase type.
  68:Inc/stm32f0xx_ll_flash.h ****   * @param  FLASH_TYPEERASE specifies the FLASH flags to clear.
  69:Inc/stm32f0xx_ll_flash.h ****   *          This parameter can be any combination of the following values:
  70:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref FLASH_TYPEERASE_PAGES         PAGES Erase
  71:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref FLASH_TYPEERASE_MASSERASE      FLASH Write protected error flag 
  72:Inc/stm32f0xx_ll_flash.h ****   * @retval none*/
  73:Inc/stm32f0xx_ll_flash.h **** 
  74:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_SetTypeErase(FLASH_TypeDef *FLASHx,uint32_t FLASH_TYPEERASE)
  75:Inc/stm32f0xx_ll_flash.h **** {
  76:Inc/stm32f0xx_ll_flash.h ****   SET_BIT(FLASHx->CR, FLASH_TYPEERASE);
  77:Inc/stm32f0xx_ll_flash.h **** }
  78:Inc/stm32f0xx_ll_flash.h ****   /* @brief  Set flash erase ADDR.
  79:Inc/stm32f0xx_ll_flash.h ****   *          This parameter can be any combination of the following values:
  80:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref EraseADDR         uint32_t value
  81:Inc/stm32f0xx_ll_flash.h ****   * @retval none*/
  82:Inc/stm32f0xx_ll_flash.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 12


  83:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_SetEraseADDR(FLASH_TypeDef *FLASHx,uint32_t EraseADDR)
  84:Inc/stm32f0xx_ll_flash.h **** {
  85:Inc/stm32f0xx_ll_flash.h ****   WRITE_REG(FLASHx->AR, EraseADDR);
  86:Inc/stm32f0xx_ll_flash.h **** }
  87:Inc/stm32f0xx_ll_flash.h ****   /* @brief  Set flash erase ADDR.
  88:Inc/stm32f0xx_ll_flash.h ****   *          This parameter can be any combination of the following values:
  89:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref EraseADDR         uint32_t value
  90:Inc/stm32f0xx_ll_flash.h ****   * @retval none*/
  91:Inc/stm32f0xx_ll_flash.h **** 
  92:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_StartErase(FLASH_TypeDef *FLASHx)
  93:Inc/stm32f0xx_ll_flash.h **** {
  94:Inc/stm32f0xx_ll_flash.h ****   SET_BIT(FLASHx->CR, FLASH_CR_STRT);
  95:Inc/stm32f0xx_ll_flash.h **** }
  96:Inc/stm32f0xx_ll_flash.h **** 
  97:Inc/stm32f0xx_ll_flash.h ****   /* @brief  Clear the specified FLASH flag.
  98:Inc/stm32f0xx_ll_flash.h ****   * @param  __FLAG__ specifies the FLASH flags to clear.
  99:Inc/stm32f0xx_ll_flash.h ****   *          This parameter can be any combination of the following values:
 100:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref FLASH_FLAG_EOP         FLASH End of Operation flag 
 101:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref FLASH_FLAG_WRPERR      FLASH Write protected error flag 
 102:Inc/stm32f0xx_ll_flash.h ****   *            @arg @ref FLASH_FLAG_PGERR       FLASH Programming error flag
 103:Inc/stm32f0xx_ll_flash.h ****   * @retval none*/
 104:Inc/stm32f0xx_ll_flash.h **** 
 105:Inc/stm32f0xx_ll_flash.h **** __STATIC_INLINE void LL_FLASH_ClearFlag(uint32_t STATE_FLAG)
 231              		.loc 2 105 22 view .LVU39
 232              	.LBB7:
 106:Inc/stm32f0xx_ll_flash.h **** {
 107:Inc/stm32f0xx_ll_flash.h ****   WRITE_REG(FLASH->SR, STATE_FLAG);
 233              		.loc 2 107 3 view .LVU40
 234 0020 114B     		ldr	r3, .L16+4
 235 0022 3422     		movs	r2, #52
 236 0024 DA60     		str	r2, [r3, #12]
 237              	.LVL13:
 238              		.loc 2 107 3 is_stmt 0 view .LVU41
 239              	.LBE7:
 240              	.LBE6:
 255:Src/random_flash_utils.cpp ****         {
 241              		.loc 1 255 9 is_stmt 1 view .LVU42
 255:Src/random_flash_utils.cpp ****         {
 242              		.loc 1 255 31 is_stmt 0 view .LVU43
 243 0026 6946     		mov	r1, sp
 244 0028 01A8     		add	r0, sp, #4
 245 002a FFF7FEFF 		bl	LL_Flash_PageErase
 246              	.LVL14:
 255:Src/random_flash_utils.cpp ****         {
 247              		.loc 1 255 9 view .LVU44
 248 002e 0028     		cmp	r0, #0
 249 0030 11D1     		bne	.L13
 223:Src/random_flash_utils.cpp ****     // printf("address=%x\r\n",address);
 250              		.loc 1 223 14 view .LVU45
 251 0032 0C4C     		ldr	r4, .L16
 222:Src/random_flash_utils.cpp ****     uint32_t address = FLASH_BASE_ADDRESS;
 252              		.loc 1 222 14 view .LVU46
 253 0034 0025     		movs	r5, #0
 254              	.LVL15:
 255              	.L14:
 257:Src/random_flash_utils.cpp ****             {
 256              		.loc 1 257 13 is_stmt 1 view .LVU47
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 13


 257:Src/random_flash_utils.cpp ****             {
 257              		.loc 1 257 28 view .LVU48
 258 0036 0D4B     		ldr	r3, .L16+8
 259 0038 9C42     		cmp	r4, r3
 260 003a 0CD8     		bhi	.L13
 260:Src/random_flash_utils.cpp **** 
 261              		.loc 1 260 17 view .LVU49
 260:Src/random_flash_utils.cpp **** 
 262              		.loc 1 260 26 is_stmt 0 view .LVU50
 263 003c 0C4B     		ldr	r3, .L16+12
 264 003e EB18     		adds	r3, r5, r3
 260:Src/random_flash_utils.cpp **** 
 265              		.loc 1 260 22 view .LVU51
 266 0040 1A68     		ldr	r2, [r3]
 267 0042 5B68     		ldr	r3, [r3, #4]
 268              	.LVL16:
 262:Src/random_flash_utils.cpp ****                 {
 269              		.loc 1 262 17 is_stmt 1 view .LVU52
 262:Src/random_flash_utils.cpp ****                 {
 270              		.loc 1 262 37 is_stmt 0 view .LVU53
 271 0044 2100     		movs	r1, r4
 272 0046 0020     		movs	r0, #0
 273 0048 FFF7FEFF 		bl	LL_FLASH_Program
 274              	.LVL17:
 262:Src/random_flash_utils.cpp ****                 {
 275              		.loc 1 262 17 view .LVU54
 276 004c 0028     		cmp	r0, #0
 277 004e 02D1     		bne	.L13
 264:Src/random_flash_utils.cpp ****                     offset += 8;
 278              		.loc 1 264 21 is_stmt 1 view .LVU55
 264:Src/random_flash_utils.cpp ****                     offset += 8;
 279              		.loc 1 264 29 is_stmt 0 view .LVU56
 280 0050 0834     		adds	r4, r4, #8
 281              	.LVL18:
 265:Src/random_flash_utils.cpp ****                 } else
 282              		.loc 1 265 21 is_stmt 1 view .LVU57
 265:Src/random_flash_utils.cpp ****                 } else
 283              		.loc 1 265 28 is_stmt 0 view .LVU58
 284 0052 0835     		adds	r5, r5, #8
 285              	.LVL19:
 265:Src/random_flash_utils.cpp ****                 } else
 286              		.loc 1 265 28 view .LVU59
 287 0054 EFE7     		b	.L14
 288              	.LVL20:
 289              	.L13:
 272:Src/random_flash_utils.cpp ****     }
 290              		.loc 1 272 9 is_stmt 1 view .LVU60
 291              	.LBB8:
 292              	.LBI8:
  61:Inc/stm32f0xx_ll_flash.h **** {
 293              		.loc 2 61 22 view .LVU61
 294              	.LBB9:
  63:Inc/stm32f0xx_ll_flash.h **** }
 295              		.loc 2 63 3 view .LVU62
 296 0056 044A     		ldr	r2, .L16+4
 297 0058 1369     		ldr	r3, [r2, #16]
 298 005a 8021     		movs	r1, #128
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 14


 299 005c 0B43     		orrs	r3, r1
 300 005e 1361     		str	r3, [r2, #16]
 301              	.LBE9:
 302              	.LBE8:
 303              		.loc 1 315 1 is_stmt 0 view .LVU63
 304 0060 DCE7     		b	.L11
 305              	.L17:
 306 0062 C046     		.align	2
 307              	.L16:
 308 0064 003C0008 		.word	134233088
 309 0068 00200240 		.word	1073881088
 310 006c FF3F0008 		.word	134234111
 311 0070 00000000 		.word	_ZL13eeprom_buffer
 312              		.cfi_endproc
 313              	.LFE60:
 314              		.fnend
 316              		.section	.text.eeprom_write_byte,"ax",%progbits
 317              		.align	1
 318              		.global	eeprom_write_byte
 319              		.syntax unified
 320              		.code	16
 321              		.thumb_func
 323              	eeprom_write_byte:
 324              		.fnstart
 325              	.LVL21:
 326              	.LFB56:
 152:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 327              		.loc 1 152 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 152:Src/random_flash_utils.cpp **** #if defined(DATA_EEPROM_BASE)
 331              		.loc 1 152 1 is_stmt 0 view .LVU65
 332 0000 10B5     		push	{r4, lr}
 333              		.save {r4, lr}
 334              	.LCFI4:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 4, -8
 337              		.cfi_offset 14, -4
 162:Src/random_flash_utils.cpp ****     eeprom_buffer_flush();
 338              		.loc 1 162 5 is_stmt 1 view .LVU66
 162:Src/random_flash_utils.cpp ****     eeprom_buffer_flush();
 339              		.loc 1 162 31 is_stmt 0 view .LVU67
 340 0002 FFF7FEFF 		bl	eeprom_buffered_write_byte
 341              	.LVL22:
 163:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 342              		.loc 1 163 5 is_stmt 1 view .LVU68
 163:Src/random_flash_utils.cpp **** #endif /* _EEPROM_BASE */
 343              		.loc 1 163 24 is_stmt 0 view .LVU69
 344 0006 FFF7FEFF 		bl	eeprom_buffer_flush
 345              	.LVL23:
 165:Src/random_flash_utils.cpp **** 
 346              		.loc 1 165 1 view .LVU70
 347              		@ sp needed
 348 000a 10BD     		pop	{r4, pc}
 349              		.cfi_endproc
 350              	.LFE56:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 15


 351              		.fnend
 353              		.section	.bss._ZL13eeprom_buffer,"aw",%nobits
 354              		.align	3
 357              	_ZL13eeprom_buffer:
 358 0000 00000000 		.space	1024
 358      00000000 
 358      00000000 
 358      00000000 
 358      00000000 
 359              		.text
 360              	.Letext0:
 361              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 362              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 363              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 364              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 random_flash_utils.cpp
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:18     .text.eeprom_buffered_read_byte:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:24     .text.eeprom_buffered_read_byte:00000000 eeprom_buffered_read_byte
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:45     .text.eeprom_buffered_read_byte:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:357    .bss._ZL13eeprom_buffer:00000000 _ZL13eeprom_buffer
.ARM.exidx.text.eeprom_buffered_read_byte:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:52     .text.eeprom_buffered_write_byte:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:58     .text.eeprom_buffered_write_byte:00000000 eeprom_buffered_write_byte
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:77     .text.eeprom_buffered_write_byte:00000008 $d
.ARM.exidx.text.eeprom_buffered_write_byte:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:84     .text.eeprom_buffer_fill:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:90     .text.eeprom_buffer_fill:00000000 eeprom_buffer_fill
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:116    .text.eeprom_buffer_fill:00000010 $d
.ARM.exidx.text.eeprom_buffer_fill:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:124    .text.eeprom_read_byte:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:130    .text.eeprom_read_byte:00000000 eeprom_read_byte
 .ARM.exidx.text.eeprom_read_byte:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:165    .text.eeprom_buffer_flush:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:171    .text.eeprom_buffer_flush:00000000 eeprom_buffer_flush
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:308    .text.eeprom_buffer_flush:00000064 $d
.ARM.exidx.text.eeprom_buffer_flush:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:317    .text.eeprom_write_byte:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:323    .text.eeprom_write_byte:00000000 eeprom_write_byte
.ARM.exidx.text.eeprom_write_byte:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccZ8wlNN.s:354    .bss._ZL13eeprom_buffer:00000000 $d

UNDEFINED SYMBOLS
memcpy
LL_Flash_Unlock
LL_Flash_PageErase
LL_FLASH_Program
__aeabi_unwind_cpp_pr0
